
FOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000063a  00800100  00003032  000030c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003032  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000129  0080073a  0080073a  00003700  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000375c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000379c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c6d  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf1  00000000  00000000  000074f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001736  00000000  00000000  000081ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00009920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ad  00000000  00000000  00009c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001404  00000000  00000000  0000a2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000b6c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__ctors_end>
       4:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
       8:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
       c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      10:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      14:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      1c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      20:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      24:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      28:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      2c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      30:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      34:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      38:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      3c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      40:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      44:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      48:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_18>
      4c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      50:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      54:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      58:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      5c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      60:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      64:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__bad_interrupt>
      68:	b3 02       	muls	r27, r19
      6a:	e0 02       	muls	r30, r16
      6c:	e0 02       	muls	r30, r16
      6e:	5e 02       	muls	r21, r30
      70:	71 02       	muls	r23, r17
      72:	84 02       	muls	r24, r20
      74:	e0 02       	muls	r30, r16
      76:	e0 02       	muls	r30, r16
      78:	e0 02       	muls	r30, r16
      7a:	e0 02       	muls	r30, r16
      7c:	e0 02       	muls	r30, r16
      7e:	e0 02       	muls	r30, r16
      80:	e0 02       	muls	r30, r16
      82:	e0 02       	muls	r30, r16
      84:	e0 02       	muls	r30, r16
      86:	e0 02       	muls	r30, r16
      88:	c8 02       	muls	r28, r24
      8a:	e0 02       	muls	r30, r16
      8c:	e0 02       	muls	r30, r16
      8e:	e0 02       	muls	r30, r16
      90:	e0 02       	muls	r30, r16
      92:	e0 02       	muls	r30, r16
      94:	e0 02       	muls	r30, r16
      96:	e0 02       	muls	r30, r16
      98:	e0 02       	muls	r30, r16
      9a:	e0 02       	muls	r30, r16
      9c:	e0 02       	muls	r30, r16
      9e:	e0 02       	muls	r30, r16
      a0:	e0 02       	muls	r30, r16
      a2:	e0 02       	muls	r30, r16
      a4:	e0 02       	muls	r30, r16
      a6:	e0 02       	muls	r30, r16
      a8:	e0 02       	muls	r30, r16
      aa:	e0 02       	muls	r30, r16
      ac:	e0 02       	muls	r30, r16
      ae:	e0 02       	muls	r30, r16
      b0:	e0 02       	muls	r30, r16
      b2:	e0 02       	muls	r30, r16
      b4:	e0 02       	muls	r30, r16
      b6:	e0 02       	muls	r30, r16
      b8:	e0 02       	muls	r30, r16
      ba:	e0 02       	muls	r30, r16
      bc:	e0 02       	muls	r30, r16
      be:	e0 02       	muls	r30, r16
      c0:	e0 02       	muls	r30, r16
      c2:	e0 02       	muls	r30, r16
      c4:	e0 02       	muls	r30, r16
      c6:	e0 02       	muls	r30, r16
      c8:	e0 02       	muls	r30, r16
      ca:	e0 02       	muls	r30, r16
      cc:	e0 02       	muls	r30, r16
      ce:	e0 02       	muls	r30, r16
      d0:	99 02       	muls	r25, r25
      d2:	e0 02       	muls	r30, r16
      d4:	e0 02       	muls	r30, r16
      d6:	9c 02       	muls	r25, r28
      d8:	e0 02       	muls	r30, r16
      da:	e0 02       	muls	r30, r16
      dc:	e0 02       	muls	r30, r16
      de:	e0 02       	muls	r30, r16
      e0:	e0 02       	muls	r30, r16
      e2:	e0 02       	muls	r30, r16
      e4:	e0 02       	muls	r30, r16
      e6:	a2 02       	muls	r26, r18
      e8:	e0 02       	muls	r30, r16
      ea:	e0 02       	muls	r30, r16
      ec:	e0 02       	muls	r30, r16
      ee:	e0 02       	muls	r30, r16
      f0:	e0 02       	muls	r30, r16
      f2:	a2 02       	muls	r26, r18
      f4:	9f 02       	muls	r25, r31
      f6:	e0 02       	muls	r30, r16
      f8:	e0 02       	muls	r30, r16
      fa:	e0 02       	muls	r30, r16
      fc:	e0 02       	muls	r30, r16
      fe:	a4 02       	muls	r26, r20
     100:	6b 07       	cpc	r22, r27
     102:	70 07       	cpc	r23, r16
     104:	93 07       	cpc	r25, r19
     106:	93 07       	cpc	r25, r19
     108:	93 07       	cpc	r25, r19
     10a:	93 07       	cpc	r25, r19
     10c:	93 07       	cpc	r25, r19
     10e:	93 07       	cpc	r25, r19
     110:	93 07       	cpc	r25, r19
     112:	93 07       	cpc	r25, r19
     114:	75 07       	cpc	r23, r21
     116:	93 07       	cpc	r25, r19
     118:	7a 07       	cpc	r23, r26
     11a:	93 07       	cpc	r25, r19
     11c:	93 07       	cpc	r25, r19
     11e:	93 07       	cpc	r25, r19
     120:	93 07       	cpc	r25, r19
     122:	93 07       	cpc	r25, r19
     124:	93 07       	cpc	r25, r19
     126:	93 07       	cpc	r25, r19
     128:	7f 07       	cpc	r23, r31
     12a:	93 07       	cpc	r25, r19
     12c:	93 07       	cpc	r25, r19
     12e:	84 07       	cpc	r24, r20
     130:	93 07       	cpc	r25, r19
     132:	93 07       	cpc	r25, r19
     134:	93 07       	cpc	r25, r19
     136:	93 07       	cpc	r25, r19
     138:	93 07       	cpc	r25, r19
     13a:	93 07       	cpc	r25, r19
     13c:	89 07       	cpc	r24, r25
     13e:	93 07       	cpc	r25, r19
     140:	93 07       	cpc	r25, r19
     142:	93 07       	cpc	r25, r19
     144:	8e 07       	cpc	r24, r30

00000146 <__trampolines_end>:
     146:	4e 41       	sbci	r20, 0x1E	; 30
     148:	4e 49       	Address 0x00000148 is out of bounds.
.word	0xffff	; ????

00000149 <pstr_inity>:
     149:	49 4e 49 54 59                                      INITY

0000014e <pstr_inf>:
     14e:	49 4e 46                                            INF

00000151 <pwr_m10>:
     151:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     161:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000169 <pwr_p10>:
     169:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     179:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     189:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     199:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     1a9:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     1b9:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     1c9:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     1d9:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     1e9:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     1f9:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     209:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     219:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     229:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     239:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     249:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     259:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     269:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     279:	3d 27 00                                            ='.

0000027c <__ctors_end>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf ef       	ldi	r28, 0xFF	; 255
     282:	d8 e0       	ldi	r29, 0x08	; 8
     284:	de bf       	out	0x3e, r29	; 62
     286:	cd bf       	out	0x3d, r28	; 61

00000288 <wdt_init>:



void wdt_init(void)
{
	MCUSR = 0;
     288:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	a8 95       	wdr
     290:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     294:	88 61       	ori	r24, 0x18	; 24
     296:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     29a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     29e:	0f be       	out	0x3f, r0	; 63

000002a0 <__do_copy_data>:
     2a0:	17 e0       	ldi	r17, 0x07	; 7
     2a2:	a0 e0       	ldi	r26, 0x00	; 0
     2a4:	b1 e0       	ldi	r27, 0x01	; 1
     2a6:	e2 e3       	ldi	r30, 0x32	; 50
     2a8:	f0 e3       	ldi	r31, 0x30	; 48
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x10>
     2ac:	05 90       	lpm	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	aa 33       	cpi	r26, 0x3A	; 58
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0xc>

000002b6 <__do_clear_bss>:
     2b6:	28 e0       	ldi	r18, 0x08	; 8
     2b8:	aa e3       	ldi	r26, 0x3A	; 58
     2ba:	b7 e0       	ldi	r27, 0x07	; 7
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
     2c0:	a3 36       	cpi	r26, 0x63	; 99
     2c2:	b2 07       	cpc	r27, r18
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>
     2c6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <main>
     2ca:	0c 94 17 18 	jmp	0x302e	; 0x302e <_exit>

000002ce <__bad_interrupt>:
     2ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d2 <UART_getChar>:
		
}

unsigned char UART_getChar()
{
	while (!(UCSR0A & (1<<RXC0)));
     2d2:	e0 ec       	ldi	r30, 0xC0	; 192
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	88 23       	and	r24, r24
     2da:	ec f7       	brge	.-6      	; 0x2d6 <UART_getChar+0x4>
    return UDR0;
     2dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     2e0:	08 95       	ret

000002e2 <printc>:

void printc(unsigned char data)
{
    while (!(UCSR0A & (1<<UDRE0)));
     2e2:	e0 ec       	ldi	r30, 0xC0	; 192
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	90 81       	ld	r25, Z
     2e8:	95 ff       	sbrs	r25, 5
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <printc+0x4>
    UDR0 = data;
     2ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f0:	08 95       	ret

000002f2 <printm>:
}

void printm(char *output)
{
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	fc 01       	movw	r30, r24
    char i = 0;
    while(*(output + i) != '\0'){
     2fa:	80 81       	ld	r24, Z
     2fc:	88 23       	and	r24, r24
     2fe:	59 f0       	breq	.+22     	; 0x316 <printm+0x24>
     300:	8f 01       	movw	r16, r30
     302:	c0 e0       	ldi	r28, 0x00	; 0
        printc(*(output + i));
     304:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
        i++;
     308:	cf 5f       	subi	r28, 0xFF	; 255
}

void printm(char *output)
{
    char i = 0;
    while(*(output + i) != '\0'){
     30a:	f8 01       	movw	r30, r16
     30c:	ec 0f       	add	r30, r28
     30e:	f1 1d       	adc	r31, r1
     310:	80 81       	ld	r24, Z
     312:	81 11       	cpse	r24, r1
     314:	f7 cf       	rjmp	.-18     	; 0x304 <printm+0x12>
        printc(*(output + i));
        i++;
    }
}
     316:	cf 91       	pop	r28
     318:	1f 91       	pop	r17
     31a:	0f 91       	pop	r16
     31c:	08 95       	ret

0000031e <scanm>:

void scanm(unsigned char* buffer)
	{
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
		int i = 0;
		while(buffer[i] != '\n'){
     326:	fc 01       	movw	r30, r24
     328:	20 81       	ld	r18, Z
     32a:	2a 30       	cpi	r18, 0x0A	; 10
     32c:	71 f0       	breq	.+28     	; 0x34a <scanm+0x2c>
     32e:	ec 01       	movw	r28, r24
     330:	8e 01       	movw	r16, r28
			buffer[i] = UART_getChar();
     332:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_getChar>
     336:	89 93       	st	Y+, r24
			if (buffer[i]=='\r')
     338:	8d 30       	cpi	r24, 0x0D	; 13
     33a:	41 f0       	breq	.+16     	; 0x34c <scanm+0x2e>
				break;
			printc(buffer[i]);
     33c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
}

void scanm(unsigned char* buffer)
	{
		int i = 0;
		while(buffer[i] != '\n'){
     340:	8e 01       	movw	r16, r28
     342:	88 81       	ld	r24, Y
     344:	8a 30       	cpi	r24, 0x0A	; 10
     346:	a1 f7       	brne	.-24     	; 0x330 <scanm+0x12>
     348:	01 c0       	rjmp	.+2      	; 0x34c <scanm+0x2e>
     34a:	8c 01       	movw	r16, r24
			if (buffer[i]=='\r')
				break;
			printc(buffer[i]);
			i++;
		}
		buffer[i] = '\0';
     34c:	f8 01       	movw	r30, r16
     34e:	10 82       	st	Z, r1
	}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	1f 91       	pop	r17
     356:	0f 91       	pop	r16
     358:	08 95       	ret

0000035a <br>:

void br()
{

		// default line feed
		printm("\n"); // line feed
     35a:	80 e3       	ldi	r24, 0x30	; 48
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

		// windows required character
		printm("\r"); // only for windows
     362:	82 e3       	ldi	r24, 0x32	; 50
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     36a:	08 95       	ret

0000036c <screenClr>:
}
*/

void screenClr()
{
	printc('A');
     36c:	81 e4       	ldi	r24, 0x41	; 65
     36e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>

	printc(27);
     372:	8b e1       	ldi	r24, 0x1B	; 27
     374:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('[');
     378:	8b e5       	ldi	r24, 0x5B	; 91
     37a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('2');
     37e:	82 e3       	ldi	r24, 0x32	; 50
     380:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('J');
     384:	8a e4       	ldi	r24, 0x4A	; 74
     386:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>

	printc(27);
     38a:	8b e1       	ldi	r24, 0x1B	; 27
     38c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('[');
     390:	8b e5       	ldi	r24, 0x5B	; 91
     392:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('H');
     396:	88 e4       	ldi	r24, 0x48	; 72
     398:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
     39c:	08 95       	ret

0000039e <UART_init>:
#include <avr/io.h>
#include <stdlib.h>

void UART_init(unsigned char mode, unsigned char interrupted)
{	
	DDRD |= (1<<PORTD1);	
     39e:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(1<<PORTD0);		
     3a0:	50 98       	cbi	0x0a, 0	; 10

	#define BAUD 76800

	#include <util/setbaud.h>

	UBRR0H = UBRRH_VALUE;
     3a2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
     3a6:	9c e0       	ldi	r25, 0x0C	; 12
     3a8:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	switch (mode){
     3ac:	81 30       	cpi	r24, 0x01	; 1
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <UART_init+0x18>
     3b0:	82 30       	cpi	r24, 0x02	; 2
     3b2:	39 f0       	breq	.+14     	; 0x3c2 <UART_init+0x24>
     3b4:	0c c0       	rjmp	.+24     	; 0x3ce <UART_init+0x30>
		case 1:			
			UCSR0A |= (1<<U2X0);
     3b6:	e0 ec       	ldi	r30, 0xC0	; 192
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	82 60       	ori	r24, 0x02	; 2
     3be:	80 83       	st	Z, r24
			break;
     3c0:	0b c0       	rjmp	.+22     	; 0x3d8 <UART_init+0x3a>

		case 2:		
			UCSR0C |= (1<<UMSEL00);
     3c2:	e2 ec       	ldi	r30, 0xC2	; 194
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	80 64       	ori	r24, 0x40	; 64
     3ca:	80 83       	st	Z, r24
			break;
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <UART_init+0x3a>

		default:		
			UCSR0A &= ~(1<<U2X0);
     3ce:	e0 ec       	ldi	r30, 0xC0	; 192
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	8d 7f       	andi	r24, 0xFD	; 253
     3d6:	80 83       	st	Z, r24
			break;
	}

	if (interrupted)
     3d8:	66 23       	and	r22, r22
     3da:	29 f0       	breq	.+10     	; 0x3e6 <UART_init+0x48>
		UCSR0B |= (1<<RXCIE0);	
     3dc:	e1 ec       	ldi	r30, 0xC1	; 193
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	80 68       	ori	r24, 0x80	; 128
     3e4:	80 83       	st	Z, r24

	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);		
     3e6:	e1 ec       	ldi	r30, 0xC1	; 193
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	88 61       	ori	r24, 0x18	; 24
     3ee:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);	
     3f0:	e2 ec       	ldi	r30, 0xC2	; 194
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	86 60       	ori	r24, 0x06	; 6
     3f8:	80 83       	st	Z, r24

	screenClr();
     3fa:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>

		printm("UART initialized...");
     3fe:	84 e3       	ldi	r24, 0x34	; 52
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		br(); br();
     406:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
     40a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
		printm("Interrupts initialized...");
     40e:	88 e4       	ldi	r24, 0x48	; 72
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     416:	08 95       	ret

00000418 <__vector_18>:
// END ====================================

// ========================================
// INTERRUPT VECTOR
ISR(USART_RX_vect)
{
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	2f 93       	push	r18
     428:	3f 93       	push	r19
     42a:	4f 93       	push	r20
     42c:	5f 93       	push	r21
     42e:	6f 93       	push	r22
     430:	7f 93       	push	r23
     432:	8f 93       	push	r24
     434:	9f 93       	push	r25
     436:	af 93       	push	r26
     438:	bf 93       	push	r27
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31

	cli();
     442:	f8 94       	cli

	screenClr();
     444:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
	header();
     448:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
	
	if(menu == FALSE)
     44c:	80 91 46 07 	lds	r24, 0x0746	; 0x800746 <menu>
     450:	90 91 47 07 	lds	r25, 0x0747	; 0x800747 <menu+0x1>
     454:	00 97       	sbiw	r24, 0x00	; 0
     456:	b9 f4       	brne	.+46     	; 0x486 <__vector_18+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     458:	8f ec       	ldi	r24, 0xCF	; 207
     45a:	97 e0       	ldi	r25, 0x07	; 7
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__vector_18+0x44>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__vector_18+0x4a>
     462:	00 00       	nop
	{
		_delay_ms(1);
		menu = TRUE;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	90 93 47 07 	sts	0x0747, r25	; 0x800747 <menu+0x1>
     46c:	80 93 46 07 	sts	0x0746, r24	; 0x800746 <menu>
		terminate = TRUE;
     470:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <terminate+0x1>
     474:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <terminate>
     478:	8f ec       	ldi	r24, 0xCF	; 207
     47a:	97 e0       	ldi	r25, 0x07	; 7
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <__vector_18+0x64>
     480:	00 c0       	rjmp	.+0      	; 0x482 <__vector_18+0x6a>
     482:	00 00       	nop
     484:	b7 c0       	rjmp	.+366    	; 0x5f4 <__vector_18+0x1dc>
		_delay_ms(1);
	}

	else if(menu == TRUE)
     486:	01 97       	sbiw	r24, 0x01	; 1
     488:	09 f0       	breq	.+2      	; 0x48c <__vector_18+0x74>
     48a:	b4 c0       	rjmp	.+360    	; 0x5f4 <__vector_18+0x1dc>
	{
		UART_getChar();
     48c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_getChar>

				case '=':
				pollingSpeed += 100;

				if(pollingSpeed > 3000)
					pollingSpeed = 3000;
     490:	08 eb       	ldi	r16, 0xB8	; 184
     492:	1b e0       	ldi	r17, 0x0B	; 11

				case '-':
				pollingSpeed -= 100;

				if(pollingSpeed == 0)
					pollingSpeed = 100;
     494:	c4 e6       	ldi	r28, 0x64	; 100
     496:	d0 e0       	ldi	r29, 0x00	; 0
	{
		UART_getChar();

		do
		{
			command = mainMenu();
     498:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <mainMenu>
     49c:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <command>
			
			switch (command)
     4a0:	e0 91 d2 07 	lds	r30, 0x07D2	; 0x8007d2 <command>
     4a4:	8e 2f       	mov	r24, r30
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	bd 97       	sbiw	r30, 0x2d	; 45
     4ac:	ec 34       	cpi	r30, 0x4C	; 76
     4ae:	f1 05       	cpc	r31, r1
     4b0:	08 f0       	brcs	.+2      	; 0x4b4 <__vector_18+0x9c>
     4b2:	86 c0       	rjmp	.+268    	; 0x5c0 <__vector_18+0x1a8>
     4b4:	ec 5c       	subi	r30, 0xCC	; 204
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__tablejump2__>
			{
				case '0':
				op_mode = 0;
     4bc:	10 92 49 07 	sts	0x0749, r1	; 0x800749 <op_mode+0x1>
     4c0:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <op_mode>
				screenClr();
     4c4:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
				header();
     4c8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
				menu	  = FALSE;
     4cc:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <menu+0x1>
     4d0:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <menu>
				terminate = TRUE;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <terminate+0x1>
     4dc:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <terminate>
				break;
     4e0:	80 c0       	rjmp	.+256    	; 0x5e2 <__vector_18+0x1ca>

				case '1':
				op_mode = 1;
     4e2:	c1 e0       	ldi	r28, 0x01	; 1
     4e4:	d0 e0       	ldi	r29, 0x00	; 0
     4e6:	d0 93 49 07 	sts	0x0749, r29	; 0x800749 <op_mode+0x1>
     4ea:	c0 93 48 07 	sts	0x0748, r28	; 0x800748 <op_mode>
				screenClr();
     4ee:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
				header();
     4f2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
				menu	  = FALSE;
     4f6:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <menu+0x1>
     4fa:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <menu>
				terminate = TRUE;
     4fe:	d0 93 45 07 	sts	0x0745, r29	; 0x800745 <terminate+0x1>
     502:	c0 93 44 07 	sts	0x0744, r28	; 0x800744 <terminate>
				break;
     506:	6d c0       	rjmp	.+218    	; 0x5e2 <__vector_18+0x1ca>

				case '2':
				op_mode = 2;
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	90 93 49 07 	sts	0x0749, r25	; 0x800749 <op_mode+0x1>
     510:	80 93 48 07 	sts	0x0748, r24	; 0x800748 <op_mode>
				screenClr();
     514:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
				header();
     518:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
				menu	  = FALSE;
     51c:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <menu+0x1>
     520:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <menu>
				terminate = TRUE;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <terminate+0x1>
     52c:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <terminate>
				break;
     530:	58 c0       	rjmp	.+176    	; 0x5e2 <__vector_18+0x1ca>

				case 'a':
				calibrationMenu();
     532:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <calibrationMenu>
				break;
     536:	4e c0       	rjmp	.+156    	; 0x5d4 <__vector_18+0x1bc>
				
				case 'd':
				diagnosticMenu();
     538:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <diagnosticMenu>
				break;
     53c:	4b c0       	rjmp	.+150    	; 0x5d4 <__vector_18+0x1bc>

				case 's':
				powerModes();
     53e:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <powerModes>
				break;
     542:	48 c0       	rjmp	.+144    	; 0x5d4 <__vector_18+0x1bc>

				case 'l':
				//ledModes();
				case 'r':
				wdt_init();
     544:	0e 94 44 01 	call	0x288	; 0x288 <wdt_init>
				case 'x':
				screenClr();
     548:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
				header();
     54c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
				menu	  = FALSE;
     550:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <menu+0x1>
     554:	10 92 46 07 	sts	0x0746, r1	; 0x800746 <menu>
				terminate = TRUE;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	90 93 45 07 	sts	0x0745, r25	; 0x800745 <terminate+0x1>
     560:	80 93 44 07 	sts	0x0744, r24	; 0x800744 <terminate>
				break;
     564:	3e c0       	rjmp	.+124    	; 0x5e2 <__vector_18+0x1ca>

				case '-':
				pollingSpeed -= 100;
     566:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pollingSpeed>
     56a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pollingSpeed+0x1>
     56e:	84 56       	subi	r24, 0x64	; 100
     570:	91 09       	sbc	r25, r1

				if(pollingSpeed == 0)
     572:	29 f0       	breq	.+10     	; 0x57e <__vector_18+0x166>
				menu	  = FALSE;
				terminate = TRUE;
				break;

				case '-':
				pollingSpeed -= 100;
     574:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <pollingSpeed+0x1>
     578:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pollingSpeed>
     57c:	04 c0       	rjmp	.+8      	; 0x586 <__vector_18+0x16e>

				if(pollingSpeed == 0)
					pollingSpeed = 100;
     57e:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <pollingSpeed+0x1>
     582:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <pollingSpeed>

				screenClr();
     586:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
				header();
     58a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
				break;
     58e:	22 c0       	rjmp	.+68     	; 0x5d4 <__vector_18+0x1bc>

				case '=':
				pollingSpeed += 100;
     590:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pollingSpeed>
     594:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pollingSpeed+0x1>
     598:	8c 59       	subi	r24, 0x9C	; 156
     59a:	9f 4f       	sbci	r25, 0xFF	; 255

				if(pollingSpeed > 3000)
     59c:	89 3b       	cpi	r24, 0xB9	; 185
     59e:	2b e0       	ldi	r18, 0x0B	; 11
     5a0:	92 07       	cpc	r25, r18
     5a2:	2c f4       	brge	.+10     	; 0x5ae <__vector_18+0x196>
				screenClr();
				header();
				break;

				case '=':
				pollingSpeed += 100;
     5a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <pollingSpeed+0x1>
     5a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <pollingSpeed>
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <__vector_18+0x19e>

				if(pollingSpeed > 3000)
					pollingSpeed = 3000;
     5ae:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <pollingSpeed+0x1>
     5b2:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <pollingSpeed>

				screenClr();
     5b6:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
				header();
     5ba:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
				break;
     5be:	0a c0       	rjmp	.+20     	; 0x5d4 <__vector_18+0x1bc>

				default:
				screenClr();
     5c0:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
				header();
     5c4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
     5c8:	8f ec       	ldi	r24, 0xCF	; 207
     5ca:	97 e0       	ldi	r25, 0x07	; 7
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <__vector_18+0x1b4>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <__vector_18+0x1ba>
     5d2:	00 00       	nop
				_delay_ms(1);
				break;
			}
		} while (terminate == FALSE);
     5d4:	80 91 44 07 	lds	r24, 0x0744	; 0x800744 <terminate>
     5d8:	90 91 45 07 	lds	r25, 0x0745	; 0x800745 <terminate+0x1>
     5dc:	89 2b       	or	r24, r25
     5de:	09 f4       	brne	.+2      	; 0x5e2 <__vector_18+0x1ca>
     5e0:	5b cf       	rjmp	.-330    	; 0x498 <__vector_18+0x80>
     5e2:	9f ef       	ldi	r25, 0xFF	; 255
     5e4:	20 e7       	ldi	r18, 0x70	; 112
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	91 50       	subi	r25, 0x01	; 1
     5ea:	20 40       	sbci	r18, 0x00	; 0
     5ec:	80 40       	sbci	r24, 0x00	; 0
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <__vector_18+0x1d0>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__vector_18+0x1da>
     5f2:	00 00       	nop
	
		_delay_ms(100);
	} 

	terminate = FALSE;
     5f4:	10 92 45 07 	sts	0x0745, r1	; 0x800745 <terminate+0x1>
     5f8:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <terminate>
     5fc:	9f ef       	ldi	r25, 0xFF	; 255
     5fe:	20 e7       	ldi	r18, 0x70	; 112
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	91 50       	subi	r25, 0x01	; 1
     604:	20 40       	sbci	r18, 0x00	; 0
     606:	80 40       	sbci	r24, 0x00	; 0
     608:	e1 f7       	brne	.-8      	; 0x602 <__vector_18+0x1ea>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <__vector_18+0x1f4>
     60c:	00 00       	nop

	_delay_ms(100);

}
     60e:	ff 91       	pop	r31
     610:	ef 91       	pop	r30
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <ADC_init>:
	return;
}

void ADC_init()
{
	DDRC = 0x0;			// PORTC input
     638:	17 b8       	out	0x07, r1	; 7

	DIDR0 = 0x1;		// disable digital input on ADC0 pin
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>

	// initialize ADC
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | ( 1 <<ADPS1) | (1 << ADPS0);
     640:	ea e7       	ldi	r30, 0x7A	; 122
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	87 68       	ori	r24, 0x87	; 135
     648:	80 83       	st	Z, r24
	//ADCSRA |=
	// prescaler = 128
	ADCSRB = 0x0;		// free running mode
     64a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

	ADMUX |= (1 << REFS0);
     64e:	ec e7       	ldi	r30, 0x7C	; 124
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	80 64       	ori	r24, 0x40	; 64
     656:	80 83       	st	Z, r24

	printm("ADC initialized...");
     658:	82 e6       	ldi	r24, 0x62	; 98
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	br();
     660:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	br();
     664:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
     668:	08 95       	ret

0000066a <ADC_conv>:
}

float ADC_conv(unsigned int channel, unsigned int print)
{
     66a:	4f 92       	push	r4
     66c:	5f 92       	push	r5
     66e:	6f 92       	push	r6
     670:	7f 92       	push	r7
     672:	8f 92       	push	r8
     674:	9f 92       	push	r9
     676:	af 92       	push	r10
     678:	bf 92       	push	r11
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	6c 97       	sbiw	r28, 0x1c	; 28
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	5c 01       	movw	r10, r24
     694:	4b 01       	movw	r8, r22
     696:	8f ec       	ldi	r24, 0xCF	; 207
     698:	97 e0       	ldi	r25, 0x07	; 7
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <ADC_conv+0x30>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <ADC_conv+0x36>
     6a0:	00 00       	nop
	// ----------------------------------------

	_delay_ms(1);

	// conversion
	if(ADC_en[channel] == 1)
     6a2:	f5 01       	movw	r30, r10
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	ec 5d       	subi	r30, 0xDC	; 220
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	91 05       	cpc	r25, r1
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <ADC_conv+0x4e>
     6b6:	7e c0       	rjmp	.+252    	; 0x7b4 <ADC_conv+0x14a>
	{
		ADMUX = 0100000 + channel;
     6b8:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		
		ADCSRA |= (1 << ADEN) | (1 << ADSC);
     6bc:	ea e7       	ldi	r30, 0x7A	; 122
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	80 6c       	ori	r24, 0xC0	; 192
     6c4:	80 83       	st	Z, r24
     6c6:	8f ec       	ldi	r24, 0xCF	; 207
     6c8:	97 e0       	ldi	r25, 0x07	; 7
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <ADC_conv+0x60>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <ADC_conv+0x66>
     6d0:	00 00       	nop
		
		_delay_ms(1);
		
		// wait for conversion
		while( (ADCSRA & (1 << ADIF) ) == 0 );
     6d2:	80 81       	ld	r24, Z
     6d4:	84 ff       	sbrs	r24, 4
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <ADC_conv+0x68>
		
		ADCV = ADC & 0x03FF;				// grab only the 10 bits		// add offset to recorded voltage
     6d8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     6dc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     6e0:	73 70       	andi	r23, 0x03	; 3
		
		voltage = (ADCV * VCC / 0x3FF);		// convert int to float
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__floatunsisf>
     6ea:	2a e9       	ldi	r18, 0x9A	; 154
     6ec:	39 e9       	ldi	r19, 0x99	; 153
     6ee:	41 ea       	ldi	r20, 0xA1	; 161
     6f0:	50 e4       	ldi	r21, 0x40	; 64
     6f2:	0e 94 a5 11 	call	0x234a	; 0x234a <__mulsf3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 ec       	ldi	r19, 0xC0	; 192
     6fa:	4f e7       	ldi	r20, 0x7F	; 127
     6fc:	54 e4       	ldi	r21, 0x44	; 68
     6fe:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divsf3>
		
		voltage += V_ADJUST;
     702:	2e ea       	ldi	r18, 0xAE	; 174
     704:	37 e4       	ldi	r19, 0x47	; 71
     706:	41 ee       	ldi	r20, 0xE1	; 225
     708:	5d e3       	ldi	r21, 0x3D	; 61
     70a:	0e 94 0a 10 	call	0x2014	; 0x2014 <__subsf3>
		voltage += ADC_ADJUST;

		voltage += AD_global_offset;
     70e:	20 91 4e 07 	lds	r18, 0x074E	; 0x80074e <AD_global_offset>
     712:	30 91 4f 07 	lds	r19, 0x074F	; 0x80074f <AD_global_offset+0x1>
     716:	40 91 50 07 	lds	r20, 0x0750	; 0x800750 <AD_global_offset+0x2>
     71a:	50 91 51 07 	lds	r21, 0x0751	; 0x800751 <AD_global_offset+0x3>
     71e:	0e 94 0b 10 	call	0x2016	; 0x2016 <__addsf3>
		voltage += AD_offset[channel];
     722:	f5 01       	movw	r30, r10
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	e4 5f       	subi	r30, 0xF4	; 244
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	20 81       	ld	r18, Z
     732:	31 81       	ldd	r19, Z+1	; 0x01
     734:	42 81       	ldd	r20, Z+2	; 0x02
     736:	53 81       	ldd	r21, Z+3	; 0x03
     738:	0e 94 0b 10 	call	0x2016	; 0x2016 <__addsf3>
     73c:	46 2e       	mov	r4, r22
     73e:	57 2e       	mov	r5, r23
     740:	68 2e       	mov	r6, r24
     742:	79 2e       	mov	r7, r25

		if(voltage < 0)
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	a9 01       	movw	r20, r18
     74a:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     74e:	88 23       	and	r24, r24
     750:	24 f4       	brge	.+8      	; 0x75a <ADC_conv+0xf0>
		voltage = 0;
     752:	41 2c       	mov	r4, r1
     754:	51 2c       	mov	r5, r1
     756:	61 2c       	mov	r6, r1
     758:	71 2c       	mov	r7, r1
		
		dtostrf(voltage, 4, 3, stringValue);
     75a:	8e 01       	movw	r16, r28
     75c:	07 5f       	subi	r16, 0xF7	; 247
     75e:	1f 4f       	sbci	r17, 0xFF	; 255
     760:	23 e0       	ldi	r18, 0x03	; 3
     762:	44 e0       	ldi	r20, 0x04	; 4
     764:	64 2d       	mov	r22, r4
     766:	75 2d       	mov	r23, r5
     768:	86 2d       	mov	r24, r6
     76a:	97 2d       	mov	r25, r7
     76c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     770:	4a e0       	ldi	r20, 0x0A	; 10
     772:	be 01       	movw	r22, r28
     774:	6f 5f       	subi	r22, 0xFF	; 255
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	c5 01       	movw	r24, r10
     77a:	0e 94 aa 13 	call	0x2754	; 0x2754 <__itoa_ncheck>
		
		itoa(channel, channelChar, 10);
		
		if(print == TRUE)
     77e:	8a 94       	dec	r8
     780:	89 28       	or	r8, r9
     782:	19 f5       	brne	.+70     	; 0x7ca <ADC_conv+0x160>
		{
			printm("A");
     784:	8d e2       	ldi	r24, 0x2D	; 45
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			printm(channelChar);
     78c:	ce 01       	movw	r24, r28
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			printm(" ");
     794:	83 e4       	ldi	r24, 0x43	; 67
     796:	94 e0       	ldi	r25, 0x04	; 4
     798:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			printm(stringValue);				// print the voltage
     79c:	c8 01       	movw	r24, r16
     79e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			printm(" V");				// suffix
     7a2:	85 e7       	ldi	r24, 0x75	; 117
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		}
		
		return voltage;
     7aa:	54 2d       	mov	r21, r4
     7ac:	45 2d       	mov	r20, r5
     7ae:	36 2d       	mov	r19, r6
     7b0:	27 2d       	mov	r18, r7
     7b2:	14 c0       	rjmp	.+40     	; 0x7dc <ADC_conv+0x172>
	}
	
	else if(ADC_en[channel] == 0)
     7b4:	89 2b       	or	r24, r25
     7b6:	71 f4       	brne	.+28     	; 0x7d4 <ADC_conv+0x16a>
	{
		ADCSRA |= (0 << ADEN);
     7b8:	ea e7       	ldi	r30, 0x7A	; 122
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	80 83       	st	Z, r24

		return -1.0;
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	30 e8       	ldi	r19, 0x80	; 128
     7c6:	2f eb       	ldi	r18, 0xBF	; 191
     7c8:	09 c0       	rjmp	.+18     	; 0x7dc <ADC_conv+0x172>
			printm(" ");
			printm(stringValue);				// print the voltage
			printm(" V");				// suffix
		}
		
		return voltage;
     7ca:	54 2d       	mov	r21, r4
     7cc:	45 2d       	mov	r20, r5
     7ce:	36 2d       	mov	r19, r6
     7d0:	27 2d       	mov	r18, r7
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <ADC_conv+0x172>
		ADCSRA |= (0 << ADEN);

		return -1.0;
	}
	else
	return 0.0;
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	20 e0       	ldi	r18, 0x00	; 0
}
     7dc:	65 2f       	mov	r22, r21
     7de:	74 2f       	mov	r23, r20
     7e0:	83 2f       	mov	r24, r19
     7e2:	92 2f       	mov	r25, r18
     7e4:	6c 96       	adiw	r28, 0x1c	; 28
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	bf 90       	pop	r11
     7fa:	af 90       	pop	r10
     7fc:	9f 90       	pop	r9
     7fe:	8f 90       	pop	r8
     800:	7f 90       	pop	r7
     802:	6f 90       	pop	r6
     804:	5f 90       	pop	r5
     806:	4f 90       	pop	r4
     808:	08 95       	ret

0000080a <internal_Volt>:

void internal_Volt()
{
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	64 97       	sbiw	r28, 0x14	; 20
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61

	// ========================================
	// IMPLEMENATION
	// ----------------------------------------

	ADMUX = (0 << REFS1) | (1 << REFS0) | (1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (0 << MUX0);
     822:	8e e4       	ldi	r24, 0x4E	; 78
     824:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     828:	8f ec       	ldi	r24, 0xCF	; 207
     82a:	97 e0       	ldi	r25, 0x07	; 7
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	f1 f7       	brne	.-4      	; 0x82c <internal_Volt+0x22>
     830:	00 c0       	rjmp	.+0      	; 0x832 <internal_Volt+0x28>
     832:	00 00       	nop

	_delay_ms(1);

	ADCSRA |= (1 << ADEN) | (1 << ADSC);
     834:	ea e7       	ldi	r30, 0x7A	; 122
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	80 6c       	ori	r24, 0xC0	; 192
     83c:	80 83       	st	Z, r24
     83e:	8f ec       	ldi	r24, 0xCF	; 207
     840:	97 e0       	ldi	r25, 0x07	; 7
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <internal_Volt+0x38>
     846:	00 c0       	rjmp	.+0      	; 0x848 <internal_Volt+0x3e>
     848:	00 00       	nop

	_delay_ms(1);

	while( (ADCSRA & (1 << ADIF) ) == 0 );      // Detect end-of-conversion
     84a:	80 81       	ld	r24, Z
     84c:	84 ff       	sbrs	r24, 4
     84e:	fd cf       	rjmp	.-6      	; 0x84a <internal_Volt+0x40>

	uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH
     850:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint8_t high = ADCH; // unlocks both
     854:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>

	long result = (high << 8) | low;
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	38 2b       	or	r19, r24
     85c:	03 2e       	mov	r0, r19
     85e:	00 0c       	add	r0, r0
     860:	44 0b       	sbc	r20, r20
     862:	55 0b       	sbc	r21, r21

	result = 1125300 / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
     864:	64 eb       	ldi	r22, 0xB4	; 180
     866:	7b e2       	ldi	r23, 0x2B	; 43
     868:	81 e1       	ldi	r24, 0x11	; 17
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 12 12 	call	0x2424	; 0x2424 <__divmodsi4>
	
	voltage = result;
     870:	ca 01       	movw	r24, r20
     872:	b9 01       	movw	r22, r18
     874:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <__floatsisf>
	voltage /= 1000;
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	4a e7       	ldi	r20, 0x7A	; 122
     87e:	54 e4       	ldi	r21, 0x44	; 68
     880:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divsf3>
	voltage += V_ADJUST;
     884:	2e ea       	ldi	r18, 0xAE	; 174
     886:	37 e4       	ldi	r19, 0x47	; 71
     888:	41 ee       	ldi	r20, 0xE1	; 225
     88a:	5d e3       	ldi	r21, 0x3D	; 61
     88c:	0e 94 0a 10 	call	0x2014	; 0x2014 <__subsf3>

	dtostrf(voltage, 2, 3, stringValue);
     890:	8e 01       	movw	r16, r28
     892:	0f 5f       	subi	r16, 0xFF	; 255
     894:	1f 4f       	sbci	r17, 0xFF	; 255
     896:	23 e0       	ldi	r18, 0x03	; 3
     898:	42 e0       	ldi	r20, 0x02	; 2
     89a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>
	printm(stringValue);				// print the voltage
     89e:	c8 01       	movw	r24, r16
     8a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	printm("V");				// suffix
     8a4:	86 e7       	ldi	r24, 0x76	; 118
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	//return voltage;
}
     8ac:	64 96       	adiw	r28, 0x14	; 20
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret

000008c2 <fiberDisplay>:

void fiberDisplay(float voltage[5], float voltageMax, int channelMax, float voltageAvg, float voltageMin, int channelMin)
{
     8c2:	4f 92       	push	r4
     8c4:	5f 92       	push	r5
     8c6:	6f 92       	push	r6
     8c8:	7f 92       	push	r7
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	64 97       	sbiw	r28, 0x14	; 20
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	8c 01       	movw	r16, r24
     8f0:	6a 01       	movw	r12, r20
     8f2:	7b 01       	movw	r14, r22
     8f4:	59 01       	movw	r10, r18
	float voltage_deg;
	char stringValue[20];

	printm("               ");
     8f6:	85 e3       	ldi	r24, 0x35	; 53
     8f8:	94 e0       	ldi	r25, 0x04	; 4
     8fa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	if(voltage[4] == -1.0)
     8fe:	f8 01       	movw	r30, r16
     900:	40 88       	ldd	r4, Z+16	; 0x10
     902:	51 88       	ldd	r5, Z+17	; 0x11
     904:	62 88       	ldd	r6, Z+18	; 0x12
     906:	73 88       	ldd	r7, Z+19	; 0x13
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e8       	ldi	r20, 0x80	; 128
     90e:	5f eb       	ldi	r21, 0xBF	; 191
     910:	c3 01       	movw	r24, r6
     912:	b2 01       	movw	r22, r4
     914:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     918:	81 11       	cpse	r24, r1
     91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0x27>
	printm("( - )");
     91c:	88 e7       	ldi	r24, 0x78	; 120
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     924:	3f c0       	rjmp	.+126    	; 0x9a4 <__stack+0xa5>
	else if(voltage[4] < 0.5 && voltage[4] >= 0.0)
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	5f e3       	ldi	r21, 0x3F	; 63
     92e:	c3 01       	movw	r24, r6
     930:	b2 01       	movw	r22, r4
     932:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     936:	88 23       	and	r24, r24
     938:	74 f4       	brge	.+28     	; 0x956 <__stack+0x57>
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	a9 01       	movw	r20, r18
     940:	c3 01       	movw	r24, r6
     942:	b2 01       	movw	r22, r4
     944:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     948:	88 23       	and	r24, r24
     94a:	2c f0       	brlt	.+10     	; 0x956 <__stack+0x57>
	printm("(   )");
     94c:	8e e7       	ldi	r24, 0x7E	; 126
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     954:	27 c0       	rjmp	.+78     	; 0x9a4 <__stack+0xa5>
	else if(voltage[4] >= 0.5 && voltage[4] < 2.0)
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	5f e3       	ldi	r21, 0x3F	; 63
     95e:	c3 01       	movw	r24, r6
     960:	b2 01       	movw	r22, r4
     962:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     966:	88 23       	and	r24, r24
     968:	7c f0       	brlt	.+30     	; 0x988 <__stack+0x89>
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e4       	ldi	r21, 0x40	; 64
     972:	c3 01       	movw	r24, r6
     974:	b2 01       	movw	r22, r4
     976:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     97a:	88 23       	and	r24, r24
     97c:	2c f4       	brge	.+10     	; 0x988 <__stack+0x89>
	printm("( * )");
     97e:	84 e8       	ldi	r24, 0x84	; 132
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     986:	0e c0       	rjmp	.+28     	; 0x9a4 <__stack+0xa5>
	else if(voltage[4] >= 2.0)
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e4       	ldi	r21, 0x40	; 64
     990:	c3 01       	movw	r24, r6
     992:	b2 01       	movw	r22, r4
     994:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     998:	88 23       	and	r24, r24
     99a:	24 f0       	brlt	.+8      	; 0x9a4 <__stack+0xa5>
	printm("( X )");
     99c:	8a e8       	ldi	r24, 0x8A	; 138
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	printm("   ");
     9a4:	81 e4       	ldi	r24, 0x41	; 65
     9a6:	94 e0       	ldi	r25, 0x04	; 4
     9a8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	if(voltage[5] == -1.0)
     9ac:	f8 01       	movw	r30, r16
     9ae:	44 88       	ldd	r4, Z+20	; 0x14
     9b0:	55 88       	ldd	r5, Z+21	; 0x15
     9b2:	66 88       	ldd	r6, Z+22	; 0x16
     9b4:	77 88       	ldd	r7, Z+23	; 0x17
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e8       	ldi	r20, 0x80	; 128
     9bc:	5f eb       	ldi	r21, 0xBF	; 191
     9be:	c3 01       	movw	r24, r6
     9c0:	b2 01       	movw	r22, r4
     9c2:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     9c6:	81 11       	cpse	r24, r1
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__stack+0xd5>
	printm("( - )");
     9ca:	88 e7       	ldi	r24, 0x78	; 120
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     9d2:	3f c0       	rjmp	.+126    	; 0xa52 <__stack+0x153>
	else if(voltage[5] < 0.5 && voltage[5] >= 0.0)
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	5f e3       	ldi	r21, 0x3F	; 63
     9dc:	c3 01       	movw	r24, r6
     9de:	b2 01       	movw	r22, r4
     9e0:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     9e4:	88 23       	and	r24, r24
     9e6:	74 f4       	brge	.+28     	; 0xa04 <__stack+0x105>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	a9 01       	movw	r20, r18
     9ee:	c3 01       	movw	r24, r6
     9f0:	b2 01       	movw	r22, r4
     9f2:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     9f6:	88 23       	and	r24, r24
     9f8:	2c f0       	brlt	.+10     	; 0xa04 <__stack+0x105>
	printm("(   )");
     9fa:	8e e7       	ldi	r24, 0x7E	; 126
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     a02:	27 c0       	rjmp	.+78     	; 0xa52 <__stack+0x153>
	else if(voltage[5] >= 0.5 && voltage[5] < 2.0)
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	5f e3       	ldi	r21, 0x3F	; 63
     a0c:	c3 01       	movw	r24, r6
     a0e:	b2 01       	movw	r22, r4
     a10:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     a14:	88 23       	and	r24, r24
     a16:	7c f0       	brlt	.+30     	; 0xa36 <__stack+0x137>
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	50 e4       	ldi	r21, 0x40	; 64
     a20:	c3 01       	movw	r24, r6
     a22:	b2 01       	movw	r22, r4
     a24:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     a28:	88 23       	and	r24, r24
     a2a:	2c f4       	brge	.+10     	; 0xa36 <__stack+0x137>
	printm("( * )");
     a2c:	84 e8       	ldi	r24, 0x84	; 132
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__stack+0x153>
	else if(voltage[5] >= 2.0)
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e4       	ldi	r21, 0x40	; 64
     a3e:	c3 01       	movw	r24, r6
     a40:	b2 01       	movw	r22, r4
     a42:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     a46:	88 23       	and	r24, r24
     a48:	24 f0       	brlt	.+8      	; 0xa52 <__stack+0x153>
	printm("( X )");
     a4a:	8a e8       	ldi	r24, 0x8A	; 138
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br(); br();
     a52:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
     a56:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("           ");
     a5a:	89 e3       	ldi	r24, 0x39	; 57
     a5c:	94 e0       	ldi	r25, 0x04	; 4
     a5e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	if(voltage[3] == -1.0)
     a62:	f8 01       	movw	r30, r16
     a64:	44 84       	ldd	r4, Z+12	; 0x0c
     a66:	55 84       	ldd	r5, Z+13	; 0x0d
     a68:	66 84       	ldd	r6, Z+14	; 0x0e
     a6a:	77 84       	ldd	r7, Z+15	; 0x0f
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e8       	ldi	r20, 0x80	; 128
     a72:	5f eb       	ldi	r21, 0xBF	; 191
     a74:	c3 01       	movw	r24, r6
     a76:	b2 01       	movw	r22, r4
     a78:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     a7c:	81 11       	cpse	r24, r1
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <__stack+0x18b>
	printm("( - )");
     a80:	88 e7       	ldi	r24, 0x78	; 120
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     a88:	3f c0       	rjmp	.+126    	; 0xb08 <__stack+0x209>
	else if(voltage[3] < 0.5 && voltage[3] >= 0.0)
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	c3 01       	movw	r24, r6
     a94:	b2 01       	movw	r22, r4
     a96:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     a9a:	88 23       	and	r24, r24
     a9c:	74 f4       	brge	.+28     	; 0xaba <__stack+0x1bb>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	a9 01       	movw	r20, r18
     aa4:	c3 01       	movw	r24, r6
     aa6:	b2 01       	movw	r22, r4
     aa8:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     aac:	88 23       	and	r24, r24
     aae:	2c f0       	brlt	.+10     	; 0xaba <__stack+0x1bb>
	printm("(   )");
     ab0:	8e e7       	ldi	r24, 0x7E	; 126
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     ab8:	27 c0       	rjmp	.+78     	; 0xb08 <__stack+0x209>
	else if(voltage[3] >= 0.5 && voltage[3] < 2.0)
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	5f e3       	ldi	r21, 0x3F	; 63
     ac2:	c3 01       	movw	r24, r6
     ac4:	b2 01       	movw	r22, r4
     ac6:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     aca:	88 23       	and	r24, r24
     acc:	7c f0       	brlt	.+30     	; 0xaec <__stack+0x1ed>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e4       	ldi	r21, 0x40	; 64
     ad6:	c3 01       	movw	r24, r6
     ad8:	b2 01       	movw	r22, r4
     ada:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     ade:	88 23       	and	r24, r24
     ae0:	2c f4       	brge	.+10     	; 0xaec <__stack+0x1ed>
	printm("( * )");
     ae2:	84 e8       	ldi	r24, 0x84	; 132
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     aea:	0e c0       	rjmp	.+28     	; 0xb08 <__stack+0x209>
	else if(voltage[3] >= 2.0)
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	50 e4       	ldi	r21, 0x40	; 64
     af4:	c3 01       	movw	r24, r6
     af6:	b2 01       	movw	r22, r4
     af8:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     afc:	88 23       	and	r24, r24
     afe:	24 f0       	brlt	.+8      	; 0xb08 <__stack+0x209>
	printm("( X )");
     b00:	8a e8       	ldi	r24, 0x8A	; 138
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	printm("   ( L )   ");
     b08:	80 e9       	ldi	r24, 0x90	; 144
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	if(voltage[0] == -1.0)
     b10:	f8 01       	movw	r30, r16
     b12:	40 80       	ld	r4, Z
     b14:	51 80       	ldd	r5, Z+1	; 0x01
     b16:	62 80       	ldd	r6, Z+2	; 0x02
     b18:	73 80       	ldd	r7, Z+3	; 0x03
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e8       	ldi	r20, 0x80	; 128
     b20:	5f eb       	ldi	r21, 0xBF	; 191
     b22:	c3 01       	movw	r24, r6
     b24:	b2 01       	movw	r22, r4
     b26:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     b2a:	81 11       	cpse	r24, r1
     b2c:	05 c0       	rjmp	.+10     	; 0xb38 <__stack+0x239>
	printm("( - )");
     b2e:	88 e7       	ldi	r24, 0x78	; 120
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     b36:	3f c0       	rjmp	.+126    	; 0xbb6 <__stack+0x2b7>
	else if(voltage[0] < 0.5 && voltage[0] >= 0.0)
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	5f e3       	ldi	r21, 0x3F	; 63
     b40:	c3 01       	movw	r24, r6
     b42:	b2 01       	movw	r22, r4
     b44:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     b48:	88 23       	and	r24, r24
     b4a:	74 f4       	brge	.+28     	; 0xb68 <__stack+0x269>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	a9 01       	movw	r20, r18
     b52:	c3 01       	movw	r24, r6
     b54:	b2 01       	movw	r22, r4
     b56:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     b5a:	88 23       	and	r24, r24
     b5c:	2c f0       	brlt	.+10     	; 0xb68 <__stack+0x269>
	printm("(   )");
     b5e:	8e e7       	ldi	r24, 0x7E	; 126
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     b66:	27 c0       	rjmp	.+78     	; 0xbb6 <__stack+0x2b7>
	else if(voltage[0] >= 0.5 && voltage[0] < 2.0)
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	5f e3       	ldi	r21, 0x3F	; 63
     b70:	c3 01       	movw	r24, r6
     b72:	b2 01       	movw	r22, r4
     b74:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     b78:	88 23       	and	r24, r24
     b7a:	7c f0       	brlt	.+30     	; 0xb9a <__stack+0x29b>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e4       	ldi	r21, 0x40	; 64
     b84:	c3 01       	movw	r24, r6
     b86:	b2 01       	movw	r22, r4
     b88:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     b8c:	88 23       	and	r24, r24
     b8e:	2c f4       	brge	.+10     	; 0xb9a <__stack+0x29b>
	printm("( * )");
     b90:	84 e8       	ldi	r24, 0x84	; 132
     b92:	91 e0       	ldi	r25, 0x01	; 1
     b94:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     b98:	0e c0       	rjmp	.+28     	; 0xbb6 <__stack+0x2b7>
	else if(voltage[0] >= 2.0)
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	50 e4       	ldi	r21, 0x40	; 64
     ba2:	c3 01       	movw	r24, r6
     ba4:	b2 01       	movw	r22, r4
     ba6:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     baa:	88 23       	and	r24, r24
     bac:	24 f0       	brlt	.+8      	; 0xbb6 <__stack+0x2b7>
	printm("( X )");
     bae:	8a e8       	ldi	r24, 0x8A	; 138
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br(); br();
     bb6:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
     bba:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("               ");
     bbe:	85 e3       	ldi	r24, 0x35	; 53
     bc0:	94 e0       	ldi	r25, 0x04	; 4
     bc2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	if(voltage[2] == -1.0)
     bc6:	f8 01       	movw	r30, r16
     bc8:	40 84       	ldd	r4, Z+8	; 0x08
     bca:	51 84       	ldd	r5, Z+9	; 0x09
     bcc:	62 84       	ldd	r6, Z+10	; 0x0a
     bce:	73 84       	ldd	r7, Z+11	; 0x0b
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e8       	ldi	r20, 0x80	; 128
     bd6:	5f eb       	ldi	r21, 0xBF	; 191
     bd8:	c3 01       	movw	r24, r6
     bda:	b2 01       	movw	r22, r4
     bdc:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     be0:	81 11       	cpse	r24, r1
     be2:	05 c0       	rjmp	.+10     	; 0xbee <__stack+0x2ef>
	printm("( - )");
     be4:	88 e7       	ldi	r24, 0x78	; 120
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     bec:	3f c0       	rjmp	.+126    	; 0xc6c <__stack+0x36d>
	else if(voltage[2] < 0.5 && voltage[2] >= 0.0)
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	5f e3       	ldi	r21, 0x3F	; 63
     bf6:	c3 01       	movw	r24, r6
     bf8:	b2 01       	movw	r22, r4
     bfa:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     bfe:	88 23       	and	r24, r24
     c00:	74 f4       	brge	.+28     	; 0xc1e <__stack+0x31f>
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	a9 01       	movw	r20, r18
     c08:	c3 01       	movw	r24, r6
     c0a:	b2 01       	movw	r22, r4
     c0c:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     c10:	88 23       	and	r24, r24
     c12:	2c f0       	brlt	.+10     	; 0xc1e <__stack+0x31f>
	printm("(   )");
     c14:	8e e7       	ldi	r24, 0x7E	; 126
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     c1c:	27 c0       	rjmp	.+78     	; 0xc6c <__stack+0x36d>
	else if(voltage[2] >= 0.5 && voltage[2] < 2.0)
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	5f e3       	ldi	r21, 0x3F	; 63
     c26:	c3 01       	movw	r24, r6
     c28:	b2 01       	movw	r22, r4
     c2a:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     c2e:	88 23       	and	r24, r24
     c30:	7c f0       	brlt	.+30     	; 0xc50 <__stack+0x351>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e4       	ldi	r21, 0x40	; 64
     c3a:	c3 01       	movw	r24, r6
     c3c:	b2 01       	movw	r22, r4
     c3e:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     c42:	88 23       	and	r24, r24
     c44:	2c f4       	brge	.+10     	; 0xc50 <__stack+0x351>
	printm("( * )");
     c46:	84 e8       	ldi	r24, 0x84	; 132
     c48:	91 e0       	ldi	r25, 0x01	; 1
     c4a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     c4e:	0e c0       	rjmp	.+28     	; 0xc6c <__stack+0x36d>
	else if(voltage[2] >= 2.0)
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	50 e4       	ldi	r21, 0x40	; 64
     c58:	c3 01       	movw	r24, r6
     c5a:	b2 01       	movw	r22, r4
     c5c:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     c60:	88 23       	and	r24, r24
     c62:	24 f0       	brlt	.+8      	; 0xc6c <__stack+0x36d>
	printm("( X )");
     c64:	8a e8       	ldi	r24, 0x8A	; 138
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	printm("   ");
     c6c:	81 e4       	ldi	r24, 0x41	; 65
     c6e:	94 e0       	ldi	r25, 0x04	; 4
     c70:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	if(voltage[1] == -1.0)
     c74:	f8 01       	movw	r30, r16
     c76:	44 80       	ldd	r4, Z+4	; 0x04
     c78:	55 80       	ldd	r5, Z+5	; 0x05
     c7a:	66 80       	ldd	r6, Z+6	; 0x06
     c7c:	77 80       	ldd	r7, Z+7	; 0x07
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e8       	ldi	r20, 0x80	; 128
     c84:	5f eb       	ldi	r21, 0xBF	; 191
     c86:	c3 01       	movw	r24, r6
     c88:	b2 01       	movw	r22, r4
     c8a:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     c8e:	81 11       	cpse	r24, r1
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <__stack+0x39d>
	printm("( - )");
     c92:	88 e7       	ldi	r24, 0x78	; 120
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     c9a:	3f c0       	rjmp	.+126    	; 0xd1a <__stack+0x41b>
	else if(voltage[1] < 0.5 && voltage[1] >= 0.0)
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	5f e3       	ldi	r21, 0x3F	; 63
     ca4:	c3 01       	movw	r24, r6
     ca6:	b2 01       	movw	r22, r4
     ca8:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     cac:	88 23       	and	r24, r24
     cae:	74 f4       	brge	.+28     	; 0xccc <__stack+0x3cd>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	a9 01       	movw	r20, r18
     cb6:	c3 01       	movw	r24, r6
     cb8:	b2 01       	movw	r22, r4
     cba:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     cbe:	88 23       	and	r24, r24
     cc0:	2c f0       	brlt	.+10     	; 0xccc <__stack+0x3cd>
	printm("(   )");
     cc2:	8e e7       	ldi	r24, 0x7E	; 126
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     cca:	27 c0       	rjmp	.+78     	; 0xd1a <__stack+0x41b>
	else if(voltage[1] >= 0.5 && voltage[1] < 2.0)
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	5f e3       	ldi	r21, 0x3F	; 63
     cd4:	c3 01       	movw	r24, r6
     cd6:	b2 01       	movw	r22, r4
     cd8:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     cdc:	88 23       	and	r24, r24
     cde:	7c f0       	brlt	.+30     	; 0xcfe <__stack+0x3ff>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e4       	ldi	r21, 0x40	; 64
     ce8:	c3 01       	movw	r24, r6
     cea:	b2 01       	movw	r22, r4
     cec:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     cf0:	88 23       	and	r24, r24
     cf2:	2c f4       	brge	.+10     	; 0xcfe <__stack+0x3ff>
	printm("( * )");
     cf4:	84 e8       	ldi	r24, 0x84	; 132
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
     cfc:	0e c0       	rjmp	.+28     	; 0xd1a <__stack+0x41b>
	else if(voltage[1] >= 2.0)
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e4       	ldi	r21, 0x40	; 64
     d06:	c3 01       	movw	r24, r6
     d08:	b2 01       	movw	r22, r4
     d0a:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     d0e:	88 23       	and	r24, r24
     d10:	24 f0       	brlt	.+8      	; 0xd1a <__stack+0x41b>
	printm("( X )");
     d12:	8a e8       	ldi	r24, 0x8A	; 138
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br(); br();
     d1a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
     d1e:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("ANGLE-OF-ATTACK: ");
     d22:	8c e9       	ldi	r24, 0x9C	; 156
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	voltage_deg = (voltageMax / VOLT_PER_DEGREE);
     d2a:	2d ec       	ldi	r18, 0xCD	; 205
     d2c:	3c ec       	ldi	r19, 0xCC	; 204
     d2e:	4c e4       	ldi	r20, 0x4C	; 76
     d30:	5d e3       	ldi	r21, 0x3D	; 61
     d32:	c7 01       	movw	r24, r14
     d34:	b6 01       	movw	r22, r12
     d36:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divsf3>
     d3a:	2b 01       	movw	r4, r22
     d3c:	3c 01       	movw	r6, r24

	if(voltage_deg >= 60.0)
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e7       	ldi	r20, 0x70	; 112
     d44:	52 e4       	ldi	r21, 0x42	; 66
     d46:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     d4a:	88 23       	and	r24, r24
     d4c:	44 f0       	brlt	.+16     	; 0xd5e <__stack+0x45f>
		voltage_deg = 60;
     d4e:	0f 2e       	mov	r0, r31
     d50:	41 2c       	mov	r4, r1
     d52:	51 2c       	mov	r5, r1
     d54:	f0 e7       	ldi	r31, 0x70	; 112
     d56:	6f 2e       	mov	r6, r31
     d58:	f2 e4       	ldi	r31, 0x42	; 66
     d5a:	7f 2e       	mov	r7, r31
     d5c:	f0 2d       	mov	r31, r0
	
	dtostrf(voltage_deg, 2, 1, stringValue);
     d5e:	8e 01       	movw	r16, r28
     d60:	0f 5f       	subi	r16, 0xFF	; 255
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	42 e0       	ldi	r20, 0x02	; 2
     d68:	c3 01       	movw	r24, r6
     d6a:	b2 01       	movw	r22, r4
     d6c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>
	printm(stringValue);				// print the voltage
     d70:	c8 01       	movw	r24, r16
     d72:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	printc(176);
     d76:	80 eb       	ldi	r24, 0xB0	; 176
     d78:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printm(" at max voltage");				// suffix
     d7c:	8e ea       	ldi	r24, 0xAE	; 174
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	if(voltageMax <= 0.2)
     d84:	2d ec       	ldi	r18, 0xCD	; 205
     d86:	3c ec       	ldi	r19, 0xCC	; 204
     d88:	4c e4       	ldi	r20, 0x4C	; 76
     d8a:	5e e3       	ldi	r21, 0x3E	; 62
     d8c:	c7 01       	movw	r24, r14
     d8e:	b6 01       	movw	r22, r12
     d90:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     d94:	18 16       	cp	r1, r24
     d96:	2c f0       	brlt	.+10     	; 0xda2 <__stack+0x4a3>
		intensity = SIGNAL_NA;
     d98:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <intensity+0x1>
     d9c:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <intensity>
     da0:	46 c0       	rjmp	.+140    	; 0xe2e <__stack+0x52f>
	else if(voltageMax > 0.200 && voltageMax <= 0.5)
     da2:	2d ec       	ldi	r18, 0xCD	; 205
     da4:	3c ec       	ldi	r19, 0xCC	; 204
     da6:	4c e4       	ldi	r20, 0x4C	; 76
     da8:	5e e3       	ldi	r21, 0x3E	; 62
     daa:	c7 01       	movw	r24, r14
     dac:	b6 01       	movw	r22, r12
     dae:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     db2:	18 16       	cp	r1, r24
     db4:	8c f4       	brge	.+34     	; 0xdd8 <__stack+0x4d9>
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	5f e3       	ldi	r21, 0x3F	; 63
     dbe:	c7 01       	movw	r24, r14
     dc0:	b6 01       	movw	r22, r12
     dc2:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	3c f0       	brlt	.+14     	; 0xdd8 <__stack+0x4d9>
		intensity = SIGNAL_L;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <intensity+0x1>
     dd2:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <intensity>
     dd6:	2b c0       	rjmp	.+86     	; 0xe2e <__stack+0x52f>
	else if(voltageMax > 0.5 && voltageMax <= 2.0)
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	5f e3       	ldi	r21, 0x3F	; 63
     de0:	c7 01       	movw	r24, r14
     de2:	b6 01       	movw	r22, r12
     de4:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     de8:	18 16       	cp	r1, r24
     dea:	8c f4       	brge	.+34     	; 0xe0e <__stack+0x50f>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	50 e4       	ldi	r21, 0x40	; 64
     df4:	c7 01       	movw	r24, r14
     df6:	b6 01       	movw	r22, r12
     df8:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	3c f0       	brlt	.+14     	; 0xe0e <__stack+0x50f>
		intensity = SIGNAL_M;
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <intensity+0x1>
     e08:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <intensity>
     e0c:	10 c0       	rjmp	.+32     	; 0xe2e <__stack+0x52f>
	else if(voltageMax > 2.0)
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e4       	ldi	r21, 0x40	; 64
     e16:	c7 01       	movw	r24, r14
     e18:	b6 01       	movw	r22, r12
     e1a:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
     e1e:	18 16       	cp	r1, r24
     e20:	34 f4       	brge	.+12     	; 0xe2e <__stack+0x52f>
		intensity = SIGNAL_H;
     e22:	83 e0       	ldi	r24, 0x03	; 3
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <intensity+0x1>
     e2a:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <intensity>

	if(channelMax == 0)
     e2e:	a1 14       	cp	r10, r1
     e30:	b1 04       	cpc	r11, r1
     e32:	39 f4       	brne	.+14     	; 0xe42 <__stack+0x543>
		direction = EAST;
     e34:	84 e1       	ldi	r24, 0x14	; 20
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <direction+0x1>
     e3c:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <direction>
     e40:	36 c0       	rjmp	.+108    	; 0xeae <__stack+0x5af>
	else if(channelMax == 1)
     e42:	f1 e0       	ldi	r31, 0x01	; 1
     e44:	af 16       	cp	r10, r31
     e46:	b1 04       	cpc	r11, r1
     e48:	39 f4       	brne	.+14     	; 0xe58 <__stack+0x559>
		direction = SOUTHEAST;
     e4a:	86 e1       	ldi	r24, 0x16	; 22
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <direction+0x1>
     e52:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <direction>
     e56:	2b c0       	rjmp	.+86     	; 0xeae <__stack+0x5af>
	else if(channelMax == 2)
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	a8 16       	cp	r10, r24
     e5c:	b1 04       	cpc	r11, r1
     e5e:	39 f4       	brne	.+14     	; 0xe6e <__stack+0x56f>
		direction = SOUTHWEST;
     e60:	81 e2       	ldi	r24, 0x21	; 33
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <direction+0x1>
     e68:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <direction>
     e6c:	20 c0       	rjmp	.+64     	; 0xeae <__stack+0x5af>
	else if(channelMax == 3)
     e6e:	e3 e0       	ldi	r30, 0x03	; 3
     e70:	ae 16       	cp	r10, r30
     e72:	b1 04       	cpc	r11, r1
     e74:	39 f4       	brne	.+14     	; 0xe84 <__stack+0x585>
		direction = WEST;
     e76:	88 e2       	ldi	r24, 0x28	; 40
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <direction+0x1>
     e7e:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <direction>
     e82:	15 c0       	rjmp	.+42     	; 0xeae <__stack+0x5af>
	else if(channelMax == 4)
     e84:	f4 e0       	ldi	r31, 0x04	; 4
     e86:	af 16       	cp	r10, r31
     e88:	b1 04       	cpc	r11, r1
     e8a:	39 f4       	brne	.+14     	; 0xe9a <__stack+0x59b>
		direction = NORTHWEST;
     e8c:	8c e2       	ldi	r24, 0x2C	; 44
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <direction+0x1>
     e94:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <direction>
     e98:	0a c0       	rjmp	.+20     	; 0xeae <__stack+0x5af>
	else if(channelMax == 5)
     e9a:	85 e0       	ldi	r24, 0x05	; 5
     e9c:	a8 16       	cp	r10, r24
     e9e:	b1 04       	cpc	r11, r1
     ea0:	31 f4       	brne	.+12     	; 0xeae <__stack+0x5af>
		direction = NORTHEAST;
     ea2:	8b e0       	ldi	r24, 0x0B	; 11
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <direction+0x1>
     eaa:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <direction>
	{
		direction = NORTHEAST;
	}
	*/

	br(); br();
     eae:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
     eb2:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("SIGNAL DIRECTION: ");
     eb6:	8e eb       	ldi	r24, 0xBE	; 190
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	switch (direction)
     ebe:	e0 91 4c 07 	lds	r30, 0x074C	; 0x80074c <direction>
     ec2:	f0 91 4d 07 	lds	r31, 0x074D	; 0x80074d <direction+0x1>
     ec6:	3a 97       	sbiw	r30, 0x0a	; 10
     ec8:	e3 32       	cpi	r30, 0x23	; 35
     eca:	f1 05       	cpc	r31, r1
     ecc:	60 f5       	brcc	.+88     	; 0xf26 <__stack+0x627>
     ece:	e0 58       	subi	r30, 0x80	; 128
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__tablejump2__>
	{
		case NORTH:
		printm("NORTH");
     ed6:	81 ed       	ldi	r24, 0xD1	; 209
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     ede:	27 c0       	rjmp	.+78     	; 0xf2e <__stack+0x62f>
		
		case NORTHEAST:
		printm("NORTHEAST");
     ee0:	87 ed       	ldi	r24, 0xD7	; 215
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     ee8:	22 c0       	rjmp	.+68     	; 0xf2e <__stack+0x62f>

		case EAST:
		printm("EAST");
     eea:	8c ed       	ldi	r24, 0xDC	; 220
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     ef2:	1d c0       	rjmp	.+58     	; 0xf2e <__stack+0x62f>

		case SOUTHEAST:
		printm("SOUTHEAST");
     ef4:	81 ee       	ldi	r24, 0xE1	; 225
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     efc:	18 c0       	rjmp	.+48     	; 0xf2e <__stack+0x62f>

		case SOUTH:
		printm("SOUTH");
     efe:	8b ee       	ldi	r24, 0xEB	; 235
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     f06:	13 c0       	rjmp	.+38     	; 0xf2e <__stack+0x62f>

		case SOUTHWEST:
		printm("SOUTHWEST");
     f08:	81 ef       	ldi	r24, 0xF1	; 241
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     f10:	0e c0       	rjmp	.+28     	; 0xf2e <__stack+0x62f>

		case WEST:
		printm("WEST");
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     f1a:	09 c0       	rjmp	.+18     	; 0xf2e <__stack+0x62f>

		case NORTHWEST:
		printm("NORTHWEST");
     f1c:	8b ef       	ldi	r24, 0xFB	; 251
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     f24:	04 c0       	rjmp	.+8      	; 0xf2e <__stack+0x62f>

		default:
		printm("INDETERMINANT");
     f26:	85 e0       	ldi	r24, 0x05	; 5
     f28:	92 e0       	ldi	r25, 0x02	; 2
     f2a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
	}

	printm("; ");
     f2e:	83 e1       	ldi	r24, 0x13	; 19
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	switch (intensity)
     f36:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <intensity>
     f3a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <intensity+0x1>
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	91 05       	cpc	r25, r1
     f42:	51 f0       	breq	.+20     	; 0xf58 <__stack+0x659>
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	91 05       	cpc	r25, r1
     f48:	61 f0       	breq	.+24     	; 0xf62 <__stack+0x663>
     f4a:	01 97       	sbiw	r24, 0x01	; 1
     f4c:	79 f4       	brne	.+30     	; 0xf6c <__stack+0x66d>
	{
		case SIGNAL_L:
		printm("LIGHT");
     f4e:	86 e1       	ldi	r24, 0x16	; 22
     f50:	92 e0       	ldi	r25, 0x02	; 2
     f52:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     f56:	0e c0       	rjmp	.+28     	; 0xf74 <__stack+0x675>

		case SIGNAL_M:
		printm("MODERATE");
     f58:	8c e1       	ldi	r24, 0x1C	; 28
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <__stack+0x675>

		case SIGNAL_H:
		printm("HEAVY");
     f62:	85 e2       	ldi	r24, 0x25	; 37
     f64:	92 e0       	ldi	r25, 0x02	; 2
     f66:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
     f6a:	04 c0       	rjmp	.+8      	; 0xf74 <__stack+0x675>

		default:
		printm("N/A");
     f6c:	8b e2       	ldi	r24, 0x2B	; 43
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
		break;
	}

     f74:	64 96       	adiw	r28, 0x14	; 20
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	de bf       	out	0x3e, r29	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	bf 90       	pop	r11
     f92:	af 90       	pop	r10
     f94:	7f 90       	pop	r7
     f96:	6f 90       	pop	r6
     f98:	5f 90       	pop	r5
     f9a:	4f 90       	pop	r4
     f9c:	08 95       	ret

00000f9e <main>:
// END ====================================

// ========================================
// MAIN DRIVER
int main( void )
{
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	2e 97       	sbiw	r28, 0x0e	; 14
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61

	// clock prescaler 256 --> 8MHz / 256 = 31250 = 31.25 KHz
	CLKPR = (1 << CLKPCE) | (1 << CLKPS3); 
     fb2:	88 e8       	ldi	r24, 0x88	; 136
     fb4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>

	cli();					// disable global interrupts
     fb8:	f8 94       	cli
     fba:	2f ef       	ldi	r18, 0xFF	; 255
     fbc:	86 e1       	ldi	r24, 0x16	; 22
     fbe:	91 e1       	ldi	r25, 0x11	; 17
     fc0:	21 50       	subi	r18, 0x01	; 1
     fc2:	80 40       	sbci	r24, 0x00	; 0
     fc4:	90 40       	sbci	r25, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <main+0x22>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <main+0x2c>
     fca:	00 00       	nop

	_delay_ms(700);			

	screenClr();			// clear terminal screen
     fcc:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>

	br(); br();				
     fd0:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
     fd4:	0e 94 ad 01 	call	0x35a	; 0x35a <br>

	UART_init(ONE, TRUE);	// initialize UART 
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	0e 94 cf 01 	call	0x39e	; 0x39e <UART_init>
     fe0:	af ef       	ldi	r26, 0xFF	; 255
     fe2:	b6 e1       	ldi	r27, 0x16	; 22
     fe4:	e1 e1       	ldi	r30, 0x11	; 17
     fe6:	a1 50       	subi	r26, 0x01	; 1
     fe8:	b0 40       	sbci	r27, 0x00	; 0
     fea:	e0 40       	sbci	r30, 0x00	; 0
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <main+0x48>
     fee:	00 c0       	rjmp	.+0      	; 0xff0 <main+0x52>
     ff0:	00 00       	nop

	_delay_ms(700);			

	br(); br();
     ff2:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
     ff6:	0e 94 ad 01 	call	0x35a	; 0x35a <br>

	ADC_init();				// initialize ADC
     ffa:	0e 94 1c 03 	call	0x638	; 0x638 <ADC_init>
     ffe:	ff ef       	ldi	r31, 0xFF	; 255
    1000:	24 e3       	ldi	r18, 0x34	; 52
    1002:	8c e0       	ldi	r24, 0x0C	; 12
    1004:	f1 50       	subi	r31, 0x01	; 1
    1006:	20 40       	sbci	r18, 0x00	; 0
    1008:	80 40       	sbci	r24, 0x00	; 0
    100a:	e1 f7       	brne	.-8      	; 0x1004 <main+0x66>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <main+0x70>
    100e:	00 00       	nop

	_delay_ms(500);	

	header();				// UNLV project header
    1010:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
    1014:	9f ef       	ldi	r25, 0xFF	; 255
    1016:	a1 ee       	ldi	r26, 0xE1	; 225
    1018:	b4 e0       	ldi	r27, 0x04	; 4
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	a0 40       	sbci	r26, 0x00	; 0
    101e:	b0 40       	sbci	r27, 0x00	; 0
    1020:	e1 f7       	brne	.-8      	; 0x101a <main+0x7c>
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <main+0x86>
    1024:	00 00       	nop

	_delay_ms(200);

	// start message before main screen
	printm("Starting");
    1026:	8f e2       	ldi	r24, 0x2F	; 47
    1028:	92 e0       	ldi	r25, 0x02	; 2
    102a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    102e:	ef ef       	ldi	r30, 0xFF	; 255
    1030:	f6 e7       	ldi	r31, 0x76	; 118
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	e1 50       	subi	r30, 0x01	; 1
    1036:	f0 40       	sbci	r31, 0x00	; 0
    1038:	20 40       	sbci	r18, 0x00	; 0
    103a:	e1 f7       	brne	.-8      	; 0x1034 <main+0x96>
    103c:	00 c0       	rjmp	.+0      	; 0x103e <main+0xa0>
    103e:	00 00       	nop
	_delay_ms(60);
	printc('.');
    1040:	8e e2       	ldi	r24, 0x2E	; 46
    1042:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	93 ef       	ldi	r25, 0xF3	; 243
    104a:	a1 e0       	ldi	r26, 0x01	; 1
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	90 40       	sbci	r25, 0x00	; 0
    1050:	a0 40       	sbci	r26, 0x00	; 0
    1052:	e1 f7       	brne	.-8      	; 0x104c <main+0xae>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <main+0xb8>
    1056:	00 00       	nop
	_delay_ms(80);
	printc('.');
    1058:	8e e2       	ldi	r24, 0x2E	; 46
    105a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
    105e:	bf ef       	ldi	r27, 0xFF	; 255
    1060:	e0 e7       	ldi	r30, 0x70	; 112
    1062:	f2 e0       	ldi	r31, 0x02	; 2
    1064:	b1 50       	subi	r27, 0x01	; 1
    1066:	e0 40       	sbci	r30, 0x00	; 0
    1068:	f0 40       	sbci	r31, 0x00	; 0
    106a:	e1 f7       	brne	.-8      	; 0x1064 <main+0xc6>
    106c:	00 c0       	rjmp	.+0      	; 0x106e <main+0xd0>
    106e:	00 00       	nop
	_delay_ms(100);
	printc('.');
    1070:	8e e2       	ldi	r24, 0x2E	; 46
    1072:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
    1076:	2f ef       	ldi	r18, 0xFF	; 255
    1078:	84 e3       	ldi	r24, 0x34	; 52
    107a:	9c e0       	ldi	r25, 0x0C	; 12
    107c:	21 50       	subi	r18, 0x01	; 1
    107e:	80 40       	sbci	r24, 0x00	; 0
    1080:	90 40       	sbci	r25, 0x00	; 0
    1082:	e1 f7       	brne	.-8      	; 0x107c <main+0xde>
    1084:	00 c0       	rjmp	.+0      	; 0x1086 <main+0xe8>
    1086:	00 00       	nop
		else if(op_mode == 1)
		{

			_delay_ms(2);

			voltage[0] = ADC_conv(0, FALSE);			// ADC0 calc, return voltage - don't print
    1088:	0f 2e       	mov	r0, r31
    108a:	f3 ed       	ldi	r31, 0xD3	; 211
    108c:	4f 2e       	mov	r4, r31
    108e:	f7 e0       	ldi	r31, 0x07	; 7
    1090:	5f 2e       	mov	r5, r31
    1092:	f0 2d       	mov	r31, r0
    1094:	0f 2e       	mov	r0, r31
    1096:	f0 e3       	ldi	r31, 0x30	; 48
    1098:	6f 2e       	mov	r6, r31
    109a:	f1 e0       	ldi	r31, 0x01	; 1
    109c:	7f 2e       	mov	r7, r31
    109e:	f0 2d       	mov	r31, r0
	{

		// ----------------------------------------
		// DEFAUlT INFO TABLE
		// - - - - -
		if(op_mode == 0)
    10a0:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <op_mode>
    10a4:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <op_mode+0x1>
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	09 f0       	breq	.+2      	; 0x10ae <main+0x110>
    10ac:	04 c3       	rjmp	.+1544   	; 0x16b6 <main+0x718>
		{
			screenClr();	// clear terminal screen
    10ae:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
			
			header();		// UNLV project header
    10b2:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>

			voltage[0] = ADC_conv(0, FALSE);			// ADC0 calc, return voltage - don't print
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    10c2:	d2 01       	movw	r26, r4
    10c4:	6d 93       	st	X+, r22
    10c6:	7d 93       	st	X+, r23
    10c8:	8d 93       	st	X+, r24
    10ca:	9c 93       	st	X, r25
    10cc:	13 97       	sbiw	r26, 0x03	; 3
			dtostrf(voltage[0], 4, 3, voltageStr[0]);	// float to char conversion
    10ce:	02 e5       	ldi	r16, 0x52	; 82
    10d0:	17 e0       	ldi	r17, 0x07	; 7
    10d2:	23 e0       	ldi	r18, 0x03	; 3
    10d4:	44 e0       	ldi	r20, 0x04	; 4
    10d6:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[1] = ADC_conv(1, FALSE);			// ADC1 calc, return voltage - don't print
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    10e6:	f2 01       	movw	r30, r4
    10e8:	64 83       	std	Z+4, r22	; 0x04
    10ea:	75 83       	std	Z+5, r23	; 0x05
    10ec:	86 83       	std	Z+6, r24	; 0x06
    10ee:	97 83       	std	Z+7, r25	; 0x07
			dtostrf(voltage[1], 4, 3, voltageStr[1]);	// float to char conversion
    10f0:	06 e6       	ldi	r16, 0x66	; 102
    10f2:	17 e0       	ldi	r17, 0x07	; 7
    10f4:	23 e0       	ldi	r18, 0x03	; 3
    10f6:	44 e0       	ldi	r20, 0x04	; 4
    10f8:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[2] = ADC_conv(2, FALSE);			// ADC2 calc, return voltage - don't print
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    1108:	d2 01       	movw	r26, r4
    110a:	18 96       	adiw	r26, 0x08	; 8
    110c:	6d 93       	st	X+, r22
    110e:	7d 93       	st	X+, r23
    1110:	8d 93       	st	X+, r24
    1112:	9c 93       	st	X, r25
    1114:	1b 97       	sbiw	r26, 0x0b	; 11
			dtostrf(voltage[2], 4, 3, voltageStr[2]);	// float to char conversion
    1116:	0a e7       	ldi	r16, 0x7A	; 122
    1118:	17 e0       	ldi	r17, 0x07	; 7
    111a:	23 e0       	ldi	r18, 0x03	; 3
    111c:	44 e0       	ldi	r20, 0x04	; 4
    111e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[3] = ADC_conv(3, FALSE);			// ADC3 calc, return voltage - don't print
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	83 e0       	ldi	r24, 0x03	; 3
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    112e:	f2 01       	movw	r30, r4
    1130:	64 87       	std	Z+12, r22	; 0x0c
    1132:	75 87       	std	Z+13, r23	; 0x0d
    1134:	86 87       	std	Z+14, r24	; 0x0e
    1136:	97 87       	std	Z+15, r25	; 0x0f
			dtostrf(voltage[3], 4, 3, voltageStr[3]);	// float to char conversion
    1138:	0e e8       	ldi	r16, 0x8E	; 142
    113a:	17 e0       	ldi	r17, 0x07	; 7
    113c:	23 e0       	ldi	r18, 0x03	; 3
    113e:	44 e0       	ldi	r20, 0x04	; 4
    1140:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[4] = ADC_conv(4, FALSE);			// ADC4 calc, return voltage - don't print
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	84 e0       	ldi	r24, 0x04	; 4
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    1150:	d2 01       	movw	r26, r4
    1152:	50 96       	adiw	r26, 0x10	; 16
    1154:	6d 93       	st	X+, r22
    1156:	7d 93       	st	X+, r23
    1158:	8d 93       	st	X+, r24
    115a:	9c 93       	st	X, r25
    115c:	53 97       	sbiw	r26, 0x13	; 19
			dtostrf(voltage[4], 4, 3, voltageStr[4]);	// float to char conversion
    115e:	02 ea       	ldi	r16, 0xA2	; 162
    1160:	17 e0       	ldi	r17, 0x07	; 7
    1162:	23 e0       	ldi	r18, 0x03	; 3
    1164:	44 e0       	ldi	r20, 0x04	; 4
    1166:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[5] = ADC_conv(5, FALSE);			// ADC5 calc, return voltage - don't print
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	85 e0       	ldi	r24, 0x05	; 5
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    1176:	f2 01       	movw	r30, r4
    1178:	64 8b       	std	Z+20, r22	; 0x14
    117a:	75 8b       	std	Z+21, r23	; 0x15
    117c:	86 8b       	std	Z+22, r24	; 0x16
    117e:	97 8b       	std	Z+23, r25	; 0x17
			dtostrf(voltage[5], 4, 3, voltageStr[5]);	// float to char conversion
    1180:	06 eb       	ldi	r16, 0xB6	; 182
    1182:	17 e0       	ldi	r17, 0x07	; 7
    1184:	23 e0       	ldi	r18, 0x03	; 3
    1186:	44 e0       	ldi	r20, 0x04	; 4
    1188:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			printm("---------------------------------------------");
    118c:	88 e3       	ldi	r24, 0x38	; 56
    118e:	92 e0       	ldi	r25, 0x02	; 2
    1190:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			br(); br();
    1194:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    1198:	0e 94 ad 01 	call	0x35a	; 0x35a <br>

			// - - - - -
			// FIBER CORE DIAGRAM 
			// - - - - -
			fiberDisplay(voltage, voltageMax, 
    119c:	80 90 ef 07 	lds	r8, 0x07EF	; 0x8007ef <channelMin>
    11a0:	90 90 f0 07 	lds	r9, 0x07F0	; 0x8007f0 <channelMin+0x1>
    11a4:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <voltageMin>
    11a8:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <voltageMin+0x1>
    11ac:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <voltageMin+0x2>
    11b0:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <voltageMin+0x3>
    11b4:	e0 90 3e 07 	lds	r14, 0x073E	; 0x80073e <voltageAvg>
    11b8:	f0 90 3f 07 	lds	r15, 0x073F	; 0x80073f <voltageAvg+0x1>
    11bc:	00 91 40 07 	lds	r16, 0x0740	; 0x800740 <voltageAvg+0x2>
    11c0:	10 91 41 07 	lds	r17, 0x0741	; 0x800741 <voltageAvg+0x3>
    11c4:	20 91 5b 08 	lds	r18, 0x085B	; 0x80085b <channelMax>
    11c8:	30 91 5c 08 	lds	r19, 0x085C	; 0x80085c <channelMax+0x1>
    11cc:	40 91 3a 07 	lds	r20, 0x073A	; 0x80073a <__data_end>
    11d0:	50 91 3b 07 	lds	r21, 0x073B	; 0x80073b <__data_end+0x1>
    11d4:	60 91 3c 07 	lds	r22, 0x073C	; 0x80073c <__data_end+0x2>
    11d8:	70 91 3d 07 	lds	r23, 0x073D	; 0x80073d <__data_end+0x3>
    11dc:	c2 01       	movw	r24, r4
    11de:	0e 94 61 04 	call	0x8c2	; 0x8c2 <fiberDisplay>
					     voltageMin, channelMin);

			// - - - - -
			// RESET ADC VARIABLES
			// - - - - -
			voltageMax	 = 0;
    11e2:	10 92 3a 07 	sts	0x073A, r1	; 0x80073a <__data_end>
    11e6:	10 92 3b 07 	sts	0x073B, r1	; 0x80073b <__data_end+0x1>
    11ea:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <__data_end+0x2>
    11ee:	10 92 3d 07 	sts	0x073D, r1	; 0x80073d <__data_end+0x3>
			channelMax	 = 0;
    11f2:	10 92 5c 08 	sts	0x085C, r1	; 0x80085c <channelMax+0x1>
    11f6:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <channelMax>

			ADC_en_count = 0;
    11fa:	10 92 43 07 	sts	0x0743, r1	; 0x800743 <ADC_en_count+0x1>
    11fe:	10 92 42 07 	sts	0x0742, r1	; 0x800742 <ADC_en_count>
			voltageAvg 	 = 0;
    1202:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <voltageAvg>
    1206:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <voltageAvg+0x1>
    120a:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <voltageAvg+0x2>
    120e:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <voltageAvg+0x3>

			voltageMin	 = 5.55;
    1212:	8a e9       	ldi	r24, 0x9A	; 154
    1214:	99 e9       	ldi	r25, 0x99	; 153
    1216:	a1 eb       	ldi	r26, 0xB1	; 177
    1218:	b0 e4       	ldi	r27, 0x40	; 64
    121a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <voltageMin>
    121e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <voltageMin+0x1>
    1222:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <voltageMin+0x2>
    1226:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <voltageMin+0x3>
			channelMin	 = 0;
    122a:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <channelMin+0x1>
    122e:	10 92 ef 07 	sts	0x07EF, r1	; 0x8007ef <channelMin>

			br(); br();
    1232:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    1236:	0e 94 ad 01 	call	0x35a	; 0x35a <br>

			printm("ADC - - - - - - - - - - - - - - - - - - - - -");
    123a:	86 e6       	ldi	r24, 0x66	; 102
    123c:	92 e0       	ldi	r25, 0x02	; 2
    123e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			br();
    1242:	0e 94 ad 01 	call	0x35a	; 0x35a <br>

			// ----------------------------------------
			// PRINT ADC HEADERS w/ VOLTAGE
			// - - - - -
			printm("A0: "); 
    1246:	84 e9       	ldi	r24, 0x94	; 148
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			if(voltage[0] == -1.0)
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	5f eb       	ldi	r21, 0xBF	; 191
    1256:	d2 01       	movw	r26, r4
    1258:	6d 91       	ld	r22, X+
    125a:	7d 91       	ld	r23, X+
    125c:	8d 91       	ld	r24, X+
    125e:	9c 91       	ld	r25, X
    1260:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    1264:	81 11       	cpse	r24, r1
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <main+0x2d4>
				printm("OFF      ");						// print OFF if ADC disabled
    1268:	89 e9       	ldi	r24, 0x99	; 153
    126a:	92 e0       	ldi	r25, 0x02	; 2
    126c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1270:	08 c0       	rjmp	.+16     	; 0x1282 <main+0x2e4>
			else
				{ printm(voltageStr[0]); printm("V   "); }	// otherwise, display ADC voltage
    1272:	82 e5       	ldi	r24, 0x52	; 82
    1274:	97 e0       	ldi	r25, 0x07	; 7
    1276:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    127a:	83 ea       	ldi	r24, 0xA3	; 163
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("A1: ");
    1282:	88 ea       	ldi	r24, 0xA8	; 168
    1284:	92 e0       	ldi	r25, 0x02	; 2
    1286:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			if(voltage[1] == -1.0)
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f eb       	ldi	r21, 0xBF	; 191
    1292:	f2 01       	movw	r30, r4
    1294:	64 81       	ldd	r22, Z+4	; 0x04
    1296:	75 81       	ldd	r23, Z+5	; 0x05
    1298:	86 81       	ldd	r24, Z+6	; 0x06
    129a:	97 81       	ldd	r25, Z+7	; 0x07
    129c:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    12a0:	81 11       	cpse	r24, r1
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <main+0x310>
				printm("OFF      ");						// print OFF if ADC disabled
    12a4:	89 e9       	ldi	r24, 0x99	; 153
    12a6:	92 e0       	ldi	r25, 0x02	; 2
    12a8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <main+0x320>
			else
				{ printm(voltageStr[1]); printm("V   "); }	// otherwise, display ADC voltage
    12ae:	86 e6       	ldi	r24, 0x66	; 102
    12b0:	97 e0       	ldi	r25, 0x07	; 7
    12b2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    12b6:	83 ea       	ldi	r24, 0xA3	; 163
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("A2: ");
    12be:	8d ea       	ldi	r24, 0xAD	; 173
    12c0:	92 e0       	ldi	r25, 0x02	; 2
    12c2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			if(voltage[2] == -1.0)
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e8       	ldi	r20, 0x80	; 128
    12cc:	5f eb       	ldi	r21, 0xBF	; 191
    12ce:	d2 01       	movw	r26, r4
    12d0:	18 96       	adiw	r26, 0x08	; 8
    12d2:	6d 91       	ld	r22, X+
    12d4:	7d 91       	ld	r23, X+
    12d6:	8d 91       	ld	r24, X+
    12d8:	9c 91       	ld	r25, X
    12da:	1b 97       	sbiw	r26, 0x0b	; 11
    12dc:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    12e0:	81 11       	cpse	r24, r1
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <main+0x350>
				printm("OFF      ");						// print OFF if ADC disabled
    12e4:	89 e9       	ldi	r24, 0x99	; 153
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    12ec:	08 c0       	rjmp	.+16     	; 0x12fe <main+0x360>
			else
				{ printm(voltageStr[2]); printm("V   "); }	// otherwise, display ADC voltage
    12ee:	8a e7       	ldi	r24, 0x7A	; 122
    12f0:	97 e0       	ldi	r25, 0x07	; 7
    12f2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    12f6:	83 ea       	ldi	r24, 0xA3	; 163
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			br();
    12fe:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("A3: ");
    1302:	82 eb       	ldi	r24, 0xB2	; 178
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			if(voltage[3] == -1.0)
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f eb       	ldi	r21, 0xBF	; 191
    1312:	f2 01       	movw	r30, r4
    1314:	64 85       	ldd	r22, Z+12	; 0x0c
    1316:	75 85       	ldd	r23, Z+13	; 0x0d
    1318:	86 85       	ldd	r24, Z+14	; 0x0e
    131a:	97 85       	ldd	r25, Z+15	; 0x0f
    131c:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    1320:	81 11       	cpse	r24, r1
    1322:	05 c0       	rjmp	.+10     	; 0x132e <main+0x390>
				printm("OFF      ");						// print OFF if ADC disabled
    1324:	89 e9       	ldi	r24, 0x99	; 153
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    132c:	08 c0       	rjmp	.+16     	; 0x133e <main+0x3a0>
			else
				{ printm(voltageStr[3]); printm("V   "); }	// otherwise, display ADC voltage
    132e:	8e e8       	ldi	r24, 0x8E	; 142
    1330:	97 e0       	ldi	r25, 0x07	; 7
    1332:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1336:	83 ea       	ldi	r24, 0xA3	; 163
    1338:	92 e0       	ldi	r25, 0x02	; 2
    133a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("A4: ");
    133e:	87 eb       	ldi	r24, 0xB7	; 183
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			if(voltage[4] == -1.0)
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e8       	ldi	r20, 0x80	; 128
    134c:	5f eb       	ldi	r21, 0xBF	; 191
    134e:	d2 01       	movw	r26, r4
    1350:	50 96       	adiw	r26, 0x10	; 16
    1352:	6d 91       	ld	r22, X+
    1354:	7d 91       	ld	r23, X+
    1356:	8d 91       	ld	r24, X+
    1358:	9c 91       	ld	r25, X
    135a:	53 97       	sbiw	r26, 0x13	; 19
    135c:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    1360:	81 11       	cpse	r24, r1
    1362:	05 c0       	rjmp	.+10     	; 0x136e <main+0x3d0>
				printm("OFF      ");						// print OFF if ADC disabled
    1364:	89 e9       	ldi	r24, 0x99	; 153
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    136c:	08 c0       	rjmp	.+16     	; 0x137e <main+0x3e0>
			else
				{ printm(voltageStr[4]); printm("V   "); }	// otherwise, display ADC voltage
    136e:	82 ea       	ldi	r24, 0xA2	; 162
    1370:	97 e0       	ldi	r25, 0x07	; 7
    1372:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1376:	83 ea       	ldi	r24, 0xA3	; 163
    1378:	92 e0       	ldi	r25, 0x02	; 2
    137a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("A5: ");
    137e:	8c eb       	ldi	r24, 0xBC	; 188
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			if(voltage[5] == -1.0)
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e8       	ldi	r20, 0x80	; 128
    138c:	5f eb       	ldi	r21, 0xBF	; 191
    138e:	f2 01       	movw	r30, r4
    1390:	64 89       	ldd	r22, Z+20	; 0x14
    1392:	75 89       	ldd	r23, Z+21	; 0x15
    1394:	86 89       	ldd	r24, Z+22	; 0x16
    1396:	97 89       	ldd	r25, Z+23	; 0x17
    1398:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    139c:	81 11       	cpse	r24, r1
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <main+0x40c>
				printm("OFF      ");						// print OFF if ADC disabled
    13a0:	89 e9       	ldi	r24, 0x99	; 153
    13a2:	92 e0       	ldi	r25, 0x02	; 2
    13a4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <main+0x41c>
			else
				{ printm(voltageStr[5]); printm("V   "); }	// otherwise, display ADC voltage
    13aa:	86 eb       	ldi	r24, 0xB6	; 182
    13ac:	97 e0       	ldi	r25, 0x07	; 7
    13ae:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    13b2:	83 ea       	ldi	r24, 0xA3	; 163
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			
			br();
    13ba:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    13be:	80 90 3e 07 	lds	r8, 0x073E	; 0x80073e <voltageAvg>
    13c2:	90 90 3f 07 	lds	r9, 0x073F	; 0x80073f <voltageAvg+0x1>
    13c6:	a0 90 40 07 	lds	r10, 0x0740	; 0x800740 <voltageAvg+0x2>
    13ca:	b0 90 41 07 	lds	r11, 0x0741	; 0x800741 <voltageAvg+0x3>
    13ce:	f0 91 3a 07 	lds	r31, 0x073A	; 0x80073a <__data_end>
    13d2:	f9 83       	std	Y+1, r31	; 0x01
    13d4:	20 91 3b 07 	lds	r18, 0x073B	; 0x80073b <__data_end+0x1>
    13d8:	2a 83       	std	Y+2, r18	; 0x02
    13da:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <__data_end+0x2>
    13de:	8b 83       	std	Y+3, r24	; 0x03
    13e0:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <__data_end+0x3>
    13e4:	9c 83       	std	Y+4, r25	; 0x04
    13e6:	a0 91 5b 08 	lds	r26, 0x085B	; 0x80085b <channelMax>
    13ea:	ad 83       	std	Y+5, r26	; 0x05
    13ec:	b0 91 5c 08 	lds	r27, 0x085C	; 0x80085c <channelMax+0x1>
    13f0:	be 83       	std	Y+6, r27	; 0x06
    13f2:	30 90 08 01 	lds	r3, 0x0108	; 0x800108 <voltageMin>
    13f6:	20 90 09 01 	lds	r2, 0x0109	; 0x800109 <voltageMin+0x1>
    13fa:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <voltageMin+0x2>
    13fe:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <voltageMin+0x3>
    1402:	e0 91 ef 07 	lds	r30, 0x07EF	; 0x8007ef <channelMin>
    1406:	ef 83       	std	Y+7, r30	; 0x07
    1408:	f0 91 f0 07 	lds	r31, 0x07F0	; 0x8007f0 <channelMin+0x1>
    140c:	f8 87       	std	Y+8, r31	; 0x08
    140e:	82 01       	movw	r16, r4

			// calculate the voltage avg
			for(int i = 0; i <= 5; i++)
    1410:	c1 2c       	mov	r12, r1
    1412:	d1 2c       	mov	r13, r1
    1414:	de 86       	std	Y+14, r13	; 0x0e
    1416:	cd 86       	std	Y+13, r12	; 0x0d
    1418:	5a 86       	std	Y+10, r5	; 0x0a
    141a:	49 86       	std	Y+9, r4	; 0x09
    141c:	7c 86       	std	Y+12, r7	; 0x0c
    141e:	6b 86       	std	Y+11, r6	; 0x0b
    1420:	7e 2c       	mov	r7, r14
    1422:	5f 2c       	mov	r5, r15
			{
				voltageAvg += voltage[i];
    1424:	d8 01       	movw	r26, r16
    1426:	cd 90       	ld	r12, X+
    1428:	dd 90       	ld	r13, X+
    142a:	ed 90       	ld	r14, X+
    142c:	fd 90       	ld	r15, X+
    142e:	8d 01       	movw	r16, r26
    1430:	a7 01       	movw	r20, r14
    1432:	96 01       	movw	r18, r12
    1434:	c5 01       	movw	r24, r10
    1436:	b4 01       	movw	r22, r8
    1438:	0e 94 0b 10 	call	0x2016	; 0x2016 <__addsf3>
    143c:	4b 01       	movw	r8, r22
    143e:	5c 01       	movw	r10, r24
				
				// find voltage max
				if(voltage[i] > voltageMax)
    1440:	29 81       	ldd	r18, Y+1	; 0x01
    1442:	3a 81       	ldd	r19, Y+2	; 0x02
    1444:	4b 81       	ldd	r20, Y+3	; 0x03
    1446:	5c 81       	ldd	r21, Y+4	; 0x04
    1448:	c7 01       	movw	r24, r14
    144a:	b6 01       	movw	r22, r12
    144c:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
    1450:	18 16       	cp	r1, r24
    1452:	44 f4       	brge	.+16     	; 0x1464 <main+0x4c6>
				{
					voltageMax = voltage[i];
					channelMax = i;
    1454:	bd 85       	ldd	r27, Y+13	; 0x0d
    1456:	bd 83       	std	Y+5, r27	; 0x05
    1458:	ee 85       	ldd	r30, Y+14	; 0x0e
    145a:	ee 83       	std	Y+6, r30	; 0x06
				voltageAvg += voltage[i];
				
				// find voltage max
				if(voltage[i] > voltageMax)
				{
					voltageMax = voltage[i];
    145c:	c9 82       	std	Y+1, r12	; 0x01
    145e:	da 82       	std	Y+2, r13	; 0x02
    1460:	eb 82       	std	Y+3, r14	; 0x03
    1462:	fc 82       	std	Y+4, r15	; 0x04
					channelMax = i;
				}

				// find voltage min
				if(voltage[i] < voltageMin)
    1464:	23 2d       	mov	r18, r3
    1466:	32 2d       	mov	r19, r2
    1468:	47 2d       	mov	r20, r7
    146a:	55 2d       	mov	r21, r5
    146c:	c7 01       	movw	r24, r14
    146e:	b6 01       	movw	r22, r12
    1470:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    1474:	88 23       	and	r24, r24
    1476:	44 f4       	brge	.+16     	; 0x1488 <main+0x4ea>
				{
					voltageMin = voltage[i];
					channelMin = i;
    1478:	fd 85       	ldd	r31, Y+13	; 0x0d
    147a:	ff 83       	std	Y+7, r31	; 0x07
    147c:	2e 85       	ldd	r18, Y+14	; 0x0e
    147e:	28 87       	std	Y+8, r18	; 0x08
				}

				// find voltage min
				if(voltage[i] < voltageMin)
				{
					voltageMin = voltage[i];
    1480:	3c 2c       	mov	r3, r12
    1482:	2d 2c       	mov	r2, r13
    1484:	7e 2c       	mov	r7, r14
    1486:	5f 2c       	mov	r5, r15
				{ printm(voltageStr[5]); printm("V   "); }	// otherwise, display ADC voltage
			
			br();

			// calculate the voltage avg
			for(int i = 0; i <= 5; i++)
    1488:	8d 85       	ldd	r24, Y+13	; 0x0d
    148a:	9e 85       	ldd	r25, Y+14	; 0x0e
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	9e 87       	std	Y+14, r25	; 0x0e
    1490:	8d 87       	std	Y+13, r24	; 0x0d
    1492:	06 97       	sbiw	r24, 0x06	; 6
    1494:	39 f6       	brne	.-114    	; 0x1424 <main+0x486>
    1496:	e7 2c       	mov	r14, r7
    1498:	6b 84       	ldd	r6, Y+11	; 0x0b
    149a:	7c 84       	ldd	r7, Y+12	; 0x0c
    149c:	f5 2c       	mov	r15, r5
    149e:	49 84       	ldd	r4, Y+9	; 0x09
    14a0:	5a 84       	ldd	r5, Y+10	; 0x0a
    14a2:	83 2d       	mov	r24, r3
    14a4:	92 2d       	mov	r25, r2
    14a6:	ae 2d       	mov	r26, r14
    14a8:	bf 2d       	mov	r27, r15
    14aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <voltageMin>
    14ae:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <voltageMin+0x1>
    14b2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <voltageMin+0x2>
    14b6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <voltageMin+0x3>
    14ba:	9f 81       	ldd	r25, Y+7	; 0x07
    14bc:	90 93 ef 07 	sts	0x07EF, r25	; 0x8007ef <channelMin>
    14c0:	a8 85       	ldd	r26, Y+8	; 0x08
    14c2:	a0 93 f0 07 	sts	0x07F0, r26	; 0x8007f0 <channelMin+0x1>
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	ab 81       	ldd	r26, Y+3	; 0x03
    14cc:	bc 81       	ldd	r27, Y+4	; 0x04
    14ce:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <__data_end>
    14d2:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <__data_end+0x1>
    14d6:	a0 93 3c 07 	sts	0x073C, r26	; 0x80073c <__data_end+0x2>
    14da:	b0 93 3d 07 	sts	0x073D, r27	; 0x80073d <__data_end+0x3>
    14de:	bd 81       	ldd	r27, Y+5	; 0x05
    14e0:	b0 93 5b 08 	sts	0x085B, r27	; 0x80085b <channelMax>
    14e4:	ee 81       	ldd	r30, Y+6	; 0x06
    14e6:	e0 93 5c 08 	sts	0x085C, r30	; 0x80085c <channelMax+0x1>
    14ea:	80 92 3e 07 	sts	0x073E, r8	; 0x80073e <voltageAvg>
    14ee:	90 92 3f 07 	sts	0x073F, r9	; 0x80073f <voltageAvg+0x1>
    14f2:	a0 92 40 07 	sts	0x0740, r10	; 0x800740 <voltageAvg+0x2>
    14f6:	b0 92 41 07 	sts	0x0741, r11	; 0x800741 <voltageAvg+0x3>
					voltageMin = voltage[i];
					channelMin = i;
				}
			}

			br();
    14fa:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("A_MAX_CHAN: ");
    14fe:	81 ec       	ldi	r24, 0xC1	; 193
    1500:	92 e0       	ldi	r25, 0x02	; 2
    1502:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			
			dtostrf(voltageMax, 4, 3, voltageStrMax);	// float to char conversion
    1506:	60 91 3a 07 	lds	r22, 0x073A	; 0x80073a <__data_end>
    150a:	70 91 3b 07 	lds	r23, 0x073B	; 0x80073b <__data_end+0x1>
    150e:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <__data_end+0x2>
    1512:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <__data_end+0x3>
    1516:	03 ef       	ldi	r16, 0xF3	; 243
    1518:	17 e0       	ldi	r17, 0x07	; 7
    151a:	23 e0       	ldi	r18, 0x03	; 3
    151c:	44 e0       	ldi	r20, 0x04	; 4
    151e:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>
    1522:	4a e0       	ldi	r20, 0x0A	; 10
    1524:	67 ee       	ldi	r22, 0xE7	; 231
    1526:	77 e0       	ldi	r23, 0x07	; 7
    1528:	80 91 5b 08 	lds	r24, 0x085B	; 0x80085b <channelMax>
    152c:	90 91 5c 08 	lds	r25, 0x085C	; 0x80085c <channelMax+0x1>
    1530:	0e 94 aa 13 	call	0x2754	; 0x2754 <__itoa_ncheck>
			itoa(channelMax, channelStrMax, 10);		// integer to char conversion
			printm(channelStrMax);						// print channel number for max voltage
    1534:	87 ee       	ldi	r24, 0xE7	; 231
    1536:	97 e0       	ldi	r25, 0x07	; 7
    1538:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("     A_MAX_VOLT: ");
    153c:	8e ec       	ldi	r24, 0xCE	; 206
    153e:	92 e0       	ldi	r25, 0x02	; 2
    1540:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm(voltageStrMax);						// print max voltage found
    1544:	c8 01       	movw	r24, r16
    1546:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("V");
    154a:	86 e7       	ldi	r24, 0x76	; 118
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1552:	20 91 42 07 	lds	r18, 0x0742	; 0x800742 <ADC_en_count>
    1556:	30 91 43 07 	lds	r19, 0x0743	; 0x800743 <ADC_en_count+0x1>
    155a:	e4 e2       	ldi	r30, 0x24	; 36
    155c:	f1 e0       	ldi	r31, 0x01	; 1

			// ------

			for(int j = 0; j <= 5; j++)
			{
				if(ADC_en[j] == ON)
    155e:	81 91       	ld	r24, Z+
    1560:	91 91       	ld	r25, Z+
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	11 f4       	brne	.+4      	; 0x156a <main+0x5cc>
					ADC_en_count++;
    1566:	2f 5f       	subi	r18, 0xFF	; 255
    1568:	3f 4f       	sbci	r19, 0xFF	; 255

			printm("V");

			// ------

			for(int j = 0; j <= 5; j++)
    156a:	e6 15       	cp	r30, r6
    156c:	f7 05       	cpc	r31, r7
    156e:	b9 f7       	brne	.-18     	; 0x155e <main+0x5c0>
    1570:	30 93 43 07 	sts	0x0743, r19	; 0x800743 <ADC_en_count+0x1>
    1574:	20 93 42 07 	sts	0x0742, r18	; 0x800742 <ADC_en_count>
			{
				if(ADC_en[j] == ON)
					ADC_en_count++;
			}
				
			voltageAvg /= 6;
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 ec       	ldi	r20, 0xC0	; 192
    157e:	50 e4       	ldi	r21, 0x40	; 64
    1580:	60 91 3e 07 	lds	r22, 0x073E	; 0x80073e <voltageAvg>
    1584:	70 91 3f 07 	lds	r23, 0x073F	; 0x80073f <voltageAvg+0x1>
    1588:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <voltageAvg+0x2>
    158c:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <voltageAvg+0x3>
    1590:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divsf3>
    1594:	6b 01       	movw	r12, r22
    1596:	7c 01       	movw	r14, r24
			//voltageAvg /= ADC_en_count;

			if(voltageAvg == -1.0)
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f eb       	ldi	r21, 0xBF	; 191
    15a0:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    15a4:	88 23       	and	r24, r24
    15a6:	49 f0       	breq	.+18     	; 0x15ba <main+0x61c>
			{
				if(ADC_en[j] == ON)
					ADC_en_count++;
			}
				
			voltageAvg /= 6;
    15a8:	c0 92 3e 07 	sts	0x073E, r12	; 0x80073e <voltageAvg>
    15ac:	d0 92 3f 07 	sts	0x073F, r13	; 0x80073f <voltageAvg+0x1>
    15b0:	e0 92 40 07 	sts	0x0740, r14	; 0x800740 <voltageAvg+0x2>
    15b4:	f0 92 41 07 	sts	0x0741, r15	; 0x800741 <voltageAvg+0x3>
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <main+0x62c>
			//voltageAvg /= ADC_en_count;

			if(voltageAvg == -1.0)
				voltageAvg = 0.0;
    15ba:	10 92 3e 07 	sts	0x073E, r1	; 0x80073e <voltageAvg>
    15be:	10 92 3f 07 	sts	0x073F, r1	; 0x80073f <voltageAvg+0x1>
    15c2:	10 92 40 07 	sts	0x0740, r1	; 0x800740 <voltageAvg+0x2>
    15c6:	10 92 41 07 	sts	0x0741, r1	; 0x800741 <voltageAvg+0x3>

			br();
    15ca:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("                  A_AVG_VOLT: ");
    15ce:	80 ee       	ldi	r24, 0xE0	; 224
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			dtostrf(voltageAvg, 4, 3, voltageStrAvg);
    15d6:	60 91 3e 07 	lds	r22, 0x073E	; 0x80073e <voltageAvg>
    15da:	70 91 3f 07 	lds	r23, 0x073F	; 0x80073f <voltageAvg+0x1>
    15de:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <voltageAvg+0x2>
    15e2:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <voltageAvg+0x3>
    15e6:	07 e0       	ldi	r16, 0x07	; 7
    15e8:	18 e0       	ldi	r17, 0x08	; 8
    15ea:	23 e0       	ldi	r18, 0x03	; 3
    15ec:	44 e0       	ldi	r20, 0x04	; 4
    15ee:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>
			//itoa(voltageAvg, voltageStrAvg, 10);
			printm(voltageStrAvg);
    15f2:	c8 01       	movw	r24, r16
    15f4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("V");
    15f8:	86 e7       	ldi	r24, 0x76	; 118
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			// ------

			br();
    1600:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("A_MIN_CHAN: ");
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	92 e0       	ldi	r25, 0x02	; 2
    1608:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			if(voltageMin == -1.0)
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e8       	ldi	r20, 0x80	; 128
    1612:	5f eb       	ldi	r21, 0xBF	; 191
    1614:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <voltageMin>
    1618:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <voltageMin+0x1>
    161c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <voltageMin+0x2>
    1620:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <voltageMin+0x3>
    1624:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    1628:	81 11       	cpse	r24, r1
    162a:	08 c0       	rjmp	.+16     	; 0x163c <main+0x69e>
				voltageMin = 0.0;
    162c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <voltageMin>
    1630:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <voltageMin+0x1>
    1634:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <voltageMin+0x2>
    1638:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <voltageMin+0x3>

			dtostrf(voltageMin, 4, 3, voltageStrMin);
    163c:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <voltageMin>
    1640:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <voltageMin+0x1>
    1644:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <voltageMin+0x2>
    1648:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <voltageMin+0x3>
    164c:	0e eb       	ldi	r16, 0xBE	; 190
    164e:	17 e0       	ldi	r17, 0x07	; 7
    1650:	23 e0       	ldi	r18, 0x03	; 3
    1652:	44 e0       	ldi	r20, 0x04	; 4
    1654:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>
    1658:	4a e0       	ldi	r20, 0x0A	; 10
    165a:	66 eb       	ldi	r22, 0xB6	; 182
    165c:	77 e0       	ldi	r23, 0x07	; 7
    165e:	80 91 ef 07 	lds	r24, 0x07EF	; 0x8007ef <channelMin>
    1662:	90 91 f0 07 	lds	r25, 0x07F0	; 0x8007f0 <channelMin+0x1>
    1666:	0e 94 aa 13 	call	0x2754	; 0x2754 <__itoa_ncheck>
			itoa(channelMin, channelStrMin, 10);
			printm(channelStrMin);
    166a:	86 eb       	ldi	r24, 0xB6	; 182
    166c:	97 e0       	ldi	r25, 0x07	; 7
    166e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("     A_MIN_VOLT: ");
    1672:	8c e0       	ldi	r24, 0x0C	; 12
    1674:	93 e0       	ldi	r25, 0x03	; 3
    1676:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm(voltageStrMin);
    167a:	c8 01       	movw	r24, r16
    167c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			printm("V");
    1680:	86 e7       	ldi	r24, 0x76	; 118
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			


			br(); br();
    1688:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    168c:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("DIAG  - - - - - - - - - - - - - - - - - - - -");
    1690:	8e e1       	ldi	r24, 0x1E	; 30
    1692:	93 e0       	ldi	r25, 0x03	; 3
    1694:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			br();
    1698:	0e 94 ad 01 	call	0x35a	; 0x35a <br>

			printm("INTERNAL_V: ");
    169c:	8c e4       	ldi	r24, 0x4C	; 76
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			internal_Volt();
    16a4:	0e 94 05 04 	call	0x80a	; 0x80a <internal_Volt>
			
			delay_ms(pollingSpeed);
    16a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <pollingSpeed>
    16ac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <pollingSpeed+0x1>
    16b0:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <delay_ms>
    16b4:	9d c1       	rjmp	.+826    	; 0x19f0 <main+0xa52>
			
		}

		else if(op_mode == 1)
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	91 05       	cpc	r25, r1
    16ba:	09 f0       	breq	.+2      	; 0x16be <main+0x720>
    16bc:	52 c1       	rjmp	.+676    	; 0x1962 <main+0x9c4>
    16be:	8f e9       	ldi	r24, 0x9F	; 159
    16c0:	9f e0       	ldi	r25, 0x0F	; 15
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <main+0x724>
    16c6:	00 c0       	rjmp	.+0      	; 0x16c8 <main+0x72a>
    16c8:	00 00       	nop
		{

			_delay_ms(2);

			voltage[0] = ADC_conv(0, FALSE);			// ADC0 calc, return voltage - don't print
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	70 e0       	ldi	r23, 0x00	; 0
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    16d6:	d2 01       	movw	r26, r4
    16d8:	6d 93       	st	X+, r22
    16da:	7d 93       	st	X+, r23
    16dc:	8d 93       	st	X+, r24
    16de:	9c 93       	st	X, r25
    16e0:	13 97       	sbiw	r26, 0x03	; 3
			dtostrf(voltage[0], 4, 3, voltageStr[0]);	// float to char conversion
    16e2:	02 e5       	ldi	r16, 0x52	; 82
    16e4:	17 e0       	ldi	r17, 0x07	; 7
    16e6:	23 e0       	ldi	r18, 0x03	; 3
    16e8:	44 e0       	ldi	r20, 0x04	; 4
    16ea:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[1] = ADC_conv(1, FALSE);			// ADC1 calc, return voltage - don't print
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    16fa:	f2 01       	movw	r30, r4
    16fc:	64 83       	std	Z+4, r22	; 0x04
    16fe:	75 83       	std	Z+5, r23	; 0x05
    1700:	86 83       	std	Z+6, r24	; 0x06
    1702:	97 83       	std	Z+7, r25	; 0x07
			dtostrf(voltage[1], 4, 3, voltageStr[1]);	// float to char conversion
    1704:	06 e6       	ldi	r16, 0x66	; 102
    1706:	17 e0       	ldi	r17, 0x07	; 7
    1708:	23 e0       	ldi	r18, 0x03	; 3
    170a:	44 e0       	ldi	r20, 0x04	; 4
    170c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[2] = ADC_conv(2, FALSE);			// ADC2 calc, return voltage - don't print
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    171c:	d2 01       	movw	r26, r4
    171e:	18 96       	adiw	r26, 0x08	; 8
    1720:	6d 93       	st	X+, r22
    1722:	7d 93       	st	X+, r23
    1724:	8d 93       	st	X+, r24
    1726:	9c 93       	st	X, r25
    1728:	1b 97       	sbiw	r26, 0x0b	; 11
			dtostrf(voltage[2], 4, 3, voltageStr[2]);	// float to char conversion
    172a:	0a e7       	ldi	r16, 0x7A	; 122
    172c:	17 e0       	ldi	r17, 0x07	; 7
    172e:	23 e0       	ldi	r18, 0x03	; 3
    1730:	44 e0       	ldi	r20, 0x04	; 4
    1732:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[3] = ADC_conv(3, FALSE);			// ADC3 calc, return voltage - don't print
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	83 e0       	ldi	r24, 0x03	; 3
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    1742:	f2 01       	movw	r30, r4
    1744:	64 87       	std	Z+12, r22	; 0x0c
    1746:	75 87       	std	Z+13, r23	; 0x0d
    1748:	86 87       	std	Z+14, r24	; 0x0e
    174a:	97 87       	std	Z+15, r25	; 0x0f
			dtostrf(voltage[3], 4, 3, voltageStr[3]);	// float to char conversion
    174c:	0e e8       	ldi	r16, 0x8E	; 142
    174e:	17 e0       	ldi	r17, 0x07	; 7
    1750:	23 e0       	ldi	r18, 0x03	; 3
    1752:	44 e0       	ldi	r20, 0x04	; 4
    1754:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[4] = ADC_conv(4, FALSE);			// ADC4 calc, return voltage - don't print
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    1764:	d2 01       	movw	r26, r4
    1766:	50 96       	adiw	r26, 0x10	; 16
    1768:	6d 93       	st	X+, r22
    176a:	7d 93       	st	X+, r23
    176c:	8d 93       	st	X+, r24
    176e:	9c 93       	st	X, r25
    1770:	53 97       	sbiw	r26, 0x13	; 19
			dtostrf(voltage[4], 4, 3, voltageStr[4]);	// float to char conversion
    1772:	02 ea       	ldi	r16, 0xA2	; 162
    1774:	17 e0       	ldi	r17, 0x07	; 7
    1776:	23 e0       	ldi	r18, 0x03	; 3
    1778:	44 e0       	ldi	r20, 0x04	; 4
    177a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage[5] = ADC_conv(5, FALSE);			// ADC5 calc, return voltage - don't print
    177e:	60 e0       	ldi	r22, 0x00	; 0
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	85 e0       	ldi	r24, 0x05	; 5
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    178a:	f2 01       	movw	r30, r4
    178c:	64 8b       	std	Z+20, r22	; 0x14
    178e:	75 8b       	std	Z+21, r23	; 0x15
    1790:	86 8b       	std	Z+22, r24	; 0x16
    1792:	97 8b       	std	Z+23, r25	; 0x17
			dtostrf(voltage[5], 4, 3, voltageStr[5]);	// float to char conversion
    1794:	06 eb       	ldi	r16, 0xB6	; 182
    1796:	17 e0       	ldi	r17, 0x07	; 7
    1798:	23 e0       	ldi	r18, 0x03	; 3
    179a:	44 e0       	ldi	r20, 0x04	; 4
    179c:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>

			voltage_deg = (voltageMax / VOLT_PER_DEGREE);
    17a0:	2d ec       	ldi	r18, 0xCD	; 205
    17a2:	3c ec       	ldi	r19, 0xCC	; 204
    17a4:	4c e4       	ldi	r20, 0x4C	; 76
    17a6:	5d e3       	ldi	r21, 0x3D	; 61
    17a8:	60 91 3a 07 	lds	r22, 0x073A	; 0x80073a <__data_end>
    17ac:	70 91 3b 07 	lds	r23, 0x073B	; 0x80073b <__data_end+0x1>
    17b0:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <__data_end+0x2>
    17b4:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <__data_end+0x3>
    17b8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divsf3>
    17bc:	6b 01       	movw	r12, r22
    17be:	7c 01       	movw	r14, r24

			if(voltage_deg >= 60.0)
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e7       	ldi	r20, 0x70	; 112
    17c6:	52 e4       	ldi	r21, 0x42	; 66
    17c8:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
    17cc:	88 23       	and	r24, r24
    17ce:	4c f4       	brge	.+18     	; 0x17e2 <main+0x844>
			dtostrf(voltage[4], 4, 3, voltageStr[4]);	// float to char conversion

			voltage[5] = ADC_conv(5, FALSE);			// ADC5 calc, return voltage - don't print
			dtostrf(voltage[5], 4, 3, voltageStr[5]);	// float to char conversion

			voltage_deg = (voltageMax / VOLT_PER_DEGREE);
    17d0:	c0 92 1b 08 	sts	0x081B, r12	; 0x80081b <voltage_deg>
    17d4:	d0 92 1c 08 	sts	0x081C, r13	; 0x80081c <voltage_deg+0x1>
    17d8:	e0 92 1d 08 	sts	0x081D, r14	; 0x80081d <voltage_deg+0x2>
    17dc:	f0 92 1e 08 	sts	0x081E, r15	; 0x80081e <voltage_deg+0x3>
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <main+0x85c>

			if(voltage_deg >= 60.0)
			voltage_deg = 60;
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a0 e7       	ldi	r26, 0x70	; 112
    17e8:	b2 e4       	ldi	r27, 0x42	; 66
    17ea:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <voltage_deg>
    17ee:	90 93 1c 08 	sts	0x081C, r25	; 0x80081c <voltage_deg+0x1>
    17f2:	a0 93 1d 08 	sts	0x081D, r26	; 0x80081d <voltage_deg+0x2>
    17f6:	b0 93 1e 08 	sts	0x081E, r27	; 0x80081e <voltage_deg+0x3>
			
			dtostrf(voltage_deg, 2, 1, stringValue);
    17fa:	60 91 1b 08 	lds	r22, 0x081B	; 0x80081b <voltage_deg>
    17fe:	70 91 1c 08 	lds	r23, 0x081C	; 0x80081c <voltage_deg+0x1>
    1802:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <voltage_deg+0x2>
    1806:	90 91 1e 08 	lds	r25, 0x081E	; 0x80081e <voltage_deg+0x3>
    180a:	07 e4       	ldi	r16, 0x47	; 71
    180c:	18 e0       	ldi	r17, 0x08	; 8
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	42 e0       	ldi	r20, 0x02	; 2
    1812:	0e 94 59 12 	call	0x24b2	; 0x24b2 <dtostrf>
			printm(stringValue);				// print the voltage
    1816:	c8 01       	movw	r24, r16
    1818:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			printc(176);
    181c:	80 eb       	ldi	r24, 0xB0	; 176
    181e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			printm(" at max voltage");				// suffix
    1822:	8e ea       	ldi	r24, 0xAE	; 174
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			if(voltageMax <= 0.2)
    182a:	c0 90 3a 07 	lds	r12, 0x073A	; 0x80073a <__data_end>
    182e:	d0 90 3b 07 	lds	r13, 0x073B	; 0x80073b <__data_end+0x1>
    1832:	e0 90 3c 07 	lds	r14, 0x073C	; 0x80073c <__data_end+0x2>
    1836:	f0 90 3d 07 	lds	r15, 0x073D	; 0x80073d <__data_end+0x3>
    183a:	2d ec       	ldi	r18, 0xCD	; 205
    183c:	3c ec       	ldi	r19, 0xCC	; 204
    183e:	4c e4       	ldi	r20, 0x4C	; 76
    1840:	5e e3       	ldi	r21, 0x3E	; 62
    1842:	c7 01       	movw	r24, r14
    1844:	b6 01       	movw	r22, r12
    1846:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    184a:	18 16       	cp	r1, r24
    184c:	2c f0       	brlt	.+10     	; 0x1858 <main+0x8ba>
			intensity = SIGNAL_NA;
    184e:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <intensity+0x1>
    1852:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <intensity>
    1856:	46 c0       	rjmp	.+140    	; 0x18e4 <main+0x946>
			else if(voltageMax > 0.200 && voltageMax <= 0.5)
    1858:	2d ec       	ldi	r18, 0xCD	; 205
    185a:	3c ec       	ldi	r19, 0xCC	; 204
    185c:	4c e4       	ldi	r20, 0x4C	; 76
    185e:	5e e3       	ldi	r21, 0x3E	; 62
    1860:	c7 01       	movw	r24, r14
    1862:	b6 01       	movw	r22, r12
    1864:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
    1868:	18 16       	cp	r1, r24
    186a:	8c f4       	brge	.+34     	; 0x188e <main+0x8f0>
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	c7 01       	movw	r24, r14
    1876:	b6 01       	movw	r22, r12
    1878:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    187c:	18 16       	cp	r1, r24
    187e:	3c f0       	brlt	.+14     	; 0x188e <main+0x8f0>
			intensity = SIGNAL_L;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <intensity+0x1>
    1888:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <intensity>
    188c:	2b c0       	rjmp	.+86     	; 0x18e4 <main+0x946>
			else if(voltageMax > 0.5 && voltageMax <= 2.0)
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	c7 01       	movw	r24, r14
    1898:	b6 01       	movw	r22, r12
    189a:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
    189e:	18 16       	cp	r1, r24
    18a0:	8c f4       	brge	.+34     	; 0x18c4 <main+0x926>
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 e4       	ldi	r21, 0x40	; 64
    18aa:	c7 01       	movw	r24, r14
    18ac:	b6 01       	movw	r22, r12
    18ae:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    18b2:	18 16       	cp	r1, r24
    18b4:	3c f0       	brlt	.+14     	; 0x18c4 <main+0x926>
			intensity = SIGNAL_M;
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <intensity+0x1>
    18be:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <intensity>
    18c2:	10 c0       	rjmp	.+32     	; 0x18e4 <main+0x946>
			else if(voltageMax > 2.0)
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	50 e4       	ldi	r21, 0x40	; 64
    18cc:	c7 01       	movw	r24, r14
    18ce:	b6 01       	movw	r22, r12
    18d0:	0e 94 a0 11 	call	0x2340	; 0x2340 <__gesf2>
    18d4:	18 16       	cp	r1, r24
    18d6:	34 f4       	brge	.+12     	; 0x18e4 <main+0x946>
			intensity = SIGNAL_H;
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <intensity+0x1>
    18e0:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <intensity>

			if(channelMax == 0)
    18e4:	80 91 5b 08 	lds	r24, 0x085B	; 0x80085b <channelMax>
    18e8:	90 91 5c 08 	lds	r25, 0x085C	; 0x80085c <channelMax+0x1>
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	39 f4       	brne	.+14     	; 0x18fe <main+0x960>
			direction = EAST;
    18f0:	84 e1       	ldi	r24, 0x14	; 20
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <direction+0x1>
    18f8:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <direction>
    18fc:	79 c0       	rjmp	.+242    	; 0x19f0 <main+0xa52>
			else if(channelMax == 1)
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	91 05       	cpc	r25, r1
    1902:	39 f4       	brne	.+14     	; 0x1912 <main+0x974>
			direction = SOUTHEAST;
    1904:	a6 e1       	ldi	r26, 0x16	; 22
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	b0 93 4d 07 	sts	0x074D, r27	; 0x80074d <direction+0x1>
    190c:	a0 93 4c 07 	sts	0x074C, r26	; 0x80074c <direction>
    1910:	6f c0       	rjmp	.+222    	; 0x19f0 <main+0xa52>
			else if(channelMax == 2)
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	91 05       	cpc	r25, r1
    1916:	39 f4       	brne	.+14     	; 0x1926 <main+0x988>
			direction = SOUTHWEST;
    1918:	e1 e2       	ldi	r30, 0x21	; 33
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	f0 93 4d 07 	sts	0x074D, r31	; 0x80074d <direction+0x1>
    1920:	e0 93 4c 07 	sts	0x074C, r30	; 0x80074c <direction>
    1924:	65 c0       	rjmp	.+202    	; 0x19f0 <main+0xa52>
			else if(channelMax == 3)
    1926:	83 30       	cpi	r24, 0x03	; 3
    1928:	91 05       	cpc	r25, r1
    192a:	39 f4       	brne	.+14     	; 0x193a <main+0x99c>
			direction = WEST;
    192c:	88 e2       	ldi	r24, 0x28	; 40
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	90 93 4d 07 	sts	0x074D, r25	; 0x80074d <direction+0x1>
    1934:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <direction>
    1938:	5b c0       	rjmp	.+182    	; 0x19f0 <main+0xa52>
			else if(channelMax == 4)
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	91 05       	cpc	r25, r1
    193e:	39 f4       	brne	.+14     	; 0x194e <main+0x9b0>
			direction = NORTHWEST;
    1940:	ac e2       	ldi	r26, 0x2C	; 44
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	b0 93 4d 07 	sts	0x074D, r27	; 0x80074d <direction+0x1>
    1948:	a0 93 4c 07 	sts	0x074C, r26	; 0x80074c <direction>
    194c:	51 c0       	rjmp	.+162    	; 0x19f0 <main+0xa52>
			else if(channelMax == 5)
    194e:	05 97       	sbiw	r24, 0x05	; 5
    1950:	09 f0       	breq	.+2      	; 0x1954 <main+0x9b6>
    1952:	4e c0       	rjmp	.+156    	; 0x19f0 <main+0xa52>
			direction = NORTHEAST;
    1954:	eb e0       	ldi	r30, 0x0B	; 11
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	f0 93 4d 07 	sts	0x074D, r31	; 0x80074d <direction+0x1>
    195c:	e0 93 4c 07 	sts	0x074C, r30	; 0x80074c <direction>
    1960:	47 c0       	rjmp	.+142    	; 0x19f0 <main+0xa52>
		}
		
		else if(op_mode == 2)
    1962:	02 97       	sbiw	r24, 0x02	; 2
    1964:	09 f0       	breq	.+2      	; 0x1968 <main+0x9ca>
    1966:	44 c0       	rjmp	.+136    	; 0x19f0 <main+0xa52>
		{
			printm(" ");
    1968:	83 e4       	ldi	r24, 0x43	; 67
    196a:	94 e0       	ldi	r25, 0x04	; 4
    196c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			ADC_conv(0, TRUE); printm(" | ");
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    197c:	89 e5       	ldi	r24, 0x59	; 89
    197e:	93 e0       	ldi	r25, 0x03	; 3
    1980:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			ADC_conv(1, TRUE); printm(" | ");
    1984:	61 e0       	ldi	r22, 0x01	; 1
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    1990:	89 e5       	ldi	r24, 0x59	; 89
    1992:	93 e0       	ldi	r25, 0x03	; 3
    1994:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			ADC_conv(2, TRUE); printm(" | ");
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    19a4:	89 e5       	ldi	r24, 0x59	; 89
    19a6:	93 e0       	ldi	r25, 0x03	; 3
    19a8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			ADC_conv(3, TRUE); printm(" | ");
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    19b8:	89 e5       	ldi	r24, 0x59	; 89
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			ADC_conv(4, TRUE); printm(" | ");
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	84 e0       	ldi	r24, 0x04	; 4
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
    19cc:	89 e5       	ldi	r24, 0x59	; 89
    19ce:	93 e0       	ldi	r25, 0x03	; 3
    19d0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			ADC_conv(5, TRUE);
    19d4:	61 e0       	ldi	r22, 0x01	; 1
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	85 e0       	ldi	r24, 0x05	; 5
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	0e 94 35 03 	call	0x66a	; 0x66a <ADC_conv>
			
			br();
    19e0:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    19e4:	8f ec       	ldi	r24, 0xCF	; 207
    19e6:	97 e0       	ldi	r25, 0x07	; 7
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <main+0xa4a>
    19ec:	00 c0       	rjmp	.+0      	; 0x19ee <main+0xa50>
    19ee:	00 00       	nop
			
			_delay_ms(1);
		}

		sei();
    19f0:	78 94       	sei
    19f2:	af e3       	ldi	r26, 0x3F	; 63
    19f4:	bc e9       	ldi	r27, 0x9C	; 156
    19f6:	11 97       	sbiw	r26, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <main+0xa58>
    19fa:	00 c0       	rjmp	.+0      	; 0x19fc <main+0xa5e>
    19fc:	00 00       	nop

		_delay_ms(20);

		cli();
    19fe:	f8 94       	cli
		
		
	}
    1a00:	4f cb       	rjmp	.-2402   	; 0x10a0 <main+0x102>

00001a02 <delay_ms>:
		 _delay_ms(1);
	 }
 }

void delay_us(int n) {
	  while(n--) {
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	41 f0       	breq	.+16     	; 0x1a16 <delay_ms+0x14>
    1a06:	ef ec       	ldi	r30, 0xCF	; 207
    1a08:	f7 e0       	ldi	r31, 0x07	; 7
    1a0a:	31 97       	sbiw	r30, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <delay_ms+0x8>
    1a0e:	00 c0       	rjmp	.+0      	; 0x1a10 <delay_ms+0xe>
    1a10:	00 00       	nop
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	c1 f7       	brne	.-16     	; 0x1a06 <delay_ms+0x4>
    1a16:	08 95       	ret

00001a18 <header>:
//extern 
extern unsigned int op_mode;

void header()
{
	br();
    1a18:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("=============================================");
    1a1c:	8d e5       	ldi	r24, 0x5D	; 93
    1a1e:	93 e0       	ldi	r25, 0x03	; 3
    1a20:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	br();
    1a24:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("EE498 - 1001 | Fiber Optic Sensor for CubeSat");
    1a28:	8b e8       	ldi	r24, 0x8B	; 139
    1a2a:	93 e0       	ldi	r25, 0x03	; 3
    1a2c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	br();
    1a30:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("=============================================");
    1a34:	8d e5       	ldi	r24, 0x5D	; 93
    1a36:	93 e0       	ldi	r25, 0x03	; 3
    1a38:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	br();
    1a3c:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("by: Jiayi Ren, Aaron Volpone");
    1a40:	89 eb       	ldi	r24, 0xB9	; 185
    1a42:	93 e0       	ldi	r25, 0x03	; 3
    1a44:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	br(); br();
    1a48:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    1a4c:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    1a50:	08 95       	ret

00001a52 <mainMenu>:
}

unsigned char mainMenu()	
{
    1a52:	cf 93       	push	r28
	unsigned char mm;	

	br();
    1a54:	0e 94 ad 01 	call	0x35a	; 0x35a <br>

	printm("PHOTODIODE ARRAY: ");							 br();
    1a58:	86 ed       	ldi	r24, 0xD6	; 214
    1a5a:	93 e0       	ldi	r25, 0x03	; 3
    1a5c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1a60:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("               ( 4 )   ( 5 )                 "); br();
    1a64:	89 ee       	ldi	r24, 0xE9	; 233
    1a66:	93 e0       	ldi	r25, 0x03	; 3
    1a68:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1a6c:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("                                             "); br();
    1a70:	87 e1       	ldi	r24, 0x17	; 23
    1a72:	94 e0       	ldi	r25, 0x04	; 4
    1a74:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1a78:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("           ( 3 )   ( * )   ( 0 )             "); br();
    1a7c:	85 e4       	ldi	r24, 0x45	; 69
    1a7e:	94 e0       	ldi	r25, 0x04	; 4
    1a80:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1a84:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("                                             "); br();
    1a88:	87 e1       	ldi	r24, 0x17	; 23
    1a8a:	94 e0       	ldi	r25, 0x04	; 4
    1a8c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1a90:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("               ( 2 )   ( 1 )                 "); br(); 
    1a94:	83 e7       	ldi	r24, 0x73	; 115
    1a96:	94 e0       	ldi	r25, 0x04	; 4
    1a98:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1a9c:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	
	br();
    1aa0:	0e 94 ad 01 	call	0x35a	; 0x35a <br>

	printm("OPERATING MODE: ");
    1aa4:	81 ea       	ldi	r24, 0xA1	; 161
    1aa6:	94 e0       	ldi	r25, 0x04	; 4
    1aa8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1aac:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	if(op_mode == 0) printm("ENABLED --> ");
    1ab0:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <op_mode>
    1ab4:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <op_mode+0x1>
    1ab8:	89 2b       	or	r24, r25
    1aba:	29 f4       	brne	.+10     	; 0x1ac6 <mainMenu+0x74>
    1abc:	82 eb       	ldi	r24, 0xB2	; 178
    1abe:	94 e0       	ldi	r25, 0x04	; 4
    1ac0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <mainMenu+0x7c>
	else		  printm("            ");
    1ac6:	88 e3       	ldi	r24, 0x38	; 56
    1ac8:	94 e0       	ldi	r25, 0x04	; 4
    1aca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	printm("[0] Overview mode");
    1ace:	8f eb       	ldi	r24, 0xBF	; 191
    1ad0:	94 e0       	ldi	r25, 0x04	; 4
    1ad2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1ad6:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	if(op_mode == 1) printm("ENABLED --> ");
    1ada:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <op_mode>
    1ade:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <op_mode+0x1>
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <mainMenu+0x9e>
    1ae6:	82 eb       	ldi	r24, 0xB2	; 178
    1ae8:	94 e0       	ldi	r25, 0x04	; 4
    1aea:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1aee:	04 c0       	rjmp	.+8      	; 0x1af8 <mainMenu+0xa6>
	else		  printm("            ");
    1af0:	88 e3       	ldi	r24, 0x38	; 56
    1af2:	94 e0       	ldi	r25, 0x04	; 4
    1af4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	printm("[1] Testbench mode");
    1af8:	81 ed       	ldi	r24, 0xD1	; 209
    1afa:	94 e0       	ldi	r25, 0x04	; 4
    1afc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1b00:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	if(op_mode == 2) printm("ENABLED --> ");
    1b04:	80 91 48 07 	lds	r24, 0x0748	; 0x800748 <op_mode>
    1b08:	90 91 49 07 	lds	r25, 0x0749	; 0x800749 <op_mode+0x1>
    1b0c:	02 97       	sbiw	r24, 0x02	; 2
    1b0e:	29 f4       	brne	.+10     	; 0x1b1a <mainMenu+0xc8>
    1b10:	82 eb       	ldi	r24, 0xB2	; 178
    1b12:	94 e0       	ldi	r25, 0x04	; 4
    1b14:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1b18:	04 c0       	rjmp	.+8      	; 0x1b22 <mainMenu+0xd0>
	else		  printm("            ");
    1b1a:	88 e3       	ldi	r24, 0x38	; 56
    1b1c:	94 e0       	ldi	r25, 0x04	; 4
    1b1e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	printm("[2] ADC debug mode");
    1b22:	84 ee       	ldi	r24, 0xE4	; 228
    1b24:	94 e0       	ldi	r25, 0x04	; 4
    1b26:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br(); br(); 
    1b2a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    1b2e:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("- - - - - - - - - - - - - - - - - - - - - - -");
    1b32:	87 ef       	ldi	r24, 0xF7	; 247
    1b34:	94 e0       	ldi	r25, 0x04	; 4
    1b36:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1b3a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("Options:");
    1b3e:	85 e2       	ldi	r24, 0x25	; 37
    1b40:	95 e0       	ldi	r25, 0x05	; 5
    1b42:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1b46:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[a] ADC configuration options");
    1b4a:	8e e2       	ldi	r24, 0x2E	; 46
    1b4c:	95 e0       	ldi	r25, 0x05	; 5
    1b4e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1b52:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[d] Diagnostic options");
    1b56:	8c e4       	ldi	r24, 0x4C	; 76
    1b58:	95 e0       	ldi	r25, 0x05	; 5
    1b5a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1b5e:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[p] Power options");
    1b62:	83 e6       	ldi	r24, 0x63	; 99
    1b64:	95 e0       	ldi	r25, 0x05	; 5
    1b66:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1b6a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[r] Software reset");
    1b6e:	85 e7       	ldi	r24, 0x75	; 117
    1b70:	95 e0       	ldi	r25, 0x05	; 5
    1b72:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br(); br();
    1b76:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    1b7a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[x] Exit to operation mode screen. . .");
    1b7e:	88 e8       	ldi	r24, 0x88	; 136
    1b80:	95 e0       	ldi	r25, 0x05	; 5
    1b82:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1b86:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	br();
    1b8a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("> ");
    1b8e:	8c eb       	ldi	r24, 0xBC	; 188
    1b90:	94 e0       	ldi	r25, 0x04	; 4
    1b92:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	mm = UART_getChar();	
    1b96:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_getChar>
    1b9a:	c8 2f       	mov	r28, r24

	printc(mm);
    1b9c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>

	return mm;
}
    1ba0:	8c 2f       	mov	r24, r28
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <calibrationMenu>:
extern unsigned int AD_global_offset_sign;
extern float AD_offset[ADC_NUM];


void calibrationMenu()
{
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
	unsigned char selection;
	unsigned int leave;
	unsigned char *global_offset = (unsigned char *) malloc(sizeof(char)*8);
    1bae:	88 e0       	ldi	r24, 0x08	; 8
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <malloc>
    1bb6:	ec 01       	movw	r28, r24
	unsigned char *channel_offset = (unsigned char *) malloc(sizeof(char)*8);
    1bb8:	88 e0       	ldi	r24, 0x08	; 8
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 79 12 	call	0x24f2	; 0x24f2 <malloc>
    1bc0:	8c 01       	movw	r16, r24
	int ADC_offset_voltage;
	unsigned char ADC_pick;
	int ADC_pick_int;
	
	br();
    1bc2:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("\n\rSelect a global offset option: ");
    1bc6:	8f ea       	ldi	r24, 0xAF	; 175
    1bc8:	95 e0       	ldi	r25, 0x05	; 5
    1bca:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1bce:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[1] Global ADC voltage offset");
    1bd2:	81 ed       	ldi	r24, 0xD1	; 209
    1bd4:	95 e0       	ldi	r25, 0x05	; 5
    1bd6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1bda:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[2] ADC channel offset offset");
    1bde:	8f ee       	ldi	r24, 0xEF	; 239
    1be0:	95 e0       	ldi	r25, 0x05	; 5
    1be2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	br();
    1be6:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[3] Enable/disable ADC channels");
    1bea:	8d e0       	ldi	r24, 0x0D	; 13
    1bec:	96 e0       	ldi	r25, 0x06	; 6
    1bee:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1bf2:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[b] Back to main menu");
    1bf6:	8d e2       	ldi	r24, 0x2D	; 45
    1bf8:	96 e0       	ldi	r25, 0x06	; 6
    1bfa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1bfe:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	br();
    1c02:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("> ");
    1c06:	8c eb       	ldi	r24, 0xBC	; 188
    1c08:	94 e0       	ldi	r25, 0x04	; 4
    1c0a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	do
	{
		selection = UART_getChar();
    1c0e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_getChar>
	
		switch (selection){
    1c12:	82 33       	cpi	r24, 0x32	; 50
    1c14:	b9 f1       	breq	.+110    	; 0x1c84 <calibrationMenu+0xde>
    1c16:	18 f4       	brcc	.+6      	; 0x1c1e <calibrationMenu+0x78>
    1c18:	81 33       	cpi	r24, 0x31	; 49
    1c1a:	41 f0       	breq	.+16     	; 0x1c2c <calibrationMenu+0x86>
    1c1c:	c8 c0       	rjmp	.+400    	; 0x1dae <calibrationMenu+0x208>
    1c1e:	83 33       	cpi	r24, 0x33	; 51
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <calibrationMenu+0x7e>
    1c22:	72 c0       	rjmp	.+228    	; 0x1d08 <calibrationMenu+0x162>
    1c24:	82 36       	cpi	r24, 0x62	; 98
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <calibrationMenu+0x84>
    1c28:	ac c0       	rjmp	.+344    	; 0x1d82 <calibrationMenu+0x1dc>
    1c2a:	c1 c0       	rjmp	.+386    	; 0x1dae <calibrationMenu+0x208>
			case '1':
			printc(selection);
    1c2c:	81 e3       	ldi	r24, 0x31	; 49
    1c2e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			br();
    1c32:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			br();
    1c36:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("Enter a global voltage offset: (in mV)");
    1c3a:	83 e4       	ldi	r24, 0x43	; 67
    1c3c:	96 e0       	ldi	r25, 0x06	; 6
    1c3e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			br();
    1c42:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("> ");
    1c46:	8c eb       	ldi	r24, 0xBC	; 188
    1c48:	94 e0       	ldi	r25, 0x04	; 4
    1c4a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			scanm(global_offset);
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 8f 01 	call	0x31e	; 0x31e <scanm>
			float global_offset_float = atof(global_offset);
    1c54:	ce 01       	movw	r24, r28
    1c56:	0e 94 a6 13 	call	0x274c	; 0x274c <atof>

			global_offset_float /= 1000;
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a e7       	ldi	r20, 0x7A	; 122
    1c60:	54 e4       	ldi	r21, 0x44	; 68
    1c62:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divsf3>

			AD_global_offset = global_offset_float;
    1c66:	60 93 4e 07 	sts	0x074E, r22	; 0x80074e <AD_global_offset>
    1c6a:	70 93 4f 07 	sts	0x074F, r23	; 0x80074f <AD_global_offset+0x1>
    1c6e:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <AD_global_offset+0x2>
    1c72:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <AD_global_offset+0x3>
			
			leave = 1;
			br();
    1c76:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			screenClr();
    1c7a:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
			header();
    1c7e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
			break;
    1c82:	9c c0       	rjmp	.+312    	; 0x1dbc <calibrationMenu+0x216>

			case '2':
			printc(selection);
    1c84:	82 e3       	ldi	r24, 0x32	; 50
    1c86:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			br();
    1c8a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			br();
    1c8e:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("Enter a channel to change: (0 to 5)");
    1c92:	8a e6       	ldi	r24, 0x6A	; 106
    1c94:	96 e0       	ldi	r25, 0x06	; 6
    1c96:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			br();
    1c9a:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("> ");
    1c9e:	8c eb       	ldi	r24, 0xBC	; 188
    1ca0:	94 e0       	ldi	r25, 0x04	; 4
    1ca2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			ADC_pick = UART_getChar();
    1ca6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_getChar>
    1caa:	c8 2f       	mov	r28, r24
			printc(ADC_pick);
    1cac:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			
			ADC_pick_int = ADC_pick - '0';

			br(); br();
    1cb0:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    1cb4:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("Enter the channel voltage offset: (in mV)");
    1cb8:	8e e8       	ldi	r24, 0x8E	; 142
    1cba:	96 e0       	ldi	r25, 0x06	; 6
    1cbc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			br();
    1cc0:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("> ");
    1cc4:	8c eb       	ldi	r24, 0xBC	; 188
    1cc6:	94 e0       	ldi	r25, 0x04	; 4
    1cc8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			scanm(channel_offset);
    1ccc:	c8 01       	movw	r24, r16
    1cce:	0e 94 8f 01 	call	0x31e	; 0x31e <scanm>
			float ADC_offset_voltage_float = atof(channel_offset);
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	0e 94 a6 13 	call	0x274c	; 0x274c <atof>
			printm("> ");

			ADC_pick = UART_getChar();
			printc(ADC_pick);
			
			ADC_pick_int = ADC_pick - '0';
    1cd8:	d0 e0       	ldi	r29, 0x00	; 0
			scanm(channel_offset);
			float ADC_offset_voltage_float = atof(channel_offset);

			ADC_offset_voltage_float /= 1000;

			AD_offset[ADC_pick_int] = ADC_offset_voltage_float;
    1cda:	cc 0f       	add	r28, r28
    1cdc:	dd 1f       	adc	r29, r29
    1cde:	cc 0f       	add	r28, r28
    1ce0:	dd 1f       	adc	r29, r29
    1ce2:	c4 5b       	subi	r28, 0xB4	; 180
    1ce4:	df 4f       	sbci	r29, 0xFF	; 255
			printm("> ");

			scanm(channel_offset);
			float ADC_offset_voltage_float = atof(channel_offset);

			ADC_offset_voltage_float /= 1000;
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a e7       	ldi	r20, 0x7A	; 122
    1cec:	54 e4       	ldi	r21, 0x44	; 68
    1cee:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divsf3>

			AD_offset[ADC_pick_int] = ADC_offset_voltage_float;
    1cf2:	68 83       	st	Y, r22
    1cf4:	79 83       	std	Y+1, r23	; 0x01
    1cf6:	8a 83       	std	Y+2, r24	; 0x02
    1cf8:	9b 83       	std	Y+3, r25	; 0x03

			leave = 1;
			br();
    1cfa:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			screenClr();
    1cfe:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
			header();
    1d02:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
			break;
    1d06:	5a c0       	rjmp	.+180    	; 0x1dbc <calibrationMenu+0x216>

			case '3':
			printc(selection);
    1d08:	83 e3       	ldi	r24, 0x33	; 51
    1d0a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			br();
    1d0e:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			br();
    1d12:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("Enter a channel to toggle ON or OFF: (0 to 5)");
    1d16:	88 eb       	ldi	r24, 0xB8	; 184
    1d18:	96 e0       	ldi	r25, 0x06	; 6
    1d1a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
			br();
    1d1e:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			printm("> ");
    1d22:	8c eb       	ldi	r24, 0xBC	; 188
    1d24:	94 e0       	ldi	r25, 0x04	; 4
    1d26:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

			ADC_pick = UART_getChar();
    1d2a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_getChar>
    1d2e:	c8 2f       	mov	r28, r24
			printc(ADC_pick);
    1d30:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			
			ADC_pick_int = ADC_pick - '0';
    1d34:	8c 2f       	mov	r24, r28
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	c0 97       	sbiw	r24, 0x30	; 48

			if(ADC_en[ADC_pick_int] == ON)
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	ee 0f       	add	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	ec 5d       	subi	r30, 0xDC	; 220
    1d42:	fe 4f       	sbci	r31, 0xFE	; 254
    1d44:	20 81       	ld	r18, Z
    1d46:	31 81       	ldd	r19, Z+1	; 0x01
    1d48:	21 30       	cpi	r18, 0x01	; 1
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	41 f4       	brne	.+16     	; 0x1d5e <calibrationMenu+0x1b8>
				ADC_en[ADC_pick_int] = OFF;
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	fc 01       	movw	r30, r24
    1d54:	ec 5d       	subi	r30, 0xDC	; 220
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	11 82       	std	Z+1, r1	; 0x01
    1d5a:	10 82       	st	Z, r1
    1d5c:	0b c0       	rjmp	.+22     	; 0x1d74 <calibrationMenu+0x1ce>
			else if(ADC_en[ADC_pick_int] == OFF)
    1d5e:	23 2b       	or	r18, r19
    1d60:	49 f4       	brne	.+18     	; 0x1d74 <calibrationMenu+0x1ce>
				ADC_en[ADC_pick_int] = ON;
    1d62:	88 0f       	add	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	fc 01       	movw	r30, r24
    1d68:	ec 5d       	subi	r30, 0xDC	; 220
    1d6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	80 83       	st	Z, r24

			leave = 1;

			br();
    1d74:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			screenClr();
    1d78:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
			header();
    1d7c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
			break;
    1d80:	1d c0       	rjmp	.+58     	; 0x1dbc <calibrationMenu+0x216>
    1d82:	8f ec       	ldi	r24, 0xCF	; 207
    1d84:	97 e0       	ldi	r25, 0x07	; 7
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <calibrationMenu+0x1e0>
    1d8a:	00 c0       	rjmp	.+0      	; 0x1d8c <calibrationMenu+0x1e6>
    1d8c:	00 00       	nop

			case 'b':
			_delay_ms(1);
			printc(selection);
    1d8e:	82 e6       	ldi	r24, 0x62	; 98
    1d90:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			leave = 1;
			br();
    1d94:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
			screenClr();
    1d98:	0e 94 b6 01 	call	0x36c	; 0x36c <screenClr>
			header();
    1d9c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <header>
    1da0:	8f ec       	ldi	r24, 0xCF	; 207
    1da2:	97 e0       	ldi	r25, 0x07	; 7
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <calibrationMenu+0x1fe>
    1da8:	00 c0       	rjmp	.+0      	; 0x1daa <calibrationMenu+0x204>
    1daa:	00 00       	nop
    1dac:	07 c0       	rjmp	.+14     	; 0x1dbc <calibrationMenu+0x216>
    1dae:	8f ec       	ldi	r24, 0xCF	; 207
    1db0:	97 e0       	ldi	r25, 0x07	; 7
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <calibrationMenu+0x20c>
    1db6:	00 c0       	rjmp	.+0      	; 0x1db8 <calibrationMenu+0x212>
    1db8:	00 00       	nop
    1dba:	29 cf       	rjmp	.-430    	; 0x1c0e <calibrationMenu+0x68>
			leave = 0;
			_delay_ms(1);
			break;
		}
	} while(!leave);
}
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <diagnosticMenu>:

void diagnosticMenu()
{
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
	unsigned char selection;
	unsigned int leave;
	unsigned char *global_offset = (unsigned char *) malloc(sizeof(char)*8);
    1dca:	88 e0       	ldi	r24, 0x08	; 8
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 79 12 	call	0x24f2	; 0x24f2 <malloc>
    1dd2:	ec 01       	movw	r28, r24
	
	br();
    1dd4:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("\n\rSelect a global offset option: ");
    1dd8:	8f ea       	ldi	r24, 0xAF	; 175
    1dda:	95 e0       	ldi	r25, 0x05	; 5
    1ddc:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1de0:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[1] Global ADC voltage offset");
    1de4:	81 ed       	ldi	r24, 0xD1	; 209
    1de6:	95 e0       	ldi	r25, 0x05	; 5
    1de8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1dec:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[2] ADC channel offset offset");
    1df0:	8f ee       	ldi	r24, 0xEF	; 239
    1df2:	95 e0       	ldi	r25, 0x05	; 5
    1df4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1df8:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("[b] Back to main menu");
    1dfc:	8d e2       	ldi	r24, 0x2D	; 45
    1dfe:	96 e0       	ldi	r25, 0x06	; 6
    1e00:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	br();
    1e04:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	br();
    1e08:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
	printm("> ");
    1e0c:	8c eb       	ldi	r24, 0xBC	; 188
    1e0e:	94 e0       	ldi	r25, 0x04	; 4
    1e10:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	do
	{
		selection = UART_getChar();
    1e14:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_getChar>
	
		switch (selection){
    1e18:	82 33       	cpi	r24, 0x32	; 50
    1e1a:	59 f1       	breq	.+86     	; 0x1e72 <diagnosticMenu+0xac>
    1e1c:	82 36       	cpi	r24, 0x62	; 98
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <diagnosticMenu+0x5c>
    1e20:	47 c0       	rjmp	.+142    	; 0x1eb0 <diagnosticMenu+0xea>
    1e22:	81 33       	cpi	r24, 0x31	; 49
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <diagnosticMenu+0x62>
    1e26:	56 c0       	rjmp	.+172    	; 0x1ed4 <diagnosticMenu+0x10e>
			case '1':
			printc(selection);
    1e28:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
				br();
    1e2c:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
				br();
    1e30:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
				printm("Enter a global voltage offset: (in mV)");
    1e34:	83 e4       	ldi	r24, 0x43	; 67
    1e36:	96 e0       	ldi	r25, 0x06	; 6
    1e38:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
				br();
    1e3c:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
				printm("> ");
    1e40:	8c eb       	ldi	r24, 0xBC	; 188
    1e42:	94 e0       	ldi	r25, 0x04	; 4
    1e44:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

				
				scanm(global_offset);
    1e48:	ce 01       	movw	r24, r28
    1e4a:	0e 94 8f 01 	call	0x31e	; 0x31e <scanm>
				float global_offset_float = atof(global_offset);
    1e4e:	ce 01       	movw	r24, r28
    1e50:	0e 94 a6 13 	call	0x274c	; 0x274c <atof>

				global_offset_float /= 1000;
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	4a e7       	ldi	r20, 0x7A	; 122
    1e5a:	54 e4       	ldi	r21, 0x44	; 68
    1e5c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divsf3>

				AD_global_offset = global_offset_float;
    1e60:	60 93 4e 07 	sts	0x074E, r22	; 0x80074e <AD_global_offset>
    1e64:	70 93 4f 07 	sts	0x074F, r23	; 0x80074f <AD_global_offset+0x1>
    1e68:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <AD_global_offset+0x2>
    1e6c:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <AD_global_offset+0x3>
			set_sleep_mode(SLEEP_MODE_PWR_SAVE);
			sleep_mode();
			_delay_ms(1);
			*/
			leave = 1;
			break;
    1e70:	38 c0       	rjmp	.+112    	; 0x1ee2 <diagnosticMenu+0x11c>
			case '2':
			printc(selection);
    1e72:	82 e3       	ldi	r24, 0x32	; 50
    1e74:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			printm("\n\rPress hardware button to wake");
    1e78:	86 ee       	ldi	r24, 0xE6	; 230
    1e7a:	96 e0       	ldi	r25, 0x06	; 6
    1e7c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1e80:	8f e1       	ldi	r24, 0x1F	; 31
    1e82:	9e e4       	ldi	r25, 0x4E	; 78
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <diagnosticMenu+0xbe>
    1e88:	00 c0       	rjmp	.+0      	; 0x1e8a <diagnosticMenu+0xc4>
    1e8a:	00 00       	nop
			_delay_ms(10);
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    1e8c:	93 b7       	in	r25, 0x33	; 51
    1e8e:	91 7f       	andi	r25, 0xF1	; 241
    1e90:	94 60       	ori	r25, 0x04	; 4
    1e92:	93 bf       	out	0x33, r25	; 51
			sleep_mode();
    1e94:	93 b7       	in	r25, 0x33	; 51
    1e96:	91 60       	ori	r25, 0x01	; 1
    1e98:	93 bf       	out	0x33, r25	; 51
    1e9a:	88 95       	sleep
    1e9c:	93 b7       	in	r25, 0x33	; 51
    1e9e:	9e 7f       	andi	r25, 0xFE	; 254
    1ea0:	93 bf       	out	0x33, r25	; 51
    1ea2:	8f ec       	ldi	r24, 0xCF	; 207
    1ea4:	97 e0       	ldi	r25, 0x07	; 7
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <diagnosticMenu+0xe0>
    1eaa:	00 c0       	rjmp	.+0      	; 0x1eac <diagnosticMenu+0xe6>
    1eac:	00 00       	nop
    1eae:	b2 cf       	rjmp	.-156    	; 0x1e14 <diagnosticMenu+0x4e>
    1eb0:	8f ec       	ldi	r24, 0xCF	; 207
    1eb2:	97 e0       	ldi	r25, 0x07	; 7
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <diagnosticMenu+0xee>
    1eb8:	00 c0       	rjmp	.+0      	; 0x1eba <diagnosticMenu+0xf4>
    1eba:	00 00       	nop
			_delay_ms(1);
			break;
			case 'b':
			_delay_ms(1);
			printc(selection);
    1ebc:	82 e6       	ldi	r24, 0x62	; 98
    1ebe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			leave = 1;
			br();
    1ec2:	0e 94 ad 01 	call	0x35a	; 0x35a <br>
    1ec6:	8f ec       	ldi	r24, 0xCF	; 207
    1ec8:	97 e0       	ldi	r25, 0x07	; 7
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <diagnosticMenu+0x104>
    1ece:	00 c0       	rjmp	.+0      	; 0x1ed0 <diagnosticMenu+0x10a>
    1ed0:	00 00       	nop
    1ed2:	07 c0       	rjmp	.+14     	; 0x1ee2 <diagnosticMenu+0x11c>
    1ed4:	8f ec       	ldi	r24, 0xCF	; 207
    1ed6:	97 e0       	ldi	r25, 0x07	; 7
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <diagnosticMenu+0x112>
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <diagnosticMenu+0x118>
    1ede:	00 00       	nop
    1ee0:	99 cf       	rjmp	.-206    	; 0x1e14 <diagnosticMenu+0x4e>
			leave = 0;
			_delay_ms(1);
			break;
		}
	} while(!leave);
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	08 95       	ret

00001ee8 <powerModes>:
void powerModes()	
{
	unsigned char selection;	
	unsigned int leave;

	printc('\n');
    1ee8:	8a e0       	ldi	r24, 0x0A	; 10
    1eea:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('\r');
    1eee:	8d e0       	ldi	r24, 0x0D	; 13
    1ef0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printm("\n\rSelect a sleep option: ");	
    1ef4:	86 e0       	ldi	r24, 0x06	; 6
    1ef6:	97 e0       	ldi	r25, 0x07	; 7
    1ef8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
	
	printc('\n');
    1efc:	8a e0       	ldi	r24, 0x0A	; 10
    1efe:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('\r');
    1f02:	8d e0       	ldi	r24, 0x0D	; 13
    1f04:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printm("[1] Sleep");
    1f08:	80 e2       	ldi	r24, 0x20	; 32
    1f0a:	97 e0       	ldi	r25, 0x07	; 7
    1f0c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	printc('\n');
    1f10:	8a e0       	ldi	r24, 0x0A	; 10
    1f12:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('\r');
    1f16:	8d e0       	ldi	r24, 0x0D	; 13
    1f18:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printm("[2] Power down");
    1f1c:	8a e2       	ldi	r24, 0x2A	; 42
    1f1e:	97 e0       	ldi	r25, 0x07	; 7
    1f20:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	printc('\n');
    1f24:	8a e0       	ldi	r24, 0x0A	; 10
    1f26:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('\r');
    1f2a:	8d e0       	ldi	r24, 0x0D	; 13
    1f2c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printm("[b] Back to main menu");
    1f30:	8d e2       	ldi	r24, 0x2D	; 45
    1f32:	96 e0       	ldi	r25, 0x06	; 6
    1f34:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	printc('\n');
    1f38:	8a e0       	ldi	r24, 0x0A	; 10
    1f3a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('\r');
    1f3e:	8d e0       	ldi	r24, 0x0D	; 13
    1f40:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('\n');
    1f44:	8a e0       	ldi	r24, 0x0A	; 10
    1f46:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printc('\r');
    1f4a:	8d e0       	ldi	r24, 0x0D	; 13
    1f4c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
	printm("> ");
    1f50:	8c eb       	ldi	r24, 0xBC	; 188
    1f52:	94 e0       	ldi	r25, 0x04	; 4
    1f54:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>

	do
	{
		selection = UART_getChar();
    1f58:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_getChar>

		switch (selection){
    1f5c:	82 33       	cpi	r24, 0x32	; 50
    1f5e:	21 f1       	breq	.+72     	; 0x1fa8 <powerModes+0xc0>
    1f60:	82 36       	cpi	r24, 0x62	; 98
    1f62:	09 f4       	brne	.+2      	; 0x1f66 <powerModes+0x7e>
    1f64:	40 c0       	rjmp	.+128    	; 0x1fe6 <powerModes+0xfe>
    1f66:	81 33       	cpi	r24, 0x31	; 49
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <powerModes+0x84>
    1f6a:	4d c0       	rjmp	.+154    	; 0x2006 <powerModes+0x11e>
			case '1':
			printc(selection);
    1f6c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			printm("\n\rPress hardware button to wake");
    1f70:	86 ee       	ldi	r24, 0xE6	; 230
    1f72:	96 e0       	ldi	r25, 0x06	; 6
    1f74:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1f78:	8f e1       	ldi	r24, 0x1F	; 31
    1f7a:	9e e4       	ldi	r25, 0x4E	; 78
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <powerModes+0x94>
    1f80:	00 c0       	rjmp	.+0      	; 0x1f82 <powerModes+0x9a>
    1f82:	00 00       	nop
			_delay_ms(10);
			set_sleep_mode(SLEEP_MODE_PWR_SAVE);	
    1f84:	83 b7       	in	r24, 0x33	; 51
    1f86:	81 7f       	andi	r24, 0xF1	; 241
    1f88:	86 60       	ori	r24, 0x06	; 6
    1f8a:	83 bf       	out	0x33, r24	; 51
			sleep_mode();	
    1f8c:	83 b7       	in	r24, 0x33	; 51
    1f8e:	81 60       	ori	r24, 0x01	; 1
    1f90:	83 bf       	out	0x33, r24	; 51
    1f92:	88 95       	sleep
    1f94:	83 b7       	in	r24, 0x33	; 51
    1f96:	8e 7f       	andi	r24, 0xFE	; 254
    1f98:	83 bf       	out	0x33, r24	; 51
    1f9a:	8f ec       	ldi	r24, 0xCF	; 207
    1f9c:	97 e0       	ldi	r25, 0x07	; 7
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <powerModes+0xb6>
    1fa2:	00 c0       	rjmp	.+0      	; 0x1fa4 <powerModes+0xbc>
    1fa4:	00 00       	nop
    1fa6:	d8 cf       	rjmp	.-80     	; 0x1f58 <powerModes+0x70>
			_delay_ms(1);
			break;
			case '2':
			printc(selection);
    1fa8:	82 e3       	ldi	r24, 0x32	; 50
    1faa:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
			printm("\n\rPress hardware button to wake");
    1fae:	86 ee       	ldi	r24, 0xE6	; 230
    1fb0:	96 e0       	ldi	r25, 0x06	; 6
    1fb2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <printm>
    1fb6:	8f e1       	ldi	r24, 0x1F	; 31
    1fb8:	9e e4       	ldi	r25, 0x4E	; 78
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <powerModes+0xd2>
    1fbe:	00 c0       	rjmp	.+0      	; 0x1fc0 <powerModes+0xd8>
    1fc0:	00 00       	nop
			_delay_ms(10);
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);	
    1fc2:	83 b7       	in	r24, 0x33	; 51
    1fc4:	81 7f       	andi	r24, 0xF1	; 241
    1fc6:	84 60       	ori	r24, 0x04	; 4
    1fc8:	83 bf       	out	0x33, r24	; 51
			sleep_mode();
    1fca:	83 b7       	in	r24, 0x33	; 51
    1fcc:	81 60       	ori	r24, 0x01	; 1
    1fce:	83 bf       	out	0x33, r24	; 51
    1fd0:	88 95       	sleep
    1fd2:	83 b7       	in	r24, 0x33	; 51
    1fd4:	8e 7f       	andi	r24, 0xFE	; 254
    1fd6:	83 bf       	out	0x33, r24	; 51
    1fd8:	8f ec       	ldi	r24, 0xCF	; 207
    1fda:	97 e0       	ldi	r25, 0x07	; 7
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <powerModes+0xf4>
    1fe0:	00 c0       	rjmp	.+0      	; 0x1fe2 <powerModes+0xfa>
    1fe2:	00 00       	nop
    1fe4:	b9 cf       	rjmp	.-142    	; 0x1f58 <powerModes+0x70>
    1fe6:	8f ec       	ldi	r24, 0xCF	; 207
    1fe8:	97 e0       	ldi	r25, 0x07	; 7
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <powerModes+0x102>
    1fee:	00 c0       	rjmp	.+0      	; 0x1ff0 <powerModes+0x108>
    1ff0:	00 00       	nop
			_delay_ms(1);
			break;
			case 'b':
			_delay_ms(1);
			printc(selection);
    1ff2:	82 e6       	ldi	r24, 0x62	; 98
    1ff4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <printc>
    1ff8:	8f ec       	ldi	r24, 0xCF	; 207
    1ffa:	97 e0       	ldi	r25, 0x07	; 7
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <powerModes+0x114>
    2000:	00 c0       	rjmp	.+0      	; 0x2002 <powerModes+0x11a>
    2002:	00 00       	nop
    2004:	08 95       	ret
    2006:	8f ec       	ldi	r24, 0xCF	; 207
    2008:	97 e0       	ldi	r25, 0x07	; 7
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <powerModes+0x122>
    200e:	00 c0       	rjmp	.+0      	; 0x2010 <powerModes+0x128>
    2010:	00 00       	nop
    2012:	a2 cf       	rjmp	.-188    	; 0x1f58 <powerModes+0x70>

00002014 <__subsf3>:
    2014:	50 58       	subi	r21, 0x80	; 128

00002016 <__addsf3>:
    2016:	bb 27       	eor	r27, r27
    2018:	aa 27       	eor	r26, r26
    201a:	0e 94 22 10 	call	0x2044	; 0x2044 <__addsf3x>
    201e:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__fp_round>
    2022:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fp_pscA>
    2026:	38 f0       	brcs	.+14     	; 0x2036 <__addsf3+0x20>
    2028:	0e 94 5f 11 	call	0x22be	; 0x22be <__fp_pscB>
    202c:	20 f0       	brcs	.+8      	; 0x2036 <__addsf3+0x20>
    202e:	39 f4       	brne	.+14     	; 0x203e <__addsf3+0x28>
    2030:	9f 3f       	cpi	r25, 0xFF	; 255
    2032:	19 f4       	brne	.+6      	; 0x203a <__addsf3+0x24>
    2034:	26 f4       	brtc	.+8      	; 0x203e <__addsf3+0x28>
    2036:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__fp_nan>
    203a:	0e f4       	brtc	.+2      	; 0x203e <__addsf3+0x28>
    203c:	e0 95       	com	r30
    203e:	e7 fb       	bst	r30, 7
    2040:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_inf>

00002044 <__addsf3x>:
    2044:	e9 2f       	mov	r30, r25
    2046:	0e 94 77 11 	call	0x22ee	; 0x22ee <__fp_split3>
    204a:	58 f3       	brcs	.-42     	; 0x2022 <__addsf3+0xc>
    204c:	ba 17       	cp	r27, r26
    204e:	62 07       	cpc	r22, r18
    2050:	73 07       	cpc	r23, r19
    2052:	84 07       	cpc	r24, r20
    2054:	95 07       	cpc	r25, r21
    2056:	20 f0       	brcs	.+8      	; 0x2060 <__addsf3x+0x1c>
    2058:	79 f4       	brne	.+30     	; 0x2078 <__addsf3x+0x34>
    205a:	a6 f5       	brtc	.+104    	; 0x20c4 <__addsf3x+0x80>
    205c:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__fp_zero>
    2060:	0e f4       	brtc	.+2      	; 0x2064 <__addsf3x+0x20>
    2062:	e0 95       	com	r30
    2064:	0b 2e       	mov	r0, r27
    2066:	ba 2f       	mov	r27, r26
    2068:	a0 2d       	mov	r26, r0
    206a:	0b 01       	movw	r0, r22
    206c:	b9 01       	movw	r22, r18
    206e:	90 01       	movw	r18, r0
    2070:	0c 01       	movw	r0, r24
    2072:	ca 01       	movw	r24, r20
    2074:	a0 01       	movw	r20, r0
    2076:	11 24       	eor	r1, r1
    2078:	ff 27       	eor	r31, r31
    207a:	59 1b       	sub	r21, r25
    207c:	99 f0       	breq	.+38     	; 0x20a4 <__addsf3x+0x60>
    207e:	59 3f       	cpi	r21, 0xF9	; 249
    2080:	50 f4       	brcc	.+20     	; 0x2096 <__addsf3x+0x52>
    2082:	50 3e       	cpi	r21, 0xE0	; 224
    2084:	68 f1       	brcs	.+90     	; 0x20e0 <__addsf3x+0x9c>
    2086:	1a 16       	cp	r1, r26
    2088:	f0 40       	sbci	r31, 0x00	; 0
    208a:	a2 2f       	mov	r26, r18
    208c:	23 2f       	mov	r18, r19
    208e:	34 2f       	mov	r19, r20
    2090:	44 27       	eor	r20, r20
    2092:	58 5f       	subi	r21, 0xF8	; 248
    2094:	f3 cf       	rjmp	.-26     	; 0x207c <__addsf3x+0x38>
    2096:	46 95       	lsr	r20
    2098:	37 95       	ror	r19
    209a:	27 95       	ror	r18
    209c:	a7 95       	ror	r26
    209e:	f0 40       	sbci	r31, 0x00	; 0
    20a0:	53 95       	inc	r21
    20a2:	c9 f7       	brne	.-14     	; 0x2096 <__addsf3x+0x52>
    20a4:	7e f4       	brtc	.+30     	; 0x20c4 <__addsf3x+0x80>
    20a6:	1f 16       	cp	r1, r31
    20a8:	ba 0b       	sbc	r27, r26
    20aa:	62 0b       	sbc	r22, r18
    20ac:	73 0b       	sbc	r23, r19
    20ae:	84 0b       	sbc	r24, r20
    20b0:	ba f0       	brmi	.+46     	; 0x20e0 <__addsf3x+0x9c>
    20b2:	91 50       	subi	r25, 0x01	; 1
    20b4:	a1 f0       	breq	.+40     	; 0x20de <__addsf3x+0x9a>
    20b6:	ff 0f       	add	r31, r31
    20b8:	bb 1f       	adc	r27, r27
    20ba:	66 1f       	adc	r22, r22
    20bc:	77 1f       	adc	r23, r23
    20be:	88 1f       	adc	r24, r24
    20c0:	c2 f7       	brpl	.-16     	; 0x20b2 <__addsf3x+0x6e>
    20c2:	0e c0       	rjmp	.+28     	; 0x20e0 <__addsf3x+0x9c>
    20c4:	ba 0f       	add	r27, r26
    20c6:	62 1f       	adc	r22, r18
    20c8:	73 1f       	adc	r23, r19
    20ca:	84 1f       	adc	r24, r20
    20cc:	48 f4       	brcc	.+18     	; 0x20e0 <__addsf3x+0x9c>
    20ce:	87 95       	ror	r24
    20d0:	77 95       	ror	r23
    20d2:	67 95       	ror	r22
    20d4:	b7 95       	ror	r27
    20d6:	f7 95       	ror	r31
    20d8:	9e 3f       	cpi	r25, 0xFE	; 254
    20da:	08 f0       	brcs	.+2      	; 0x20de <__addsf3x+0x9a>
    20dc:	b0 cf       	rjmp	.-160    	; 0x203e <__addsf3+0x28>
    20de:	93 95       	inc	r25
    20e0:	88 0f       	add	r24, r24
    20e2:	08 f0       	brcs	.+2      	; 0x20e6 <__addsf3x+0xa2>
    20e4:	99 27       	eor	r25, r25
    20e6:	ee 0f       	add	r30, r30
    20e8:	97 95       	ror	r25
    20ea:	87 95       	ror	r24
    20ec:	08 95       	ret

000020ee <__cmpsf2>:
    20ee:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_cmp>
    20f2:	08 f4       	brcc	.+2      	; 0x20f6 <__cmpsf2+0x8>
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	08 95       	ret

000020f8 <__divsf3>:
    20f8:	0e 94 90 10 	call	0x2120	; 0x2120 <__divsf3x>
    20fc:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__fp_round>
    2100:	0e 94 5f 11 	call	0x22be	; 0x22be <__fp_pscB>
    2104:	58 f0       	brcs	.+22     	; 0x211c <__divsf3+0x24>
    2106:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fp_pscA>
    210a:	40 f0       	brcs	.+16     	; 0x211c <__divsf3+0x24>
    210c:	29 f4       	brne	.+10     	; 0x2118 <__divsf3+0x20>
    210e:	5f 3f       	cpi	r21, 0xFF	; 255
    2110:	29 f0       	breq	.+10     	; 0x211c <__divsf3+0x24>
    2112:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_inf>
    2116:	51 11       	cpse	r21, r1
    2118:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__fp_szero>
    211c:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__fp_nan>

00002120 <__divsf3x>:
    2120:	0e 94 77 11 	call	0x22ee	; 0x22ee <__fp_split3>
    2124:	68 f3       	brcs	.-38     	; 0x2100 <__divsf3+0x8>

00002126 <__divsf3_pse>:
    2126:	99 23       	and	r25, r25
    2128:	b1 f3       	breq	.-20     	; 0x2116 <__divsf3+0x1e>
    212a:	55 23       	and	r21, r21
    212c:	91 f3       	breq	.-28     	; 0x2112 <__divsf3+0x1a>
    212e:	95 1b       	sub	r25, r21
    2130:	55 0b       	sbc	r21, r21
    2132:	bb 27       	eor	r27, r27
    2134:	aa 27       	eor	r26, r26
    2136:	62 17       	cp	r22, r18
    2138:	73 07       	cpc	r23, r19
    213a:	84 07       	cpc	r24, r20
    213c:	38 f0       	brcs	.+14     	; 0x214c <__divsf3_pse+0x26>
    213e:	9f 5f       	subi	r25, 0xFF	; 255
    2140:	5f 4f       	sbci	r21, 0xFF	; 255
    2142:	22 0f       	add	r18, r18
    2144:	33 1f       	adc	r19, r19
    2146:	44 1f       	adc	r20, r20
    2148:	aa 1f       	adc	r26, r26
    214a:	a9 f3       	breq	.-22     	; 0x2136 <__divsf3_pse+0x10>
    214c:	35 d0       	rcall	.+106    	; 0x21b8 <__divsf3_pse+0x92>
    214e:	0e 2e       	mov	r0, r30
    2150:	3a f0       	brmi	.+14     	; 0x2160 <__divsf3_pse+0x3a>
    2152:	e0 e8       	ldi	r30, 0x80	; 128
    2154:	32 d0       	rcall	.+100    	; 0x21ba <__divsf3_pse+0x94>
    2156:	91 50       	subi	r25, 0x01	; 1
    2158:	50 40       	sbci	r21, 0x00	; 0
    215a:	e6 95       	lsr	r30
    215c:	00 1c       	adc	r0, r0
    215e:	ca f7       	brpl	.-14     	; 0x2152 <__divsf3_pse+0x2c>
    2160:	2b d0       	rcall	.+86     	; 0x21b8 <__divsf3_pse+0x92>
    2162:	fe 2f       	mov	r31, r30
    2164:	29 d0       	rcall	.+82     	; 0x21b8 <__divsf3_pse+0x92>
    2166:	66 0f       	add	r22, r22
    2168:	77 1f       	adc	r23, r23
    216a:	88 1f       	adc	r24, r24
    216c:	bb 1f       	adc	r27, r27
    216e:	26 17       	cp	r18, r22
    2170:	37 07       	cpc	r19, r23
    2172:	48 07       	cpc	r20, r24
    2174:	ab 07       	cpc	r26, r27
    2176:	b0 e8       	ldi	r27, 0x80	; 128
    2178:	09 f0       	breq	.+2      	; 0x217c <__divsf3_pse+0x56>
    217a:	bb 0b       	sbc	r27, r27
    217c:	80 2d       	mov	r24, r0
    217e:	bf 01       	movw	r22, r30
    2180:	ff 27       	eor	r31, r31
    2182:	93 58       	subi	r25, 0x83	; 131
    2184:	5f 4f       	sbci	r21, 0xFF	; 255
    2186:	3a f0       	brmi	.+14     	; 0x2196 <__divsf3_pse+0x70>
    2188:	9e 3f       	cpi	r25, 0xFE	; 254
    218a:	51 05       	cpc	r21, r1
    218c:	78 f0       	brcs	.+30     	; 0x21ac <__divsf3_pse+0x86>
    218e:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_inf>
    2192:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__fp_szero>
    2196:	5f 3f       	cpi	r21, 0xFF	; 255
    2198:	e4 f3       	brlt	.-8      	; 0x2192 <__divsf3_pse+0x6c>
    219a:	98 3e       	cpi	r25, 0xE8	; 232
    219c:	d4 f3       	brlt	.-12     	; 0x2192 <__divsf3_pse+0x6c>
    219e:	86 95       	lsr	r24
    21a0:	77 95       	ror	r23
    21a2:	67 95       	ror	r22
    21a4:	b7 95       	ror	r27
    21a6:	f7 95       	ror	r31
    21a8:	9f 5f       	subi	r25, 0xFF	; 255
    21aa:	c9 f7       	brne	.-14     	; 0x219e <__divsf3_pse+0x78>
    21ac:	88 0f       	add	r24, r24
    21ae:	91 1d       	adc	r25, r1
    21b0:	96 95       	lsr	r25
    21b2:	87 95       	ror	r24
    21b4:	97 f9       	bld	r25, 7
    21b6:	08 95       	ret
    21b8:	e1 e0       	ldi	r30, 0x01	; 1
    21ba:	66 0f       	add	r22, r22
    21bc:	77 1f       	adc	r23, r23
    21be:	88 1f       	adc	r24, r24
    21c0:	bb 1f       	adc	r27, r27
    21c2:	62 17       	cp	r22, r18
    21c4:	73 07       	cpc	r23, r19
    21c6:	84 07       	cpc	r24, r20
    21c8:	ba 07       	cpc	r27, r26
    21ca:	20 f0       	brcs	.+8      	; 0x21d4 <__divsf3_pse+0xae>
    21cc:	62 1b       	sub	r22, r18
    21ce:	73 0b       	sbc	r23, r19
    21d0:	84 0b       	sbc	r24, r20
    21d2:	ba 0b       	sbc	r27, r26
    21d4:	ee 1f       	adc	r30, r30
    21d6:	88 f7       	brcc	.-30     	; 0x21ba <__divsf3_pse+0x94>
    21d8:	e0 95       	com	r30
    21da:	08 95       	ret

000021dc <__floatunsisf>:
    21dc:	e8 94       	clt
    21de:	09 c0       	rjmp	.+18     	; 0x21f2 <__floatsisf+0x12>

000021e0 <__floatsisf>:
    21e0:	97 fb       	bst	r25, 7
    21e2:	3e f4       	brtc	.+14     	; 0x21f2 <__floatsisf+0x12>
    21e4:	90 95       	com	r25
    21e6:	80 95       	com	r24
    21e8:	70 95       	com	r23
    21ea:	61 95       	neg	r22
    21ec:	7f 4f       	sbci	r23, 0xFF	; 255
    21ee:	8f 4f       	sbci	r24, 0xFF	; 255
    21f0:	9f 4f       	sbci	r25, 0xFF	; 255
    21f2:	99 23       	and	r25, r25
    21f4:	a9 f0       	breq	.+42     	; 0x2220 <__floatsisf+0x40>
    21f6:	f9 2f       	mov	r31, r25
    21f8:	96 e9       	ldi	r25, 0x96	; 150
    21fa:	bb 27       	eor	r27, r27
    21fc:	93 95       	inc	r25
    21fe:	f6 95       	lsr	r31
    2200:	87 95       	ror	r24
    2202:	77 95       	ror	r23
    2204:	67 95       	ror	r22
    2206:	b7 95       	ror	r27
    2208:	f1 11       	cpse	r31, r1
    220a:	f8 cf       	rjmp	.-16     	; 0x21fc <__floatsisf+0x1c>
    220c:	fa f4       	brpl	.+62     	; 0x224c <__floatsisf+0x6c>
    220e:	bb 0f       	add	r27, r27
    2210:	11 f4       	brne	.+4      	; 0x2216 <__floatsisf+0x36>
    2212:	60 ff       	sbrs	r22, 0
    2214:	1b c0       	rjmp	.+54     	; 0x224c <__floatsisf+0x6c>
    2216:	6f 5f       	subi	r22, 0xFF	; 255
    2218:	7f 4f       	sbci	r23, 0xFF	; 255
    221a:	8f 4f       	sbci	r24, 0xFF	; 255
    221c:	9f 4f       	sbci	r25, 0xFF	; 255
    221e:	16 c0       	rjmp	.+44     	; 0x224c <__floatsisf+0x6c>
    2220:	88 23       	and	r24, r24
    2222:	11 f0       	breq	.+4      	; 0x2228 <__floatsisf+0x48>
    2224:	96 e9       	ldi	r25, 0x96	; 150
    2226:	11 c0       	rjmp	.+34     	; 0x224a <__floatsisf+0x6a>
    2228:	77 23       	and	r23, r23
    222a:	21 f0       	breq	.+8      	; 0x2234 <__floatsisf+0x54>
    222c:	9e e8       	ldi	r25, 0x8E	; 142
    222e:	87 2f       	mov	r24, r23
    2230:	76 2f       	mov	r23, r22
    2232:	05 c0       	rjmp	.+10     	; 0x223e <__floatsisf+0x5e>
    2234:	66 23       	and	r22, r22
    2236:	71 f0       	breq	.+28     	; 0x2254 <__floatsisf+0x74>
    2238:	96 e8       	ldi	r25, 0x86	; 134
    223a:	86 2f       	mov	r24, r22
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	2a f0       	brmi	.+10     	; 0x224c <__floatsisf+0x6c>
    2242:	9a 95       	dec	r25
    2244:	66 0f       	add	r22, r22
    2246:	77 1f       	adc	r23, r23
    2248:	88 1f       	adc	r24, r24
    224a:	da f7       	brpl	.-10     	; 0x2242 <__floatsisf+0x62>
    224c:	88 0f       	add	r24, r24
    224e:	96 95       	lsr	r25
    2250:	87 95       	ror	r24
    2252:	97 f9       	bld	r25, 7
    2254:	08 95       	ret

00002256 <__fp_cmp>:
    2256:	99 0f       	add	r25, r25
    2258:	00 08       	sbc	r0, r0
    225a:	55 0f       	add	r21, r21
    225c:	aa 0b       	sbc	r26, r26
    225e:	e0 e8       	ldi	r30, 0x80	; 128
    2260:	fe ef       	ldi	r31, 0xFE	; 254
    2262:	16 16       	cp	r1, r22
    2264:	17 06       	cpc	r1, r23
    2266:	e8 07       	cpc	r30, r24
    2268:	f9 07       	cpc	r31, r25
    226a:	c0 f0       	brcs	.+48     	; 0x229c <__fp_cmp+0x46>
    226c:	12 16       	cp	r1, r18
    226e:	13 06       	cpc	r1, r19
    2270:	e4 07       	cpc	r30, r20
    2272:	f5 07       	cpc	r31, r21
    2274:	98 f0       	brcs	.+38     	; 0x229c <__fp_cmp+0x46>
    2276:	62 1b       	sub	r22, r18
    2278:	73 0b       	sbc	r23, r19
    227a:	84 0b       	sbc	r24, r20
    227c:	95 0b       	sbc	r25, r21
    227e:	39 f4       	brne	.+14     	; 0x228e <__fp_cmp+0x38>
    2280:	0a 26       	eor	r0, r26
    2282:	61 f0       	breq	.+24     	; 0x229c <__fp_cmp+0x46>
    2284:	23 2b       	or	r18, r19
    2286:	24 2b       	or	r18, r20
    2288:	25 2b       	or	r18, r21
    228a:	21 f4       	brne	.+8      	; 0x2294 <__fp_cmp+0x3e>
    228c:	08 95       	ret
    228e:	0a 26       	eor	r0, r26
    2290:	09 f4       	brne	.+2      	; 0x2294 <__fp_cmp+0x3e>
    2292:	a1 40       	sbci	r26, 0x01	; 1
    2294:	a6 95       	lsr	r26
    2296:	8f ef       	ldi	r24, 0xFF	; 255
    2298:	81 1d       	adc	r24, r1
    229a:	81 1d       	adc	r24, r1
    229c:	08 95       	ret

0000229e <__fp_inf>:
    229e:	97 f9       	bld	r25, 7
    22a0:	9f 67       	ori	r25, 0x7F	; 127
    22a2:	80 e8       	ldi	r24, 0x80	; 128
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	08 95       	ret

000022aa <__fp_nan>:
    22aa:	9f ef       	ldi	r25, 0xFF	; 255
    22ac:	80 ec       	ldi	r24, 0xC0	; 192
    22ae:	08 95       	ret

000022b0 <__fp_pscA>:
    22b0:	00 24       	eor	r0, r0
    22b2:	0a 94       	dec	r0
    22b4:	16 16       	cp	r1, r22
    22b6:	17 06       	cpc	r1, r23
    22b8:	18 06       	cpc	r1, r24
    22ba:	09 06       	cpc	r0, r25
    22bc:	08 95       	ret

000022be <__fp_pscB>:
    22be:	00 24       	eor	r0, r0
    22c0:	0a 94       	dec	r0
    22c2:	12 16       	cp	r1, r18
    22c4:	13 06       	cpc	r1, r19
    22c6:	14 06       	cpc	r1, r20
    22c8:	05 06       	cpc	r0, r21
    22ca:	08 95       	ret

000022cc <__fp_round>:
    22cc:	09 2e       	mov	r0, r25
    22ce:	03 94       	inc	r0
    22d0:	00 0c       	add	r0, r0
    22d2:	11 f4       	brne	.+4      	; 0x22d8 <__fp_round+0xc>
    22d4:	88 23       	and	r24, r24
    22d6:	52 f0       	brmi	.+20     	; 0x22ec <__fp_round+0x20>
    22d8:	bb 0f       	add	r27, r27
    22da:	40 f4       	brcc	.+16     	; 0x22ec <__fp_round+0x20>
    22dc:	bf 2b       	or	r27, r31
    22de:	11 f4       	brne	.+4      	; 0x22e4 <__fp_round+0x18>
    22e0:	60 ff       	sbrs	r22, 0
    22e2:	04 c0       	rjmp	.+8      	; 0x22ec <__fp_round+0x20>
    22e4:	6f 5f       	subi	r22, 0xFF	; 255
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	8f 4f       	sbci	r24, 0xFF	; 255
    22ea:	9f 4f       	sbci	r25, 0xFF	; 255
    22ec:	08 95       	ret

000022ee <__fp_split3>:
    22ee:	57 fd       	sbrc	r21, 7
    22f0:	90 58       	subi	r25, 0x80	; 128
    22f2:	44 0f       	add	r20, r20
    22f4:	55 1f       	adc	r21, r21
    22f6:	59 f0       	breq	.+22     	; 0x230e <__fp_splitA+0x10>
    22f8:	5f 3f       	cpi	r21, 0xFF	; 255
    22fa:	71 f0       	breq	.+28     	; 0x2318 <__fp_splitA+0x1a>
    22fc:	47 95       	ror	r20

000022fe <__fp_splitA>:
    22fe:	88 0f       	add	r24, r24
    2300:	97 fb       	bst	r25, 7
    2302:	99 1f       	adc	r25, r25
    2304:	61 f0       	breq	.+24     	; 0x231e <__fp_splitA+0x20>
    2306:	9f 3f       	cpi	r25, 0xFF	; 255
    2308:	79 f0       	breq	.+30     	; 0x2328 <__fp_splitA+0x2a>
    230a:	87 95       	ror	r24
    230c:	08 95       	ret
    230e:	12 16       	cp	r1, r18
    2310:	13 06       	cpc	r1, r19
    2312:	14 06       	cpc	r1, r20
    2314:	55 1f       	adc	r21, r21
    2316:	f2 cf       	rjmp	.-28     	; 0x22fc <__fp_split3+0xe>
    2318:	46 95       	lsr	r20
    231a:	f1 df       	rcall	.-30     	; 0x22fe <__fp_splitA>
    231c:	08 c0       	rjmp	.+16     	; 0x232e <__fp_splitA+0x30>
    231e:	16 16       	cp	r1, r22
    2320:	17 06       	cpc	r1, r23
    2322:	18 06       	cpc	r1, r24
    2324:	99 1f       	adc	r25, r25
    2326:	f1 cf       	rjmp	.-30     	; 0x230a <__fp_splitA+0xc>
    2328:	86 95       	lsr	r24
    232a:	71 05       	cpc	r23, r1
    232c:	61 05       	cpc	r22, r1
    232e:	08 94       	sec
    2330:	08 95       	ret

00002332 <__fp_zero>:
    2332:	e8 94       	clt

00002334 <__fp_szero>:
    2334:	bb 27       	eor	r27, r27
    2336:	66 27       	eor	r22, r22
    2338:	77 27       	eor	r23, r23
    233a:	cb 01       	movw	r24, r22
    233c:	97 f9       	bld	r25, 7
    233e:	08 95       	ret

00002340 <__gesf2>:
    2340:	0e 94 2b 11 	call	0x2256	; 0x2256 <__fp_cmp>
    2344:	08 f4       	brcc	.+2      	; 0x2348 <__gesf2+0x8>
    2346:	8f ef       	ldi	r24, 0xFF	; 255
    2348:	08 95       	ret

0000234a <__mulsf3>:
    234a:	0e 94 b8 11 	call	0x2370	; 0x2370 <__mulsf3x>
    234e:	0c 94 66 11 	jmp	0x22cc	; 0x22cc <__fp_round>
    2352:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__fp_pscA>
    2356:	38 f0       	brcs	.+14     	; 0x2366 <__mulsf3+0x1c>
    2358:	0e 94 5f 11 	call	0x22be	; 0x22be <__fp_pscB>
    235c:	20 f0       	brcs	.+8      	; 0x2366 <__mulsf3+0x1c>
    235e:	95 23       	and	r25, r21
    2360:	11 f0       	breq	.+4      	; 0x2366 <__mulsf3+0x1c>
    2362:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_inf>
    2366:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__fp_nan>
    236a:	11 24       	eor	r1, r1
    236c:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__fp_szero>

00002370 <__mulsf3x>:
    2370:	0e 94 77 11 	call	0x22ee	; 0x22ee <__fp_split3>
    2374:	70 f3       	brcs	.-36     	; 0x2352 <__mulsf3+0x8>

00002376 <__mulsf3_pse>:
    2376:	95 9f       	mul	r25, r21
    2378:	c1 f3       	breq	.-16     	; 0x236a <__mulsf3+0x20>
    237a:	95 0f       	add	r25, r21
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	55 1f       	adc	r21, r21
    2380:	62 9f       	mul	r22, r18
    2382:	f0 01       	movw	r30, r0
    2384:	72 9f       	mul	r23, r18
    2386:	bb 27       	eor	r27, r27
    2388:	f0 0d       	add	r31, r0
    238a:	b1 1d       	adc	r27, r1
    238c:	63 9f       	mul	r22, r19
    238e:	aa 27       	eor	r26, r26
    2390:	f0 0d       	add	r31, r0
    2392:	b1 1d       	adc	r27, r1
    2394:	aa 1f       	adc	r26, r26
    2396:	64 9f       	mul	r22, r20
    2398:	66 27       	eor	r22, r22
    239a:	b0 0d       	add	r27, r0
    239c:	a1 1d       	adc	r26, r1
    239e:	66 1f       	adc	r22, r22
    23a0:	82 9f       	mul	r24, r18
    23a2:	22 27       	eor	r18, r18
    23a4:	b0 0d       	add	r27, r0
    23a6:	a1 1d       	adc	r26, r1
    23a8:	62 1f       	adc	r22, r18
    23aa:	73 9f       	mul	r23, r19
    23ac:	b0 0d       	add	r27, r0
    23ae:	a1 1d       	adc	r26, r1
    23b0:	62 1f       	adc	r22, r18
    23b2:	83 9f       	mul	r24, r19
    23b4:	a0 0d       	add	r26, r0
    23b6:	61 1d       	adc	r22, r1
    23b8:	22 1f       	adc	r18, r18
    23ba:	74 9f       	mul	r23, r20
    23bc:	33 27       	eor	r19, r19
    23be:	a0 0d       	add	r26, r0
    23c0:	61 1d       	adc	r22, r1
    23c2:	23 1f       	adc	r18, r19
    23c4:	84 9f       	mul	r24, r20
    23c6:	60 0d       	add	r22, r0
    23c8:	21 1d       	adc	r18, r1
    23ca:	82 2f       	mov	r24, r18
    23cc:	76 2f       	mov	r23, r22
    23ce:	6a 2f       	mov	r22, r26
    23d0:	11 24       	eor	r1, r1
    23d2:	9f 57       	subi	r25, 0x7F	; 127
    23d4:	50 40       	sbci	r21, 0x00	; 0
    23d6:	9a f0       	brmi	.+38     	; 0x23fe <__mulsf3_pse+0x88>
    23d8:	f1 f0       	breq	.+60     	; 0x2416 <__mulsf3_pse+0xa0>
    23da:	88 23       	and	r24, r24
    23dc:	4a f0       	brmi	.+18     	; 0x23f0 <__mulsf3_pse+0x7a>
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	bb 1f       	adc	r27, r27
    23e4:	66 1f       	adc	r22, r22
    23e6:	77 1f       	adc	r23, r23
    23e8:	88 1f       	adc	r24, r24
    23ea:	91 50       	subi	r25, 0x01	; 1
    23ec:	50 40       	sbci	r21, 0x00	; 0
    23ee:	a9 f7       	brne	.-22     	; 0x23da <__mulsf3_pse+0x64>
    23f0:	9e 3f       	cpi	r25, 0xFE	; 254
    23f2:	51 05       	cpc	r21, r1
    23f4:	80 f0       	brcs	.+32     	; 0x2416 <__mulsf3_pse+0xa0>
    23f6:	0c 94 4f 11 	jmp	0x229e	; 0x229e <__fp_inf>
    23fa:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__fp_szero>
    23fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2400:	e4 f3       	brlt	.-8      	; 0x23fa <__mulsf3_pse+0x84>
    2402:	98 3e       	cpi	r25, 0xE8	; 232
    2404:	d4 f3       	brlt	.-12     	; 0x23fa <__mulsf3_pse+0x84>
    2406:	86 95       	lsr	r24
    2408:	77 95       	ror	r23
    240a:	67 95       	ror	r22
    240c:	b7 95       	ror	r27
    240e:	f7 95       	ror	r31
    2410:	e7 95       	ror	r30
    2412:	9f 5f       	subi	r25, 0xFF	; 255
    2414:	c1 f7       	brne	.-16     	; 0x2406 <__mulsf3_pse+0x90>
    2416:	fe 2b       	or	r31, r30
    2418:	88 0f       	add	r24, r24
    241a:	91 1d       	adc	r25, r1
    241c:	96 95       	lsr	r25
    241e:	87 95       	ror	r24
    2420:	97 f9       	bld	r25, 7
    2422:	08 95       	ret

00002424 <__divmodsi4>:
    2424:	05 2e       	mov	r0, r21
    2426:	97 fb       	bst	r25, 7
    2428:	1e f4       	brtc	.+6      	; 0x2430 <__divmodsi4+0xc>
    242a:	00 94       	com	r0
    242c:	0e 94 29 12 	call	0x2452	; 0x2452 <__negsi2>
    2430:	57 fd       	sbrc	r21, 7
    2432:	07 d0       	rcall	.+14     	; 0x2442 <__divmodsi4_neg2>
    2434:	0e 94 37 12 	call	0x246e	; 0x246e <__udivmodsi4>
    2438:	07 fc       	sbrc	r0, 7
    243a:	03 d0       	rcall	.+6      	; 0x2442 <__divmodsi4_neg2>
    243c:	4e f4       	brtc	.+18     	; 0x2450 <__divmodsi4_exit>
    243e:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__negsi2>

00002442 <__divmodsi4_neg2>:
    2442:	50 95       	com	r21
    2444:	40 95       	com	r20
    2446:	30 95       	com	r19
    2448:	21 95       	neg	r18
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
    244c:	4f 4f       	sbci	r20, 0xFF	; 255
    244e:	5f 4f       	sbci	r21, 0xFF	; 255

00002450 <__divmodsi4_exit>:
    2450:	08 95       	ret

00002452 <__negsi2>:
    2452:	90 95       	com	r25
    2454:	80 95       	com	r24
    2456:	70 95       	com	r23
    2458:	61 95       	neg	r22
    245a:	7f 4f       	sbci	r23, 0xFF	; 255
    245c:	8f 4f       	sbci	r24, 0xFF	; 255
    245e:	9f 4f       	sbci	r25, 0xFF	; 255
    2460:	08 95       	ret

00002462 <__tablejump2__>:
    2462:	ee 0f       	add	r30, r30
    2464:	ff 1f       	adc	r31, r31
    2466:	05 90       	lpm	r0, Z+
    2468:	f4 91       	lpm	r31, Z
    246a:	e0 2d       	mov	r30, r0
    246c:	09 94       	ijmp

0000246e <__udivmodsi4>:
    246e:	a1 e2       	ldi	r26, 0x21	; 33
    2470:	1a 2e       	mov	r1, r26
    2472:	aa 1b       	sub	r26, r26
    2474:	bb 1b       	sub	r27, r27
    2476:	fd 01       	movw	r30, r26
    2478:	0d c0       	rjmp	.+26     	; 0x2494 <__udivmodsi4_ep>

0000247a <__udivmodsi4_loop>:
    247a:	aa 1f       	adc	r26, r26
    247c:	bb 1f       	adc	r27, r27
    247e:	ee 1f       	adc	r30, r30
    2480:	ff 1f       	adc	r31, r31
    2482:	a2 17       	cp	r26, r18
    2484:	b3 07       	cpc	r27, r19
    2486:	e4 07       	cpc	r30, r20
    2488:	f5 07       	cpc	r31, r21
    248a:	20 f0       	brcs	.+8      	; 0x2494 <__udivmodsi4_ep>
    248c:	a2 1b       	sub	r26, r18
    248e:	b3 0b       	sbc	r27, r19
    2490:	e4 0b       	sbc	r30, r20
    2492:	f5 0b       	sbc	r31, r21

00002494 <__udivmodsi4_ep>:
    2494:	66 1f       	adc	r22, r22
    2496:	77 1f       	adc	r23, r23
    2498:	88 1f       	adc	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	1a 94       	dec	r1
    249e:	69 f7       	brne	.-38     	; 0x247a <__udivmodsi4_loop>
    24a0:	60 95       	com	r22
    24a2:	70 95       	com	r23
    24a4:	80 95       	com	r24
    24a6:	90 95       	com	r25
    24a8:	9b 01       	movw	r18, r22
    24aa:	ac 01       	movw	r20, r24
    24ac:	bd 01       	movw	r22, r26
    24ae:	cf 01       	movw	r24, r30
    24b0:	08 95       	ret

000024b2 <dtostrf>:
    24b2:	ef 92       	push	r14
    24b4:	0f 93       	push	r16
    24b6:	1f 93       	push	r17
    24b8:	cf 93       	push	r28
    24ba:	df 93       	push	r29
    24bc:	e8 01       	movw	r28, r16
    24be:	47 fd       	sbrc	r20, 7
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <dtostrf+0x14>
    24c2:	34 e0       	ldi	r19, 0x04	; 4
    24c4:	01 c0       	rjmp	.+2      	; 0x24c8 <dtostrf+0x16>
    24c6:	34 e1       	ldi	r19, 0x14	; 20
    24c8:	e4 2f       	mov	r30, r20
    24ca:	44 0f       	add	r20, r20
    24cc:	ff 0b       	sbc	r31, r31
    24ce:	f7 ff       	sbrs	r31, 7
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <dtostrf+0x26>
    24d2:	f1 95       	neg	r31
    24d4:	e1 95       	neg	r30
    24d6:	f1 09       	sbc	r31, r1
    24d8:	e3 2e       	mov	r14, r19
    24da:	02 2f       	mov	r16, r18
    24dc:	2e 2f       	mov	r18, r30
    24de:	ae 01       	movw	r20, r28
    24e0:	0e 94 cf 13 	call	0x279e	; 0x279e <dtoa_prf>
    24e4:	ce 01       	movw	r24, r28
    24e6:	df 91       	pop	r29
    24e8:	cf 91       	pop	r28
    24ea:	1f 91       	pop	r17
    24ec:	0f 91       	pop	r16
    24ee:	ef 90       	pop	r14
    24f0:	08 95       	ret

000024f2 <malloc>:
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	91 05       	cpc	r25, r1
    24fa:	10 f4       	brcc	.+4      	; 0x2500 <malloc+0xe>
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	e0 91 5f 08 	lds	r30, 0x085F	; 0x80085f <__flp>
    2504:	f0 91 60 08 	lds	r31, 0x0860	; 0x800860 <__flp+0x1>
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	c0 e0       	ldi	r28, 0x00	; 0
    250e:	d0 e0       	ldi	r29, 0x00	; 0
    2510:	30 97       	sbiw	r30, 0x00	; 0
    2512:	11 f1       	breq	.+68     	; 0x2558 <malloc+0x66>
    2514:	40 81       	ld	r20, Z
    2516:	51 81       	ldd	r21, Z+1	; 0x01
    2518:	48 17       	cp	r20, r24
    251a:	59 07       	cpc	r21, r25
    251c:	c0 f0       	brcs	.+48     	; 0x254e <malloc+0x5c>
    251e:	48 17       	cp	r20, r24
    2520:	59 07       	cpc	r21, r25
    2522:	61 f4       	brne	.+24     	; 0x253c <malloc+0x4a>
    2524:	82 81       	ldd	r24, Z+2	; 0x02
    2526:	93 81       	ldd	r25, Z+3	; 0x03
    2528:	20 97       	sbiw	r28, 0x00	; 0
    252a:	19 f0       	breq	.+6      	; 0x2532 <malloc+0x40>
    252c:	9b 83       	std	Y+3, r25	; 0x03
    252e:	8a 83       	std	Y+2, r24	; 0x02
    2530:	2b c0       	rjmp	.+86     	; 0x2588 <malloc+0x96>
    2532:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <__flp+0x1>
    2536:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <__flp>
    253a:	26 c0       	rjmp	.+76     	; 0x2588 <malloc+0x96>
    253c:	21 15       	cp	r18, r1
    253e:	31 05       	cpc	r19, r1
    2540:	19 f0       	breq	.+6      	; 0x2548 <malloc+0x56>
    2542:	42 17       	cp	r20, r18
    2544:	53 07       	cpc	r21, r19
    2546:	18 f4       	brcc	.+6      	; 0x254e <malloc+0x5c>
    2548:	9a 01       	movw	r18, r20
    254a:	be 01       	movw	r22, r28
    254c:	df 01       	movw	r26, r30
    254e:	ef 01       	movw	r28, r30
    2550:	02 80       	ldd	r0, Z+2	; 0x02
    2552:	f3 81       	ldd	r31, Z+3	; 0x03
    2554:	e0 2d       	mov	r30, r0
    2556:	dc cf       	rjmp	.-72     	; 0x2510 <malloc+0x1e>
    2558:	21 15       	cp	r18, r1
    255a:	31 05       	cpc	r19, r1
    255c:	09 f1       	breq	.+66     	; 0x25a0 <malloc+0xae>
    255e:	28 1b       	sub	r18, r24
    2560:	39 0b       	sbc	r19, r25
    2562:	24 30       	cpi	r18, 0x04	; 4
    2564:	31 05       	cpc	r19, r1
    2566:	90 f4       	brcc	.+36     	; 0x258c <malloc+0x9a>
    2568:	12 96       	adiw	r26, 0x02	; 2
    256a:	8d 91       	ld	r24, X+
    256c:	9c 91       	ld	r25, X
    256e:	13 97       	sbiw	r26, 0x03	; 3
    2570:	61 15       	cp	r22, r1
    2572:	71 05       	cpc	r23, r1
    2574:	21 f0       	breq	.+8      	; 0x257e <malloc+0x8c>
    2576:	fb 01       	movw	r30, r22
    2578:	93 83       	std	Z+3, r25	; 0x03
    257a:	82 83       	std	Z+2, r24	; 0x02
    257c:	04 c0       	rjmp	.+8      	; 0x2586 <malloc+0x94>
    257e:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <__flp+0x1>
    2582:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <__flp>
    2586:	fd 01       	movw	r30, r26
    2588:	32 96       	adiw	r30, 0x02	; 2
    258a:	44 c0       	rjmp	.+136    	; 0x2614 <malloc+0x122>
    258c:	fd 01       	movw	r30, r26
    258e:	e2 0f       	add	r30, r18
    2590:	f3 1f       	adc	r31, r19
    2592:	81 93       	st	Z+, r24
    2594:	91 93       	st	Z+, r25
    2596:	22 50       	subi	r18, 0x02	; 2
    2598:	31 09       	sbc	r19, r1
    259a:	2d 93       	st	X+, r18
    259c:	3c 93       	st	X, r19
    259e:	3a c0       	rjmp	.+116    	; 0x2614 <malloc+0x122>
    25a0:	20 91 5d 08 	lds	r18, 0x085D	; 0x80085d <__brkval>
    25a4:	30 91 5e 08 	lds	r19, 0x085E	; 0x80085e <__brkval+0x1>
    25a8:	23 2b       	or	r18, r19
    25aa:	41 f4       	brne	.+16     	; 0x25bc <malloc+0xca>
    25ac:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    25b0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    25b4:	30 93 5e 08 	sts	0x085E, r19	; 0x80085e <__brkval+0x1>
    25b8:	20 93 5d 08 	sts	0x085D, r18	; 0x80085d <__brkval>
    25bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    25c0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    25c4:	21 15       	cp	r18, r1
    25c6:	31 05       	cpc	r19, r1
    25c8:	41 f4       	brne	.+16     	; 0x25da <malloc+0xe8>
    25ca:	2d b7       	in	r18, 0x3d	; 61
    25cc:	3e b7       	in	r19, 0x3e	; 62
    25ce:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    25d2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    25d6:	24 1b       	sub	r18, r20
    25d8:	35 0b       	sbc	r19, r21
    25da:	e0 91 5d 08 	lds	r30, 0x085D	; 0x80085d <__brkval>
    25de:	f0 91 5e 08 	lds	r31, 0x085E	; 0x80085e <__brkval+0x1>
    25e2:	e2 17       	cp	r30, r18
    25e4:	f3 07       	cpc	r31, r19
    25e6:	a0 f4       	brcc	.+40     	; 0x2610 <malloc+0x11e>
    25e8:	2e 1b       	sub	r18, r30
    25ea:	3f 0b       	sbc	r19, r31
    25ec:	28 17       	cp	r18, r24
    25ee:	39 07       	cpc	r19, r25
    25f0:	78 f0       	brcs	.+30     	; 0x2610 <malloc+0x11e>
    25f2:	ac 01       	movw	r20, r24
    25f4:	4e 5f       	subi	r20, 0xFE	; 254
    25f6:	5f 4f       	sbci	r21, 0xFF	; 255
    25f8:	24 17       	cp	r18, r20
    25fa:	35 07       	cpc	r19, r21
    25fc:	48 f0       	brcs	.+18     	; 0x2610 <malloc+0x11e>
    25fe:	4e 0f       	add	r20, r30
    2600:	5f 1f       	adc	r21, r31
    2602:	50 93 5e 08 	sts	0x085E, r21	; 0x80085e <__brkval+0x1>
    2606:	40 93 5d 08 	sts	0x085D, r20	; 0x80085d <__brkval>
    260a:	81 93       	st	Z+, r24
    260c:	91 93       	st	Z+, r25
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <malloc+0x122>
    2610:	e0 e0       	ldi	r30, 0x00	; 0
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	cf 01       	movw	r24, r30
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <free>:
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	09 f4       	brne	.+2      	; 0x262a <free+0xe>
    2628:	8c c0       	rjmp	.+280    	; 0x2742 <free+0x126>
    262a:	fc 01       	movw	r30, r24
    262c:	32 97       	sbiw	r30, 0x02	; 2
    262e:	13 82       	std	Z+3, r1	; 0x03
    2630:	12 82       	std	Z+2, r1	; 0x02
    2632:	00 91 5f 08 	lds	r16, 0x085F	; 0x80085f <__flp>
    2636:	10 91 60 08 	lds	r17, 0x0860	; 0x800860 <__flp+0x1>
    263a:	01 15       	cp	r16, r1
    263c:	11 05       	cpc	r17, r1
    263e:	81 f4       	brne	.+32     	; 0x2660 <free+0x44>
    2640:	20 81       	ld	r18, Z
    2642:	31 81       	ldd	r19, Z+1	; 0x01
    2644:	82 0f       	add	r24, r18
    2646:	93 1f       	adc	r25, r19
    2648:	20 91 5d 08 	lds	r18, 0x085D	; 0x80085d <__brkval>
    264c:	30 91 5e 08 	lds	r19, 0x085E	; 0x80085e <__brkval+0x1>
    2650:	28 17       	cp	r18, r24
    2652:	39 07       	cpc	r19, r25
    2654:	79 f5       	brne	.+94     	; 0x26b4 <free+0x98>
    2656:	f0 93 5e 08 	sts	0x085E, r31	; 0x80085e <__brkval+0x1>
    265a:	e0 93 5d 08 	sts	0x085D, r30	; 0x80085d <__brkval>
    265e:	71 c0       	rjmp	.+226    	; 0x2742 <free+0x126>
    2660:	d8 01       	movw	r26, r16
    2662:	40 e0       	ldi	r20, 0x00	; 0
    2664:	50 e0       	ldi	r21, 0x00	; 0
    2666:	ae 17       	cp	r26, r30
    2668:	bf 07       	cpc	r27, r31
    266a:	50 f4       	brcc	.+20     	; 0x2680 <free+0x64>
    266c:	12 96       	adiw	r26, 0x02	; 2
    266e:	2d 91       	ld	r18, X+
    2670:	3c 91       	ld	r19, X
    2672:	13 97       	sbiw	r26, 0x03	; 3
    2674:	ad 01       	movw	r20, r26
    2676:	21 15       	cp	r18, r1
    2678:	31 05       	cpc	r19, r1
    267a:	09 f1       	breq	.+66     	; 0x26be <free+0xa2>
    267c:	d9 01       	movw	r26, r18
    267e:	f3 cf       	rjmp	.-26     	; 0x2666 <free+0x4a>
    2680:	9d 01       	movw	r18, r26
    2682:	da 01       	movw	r26, r20
    2684:	33 83       	std	Z+3, r19	; 0x03
    2686:	22 83       	std	Z+2, r18	; 0x02
    2688:	60 81       	ld	r22, Z
    268a:	71 81       	ldd	r23, Z+1	; 0x01
    268c:	86 0f       	add	r24, r22
    268e:	97 1f       	adc	r25, r23
    2690:	82 17       	cp	r24, r18
    2692:	93 07       	cpc	r25, r19
    2694:	69 f4       	brne	.+26     	; 0x26b0 <free+0x94>
    2696:	ec 01       	movw	r28, r24
    2698:	28 81       	ld	r18, Y
    269a:	39 81       	ldd	r19, Y+1	; 0x01
    269c:	26 0f       	add	r18, r22
    269e:	37 1f       	adc	r19, r23
    26a0:	2e 5f       	subi	r18, 0xFE	; 254
    26a2:	3f 4f       	sbci	r19, 0xFF	; 255
    26a4:	31 83       	std	Z+1, r19	; 0x01
    26a6:	20 83       	st	Z, r18
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	9b 81       	ldd	r25, Y+3	; 0x03
    26ac:	93 83       	std	Z+3, r25	; 0x03
    26ae:	82 83       	std	Z+2, r24	; 0x02
    26b0:	45 2b       	or	r20, r21
    26b2:	29 f4       	brne	.+10     	; 0x26be <free+0xa2>
    26b4:	f0 93 60 08 	sts	0x0860, r31	; 0x800860 <__flp+0x1>
    26b8:	e0 93 5f 08 	sts	0x085F, r30	; 0x80085f <__flp>
    26bc:	42 c0       	rjmp	.+132    	; 0x2742 <free+0x126>
    26be:	13 96       	adiw	r26, 0x03	; 3
    26c0:	fc 93       	st	X, r31
    26c2:	ee 93       	st	-X, r30
    26c4:	12 97       	sbiw	r26, 0x02	; 2
    26c6:	ed 01       	movw	r28, r26
    26c8:	49 91       	ld	r20, Y+
    26ca:	59 91       	ld	r21, Y+
    26cc:	9e 01       	movw	r18, r28
    26ce:	24 0f       	add	r18, r20
    26d0:	35 1f       	adc	r19, r21
    26d2:	e2 17       	cp	r30, r18
    26d4:	f3 07       	cpc	r31, r19
    26d6:	71 f4       	brne	.+28     	; 0x26f4 <free+0xd8>
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	84 0f       	add	r24, r20
    26de:	95 1f       	adc	r25, r21
    26e0:	02 96       	adiw	r24, 0x02	; 2
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	9c 93       	st	X, r25
    26e6:	8e 93       	st	-X, r24
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
    26ea:	93 81       	ldd	r25, Z+3	; 0x03
    26ec:	13 96       	adiw	r26, 0x03	; 3
    26ee:	9c 93       	st	X, r25
    26f0:	8e 93       	st	-X, r24
    26f2:	12 97       	sbiw	r26, 0x02	; 2
    26f4:	e0 e0       	ldi	r30, 0x00	; 0
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	d8 01       	movw	r26, r16
    26fa:	12 96       	adiw	r26, 0x02	; 2
    26fc:	8d 91       	ld	r24, X+
    26fe:	9c 91       	ld	r25, X
    2700:	13 97       	sbiw	r26, 0x03	; 3
    2702:	00 97       	sbiw	r24, 0x00	; 0
    2704:	19 f0       	breq	.+6      	; 0x270c <free+0xf0>
    2706:	f8 01       	movw	r30, r16
    2708:	8c 01       	movw	r16, r24
    270a:	f6 cf       	rjmp	.-20     	; 0x26f8 <free+0xdc>
    270c:	8d 91       	ld	r24, X+
    270e:	9c 91       	ld	r25, X
    2710:	98 01       	movw	r18, r16
    2712:	2e 5f       	subi	r18, 0xFE	; 254
    2714:	3f 4f       	sbci	r19, 0xFF	; 255
    2716:	82 0f       	add	r24, r18
    2718:	93 1f       	adc	r25, r19
    271a:	20 91 5d 08 	lds	r18, 0x085D	; 0x80085d <__brkval>
    271e:	30 91 5e 08 	lds	r19, 0x085E	; 0x80085e <__brkval+0x1>
    2722:	28 17       	cp	r18, r24
    2724:	39 07       	cpc	r19, r25
    2726:	69 f4       	brne	.+26     	; 0x2742 <free+0x126>
    2728:	30 97       	sbiw	r30, 0x00	; 0
    272a:	29 f4       	brne	.+10     	; 0x2736 <free+0x11a>
    272c:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <__flp+0x1>
    2730:	10 92 5f 08 	sts	0x085F, r1	; 0x80085f <__flp>
    2734:	02 c0       	rjmp	.+4      	; 0x273a <free+0x11e>
    2736:	13 82       	std	Z+3, r1	; 0x03
    2738:	12 82       	std	Z+2, r1	; 0x02
    273a:	10 93 5e 08 	sts	0x085E, r17	; 0x80085e <__brkval+0x1>
    273e:	00 93 5d 08 	sts	0x085D, r16	; 0x80085d <__brkval>
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	1f 91       	pop	r17
    2748:	0f 91       	pop	r16
    274a:	08 95       	ret

0000274c <atof>:
    274c:	66 27       	eor	r22, r22
    274e:	77 27       	eor	r23, r23
    2750:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <strtod>

00002754 <__itoa_ncheck>:
    2754:	bb 27       	eor	r27, r27
    2756:	4a 30       	cpi	r20, 0x0A	; 10
    2758:	31 f4       	brne	.+12     	; 0x2766 <__itoa_ncheck+0x12>
    275a:	99 23       	and	r25, r25
    275c:	22 f4       	brpl	.+8      	; 0x2766 <__itoa_ncheck+0x12>
    275e:	bd e2       	ldi	r27, 0x2D	; 45
    2760:	90 95       	com	r25
    2762:	81 95       	neg	r24
    2764:	9f 4f       	sbci	r25, 0xFF	; 255
    2766:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__utoa_common>

0000276a <__utoa_ncheck>:
    276a:	bb 27       	eor	r27, r27

0000276c <__utoa_common>:
    276c:	fb 01       	movw	r30, r22
    276e:	55 27       	eor	r21, r21
    2770:	aa 27       	eor	r26, r26
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	aa 1f       	adc	r26, r26
    2778:	a4 17       	cp	r26, r20
    277a:	10 f0       	brcs	.+4      	; 0x2780 <__utoa_common+0x14>
    277c:	a4 1b       	sub	r26, r20
    277e:	83 95       	inc	r24
    2780:	50 51       	subi	r21, 0x10	; 16
    2782:	b9 f7       	brne	.-18     	; 0x2772 <__utoa_common+0x6>
    2784:	a0 5d       	subi	r26, 0xD0	; 208
    2786:	aa 33       	cpi	r26, 0x3A	; 58
    2788:	08 f0       	brcs	.+2      	; 0x278c <__utoa_common+0x20>
    278a:	a9 5d       	subi	r26, 0xD9	; 217
    278c:	a1 93       	st	Z+, r26
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	79 f7       	brne	.-34     	; 0x2770 <__utoa_common+0x4>
    2792:	b1 11       	cpse	r27, r1
    2794:	b1 93       	st	Z+, r27
    2796:	11 92       	st	Z+, r1
    2798:	cb 01       	movw	r24, r22
    279a:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <strrev>

0000279e <dtoa_prf>:
    279e:	4f 92       	push	r4
    27a0:	5f 92       	push	r5
    27a2:	6f 92       	push	r6
    27a4:	7f 92       	push	r7
    27a6:	9f 92       	push	r9
    27a8:	af 92       	push	r10
    27aa:	bf 92       	push	r11
    27ac:	cf 92       	push	r12
    27ae:	df 92       	push	r13
    27b0:	ef 92       	push	r14
    27b2:	ff 92       	push	r15
    27b4:	0f 93       	push	r16
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	29 97       	sbiw	r28, 0x09	; 9
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	6a 01       	movw	r12, r20
    27ce:	12 2f       	mov	r17, r18
    27d0:	b0 2e       	mov	r11, r16
    27d2:	2b e3       	ldi	r18, 0x3B	; 59
    27d4:	20 17       	cp	r18, r16
    27d6:	20 f0       	brcs	.+8      	; 0x27e0 <dtoa_prf+0x42>
    27d8:	ff 24       	eor	r15, r15
    27da:	f3 94       	inc	r15
    27dc:	f0 0e       	add	r15, r16
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <dtoa_prf+0x46>
    27e0:	bc e3       	ldi	r27, 0x3C	; 60
    27e2:	fb 2e       	mov	r15, r27
    27e4:	0f 2d       	mov	r16, r15
    27e6:	27 e0       	ldi	r18, 0x07	; 7
    27e8:	ae 01       	movw	r20, r28
    27ea:	4f 5f       	subi	r20, 0xFF	; 255
    27ec:	5f 4f       	sbci	r21, 0xFF	; 255
    27ee:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__ftoa_engine>
    27f2:	ac 01       	movw	r20, r24
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	98 2f       	mov	r25, r24
    27f8:	99 70       	andi	r25, 0x09	; 9
    27fa:	91 30       	cpi	r25, 0x01	; 1
    27fc:	31 f0       	breq	.+12     	; 0x280a <dtoa_prf+0x6c>
    27fe:	e1 fc       	sbrc	r14, 1
    2800:	06 c0       	rjmp	.+12     	; 0x280e <dtoa_prf+0x70>
    2802:	e0 fe       	sbrs	r14, 0
    2804:	06 c0       	rjmp	.+12     	; 0x2812 <dtoa_prf+0x74>
    2806:	90 e2       	ldi	r25, 0x20	; 32
    2808:	05 c0       	rjmp	.+10     	; 0x2814 <dtoa_prf+0x76>
    280a:	9d e2       	ldi	r25, 0x2D	; 45
    280c:	03 c0       	rjmp	.+6      	; 0x2814 <dtoa_prf+0x76>
    280e:	9b e2       	ldi	r25, 0x2B	; 43
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <dtoa_prf+0x76>
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	ee 2d       	mov	r30, r14
    2816:	e0 71       	andi	r30, 0x10	; 16
    2818:	83 ff       	sbrs	r24, 3
    281a:	3c c0       	rjmp	.+120    	; 0x2894 <dtoa_prf+0xf6>
    281c:	91 11       	cpse	r25, r1
    281e:	02 c0       	rjmp	.+4      	; 0x2824 <dtoa_prf+0x86>
    2820:	83 e0       	ldi	r24, 0x03	; 3
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <dtoa_prf+0x88>
    2824:	84 e0       	ldi	r24, 0x04	; 4
    2826:	81 17       	cp	r24, r17
    2828:	18 f4       	brcc	.+6      	; 0x2830 <dtoa_prf+0x92>
    282a:	21 2f       	mov	r18, r17
    282c:	28 1b       	sub	r18, r24
    282e:	01 c0       	rjmp	.+2      	; 0x2832 <dtoa_prf+0x94>
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	e1 11       	cpse	r30, r1
    2834:	0b c0       	rjmp	.+22     	; 0x284c <dtoa_prf+0xae>
    2836:	f6 01       	movw	r30, r12
    2838:	82 2f       	mov	r24, r18
    283a:	30 e2       	ldi	r19, 0x20	; 32
    283c:	88 23       	and	r24, r24
    283e:	19 f0       	breq	.+6      	; 0x2846 <dtoa_prf+0xa8>
    2840:	31 93       	st	Z+, r19
    2842:	81 50       	subi	r24, 0x01	; 1
    2844:	fb cf       	rjmp	.-10     	; 0x283c <dtoa_prf+0x9e>
    2846:	c2 0e       	add	r12, r18
    2848:	d1 1c       	adc	r13, r1
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	99 23       	and	r25, r25
    284e:	29 f0       	breq	.+10     	; 0x285a <dtoa_prf+0xbc>
    2850:	d6 01       	movw	r26, r12
    2852:	9c 93       	st	X, r25
    2854:	f6 01       	movw	r30, r12
    2856:	31 96       	adiw	r30, 0x01	; 1
    2858:	6f 01       	movw	r12, r30
    285a:	c6 01       	movw	r24, r12
    285c:	03 96       	adiw	r24, 0x03	; 3
    285e:	e2 fe       	sbrs	r14, 2
    2860:	0a c0       	rjmp	.+20     	; 0x2876 <dtoa_prf+0xd8>
    2862:	3e e4       	ldi	r19, 0x4E	; 78
    2864:	d6 01       	movw	r26, r12
    2866:	3c 93       	st	X, r19
    2868:	41 e4       	ldi	r20, 0x41	; 65
    286a:	11 96       	adiw	r26, 0x01	; 1
    286c:	4c 93       	st	X, r20
    286e:	11 97       	sbiw	r26, 0x01	; 1
    2870:	12 96       	adiw	r26, 0x02	; 2
    2872:	3c 93       	st	X, r19
    2874:	06 c0       	rjmp	.+12     	; 0x2882 <dtoa_prf+0xe4>
    2876:	3e e6       	ldi	r19, 0x6E	; 110
    2878:	f6 01       	movw	r30, r12
    287a:	30 83       	st	Z, r19
    287c:	41 e6       	ldi	r20, 0x61	; 97
    287e:	41 83       	std	Z+1, r20	; 0x01
    2880:	32 83       	std	Z+2, r19	; 0x02
    2882:	fc 01       	movw	r30, r24
    2884:	32 2f       	mov	r19, r18
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	33 23       	and	r19, r19
    288a:	09 f4       	brne	.+2      	; 0x288e <dtoa_prf+0xf0>
    288c:	42 c0       	rjmp	.+132    	; 0x2912 <dtoa_prf+0x174>
    288e:	41 93       	st	Z+, r20
    2890:	31 50       	subi	r19, 0x01	; 1
    2892:	fa cf       	rjmp	.-12     	; 0x2888 <dtoa_prf+0xea>
    2894:	82 ff       	sbrs	r24, 2
    2896:	44 c0       	rjmp	.+136    	; 0x2920 <dtoa_prf+0x182>
    2898:	91 11       	cpse	r25, r1
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <dtoa_prf+0x102>
    289c:	83 e0       	ldi	r24, 0x03	; 3
    289e:	01 c0       	rjmp	.+2      	; 0x28a2 <dtoa_prf+0x104>
    28a0:	84 e0       	ldi	r24, 0x04	; 4
    28a2:	81 17       	cp	r24, r17
    28a4:	18 f4       	brcc	.+6      	; 0x28ac <dtoa_prf+0x10e>
    28a6:	21 2f       	mov	r18, r17
    28a8:	28 1b       	sub	r18, r24
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <dtoa_prf+0x110>
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	e1 11       	cpse	r30, r1
    28b0:	0b c0       	rjmp	.+22     	; 0x28c8 <dtoa_prf+0x12a>
    28b2:	f6 01       	movw	r30, r12
    28b4:	82 2f       	mov	r24, r18
    28b6:	30 e2       	ldi	r19, 0x20	; 32
    28b8:	88 23       	and	r24, r24
    28ba:	19 f0       	breq	.+6      	; 0x28c2 <dtoa_prf+0x124>
    28bc:	31 93       	st	Z+, r19
    28be:	81 50       	subi	r24, 0x01	; 1
    28c0:	fb cf       	rjmp	.-10     	; 0x28b8 <dtoa_prf+0x11a>
    28c2:	c2 0e       	add	r12, r18
    28c4:	d1 1c       	adc	r13, r1
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	99 23       	and	r25, r25
    28ca:	29 f0       	breq	.+10     	; 0x28d6 <dtoa_prf+0x138>
    28cc:	d6 01       	movw	r26, r12
    28ce:	9c 93       	st	X, r25
    28d0:	f6 01       	movw	r30, r12
    28d2:	31 96       	adiw	r30, 0x01	; 1
    28d4:	6f 01       	movw	r12, r30
    28d6:	c6 01       	movw	r24, r12
    28d8:	03 96       	adiw	r24, 0x03	; 3
    28da:	e2 fe       	sbrs	r14, 2
    28dc:	0b c0       	rjmp	.+22     	; 0x28f4 <dtoa_prf+0x156>
    28de:	39 e4       	ldi	r19, 0x49	; 73
    28e0:	d6 01       	movw	r26, r12
    28e2:	3c 93       	st	X, r19
    28e4:	3e e4       	ldi	r19, 0x4E	; 78
    28e6:	11 96       	adiw	r26, 0x01	; 1
    28e8:	3c 93       	st	X, r19
    28ea:	11 97       	sbiw	r26, 0x01	; 1
    28ec:	36 e4       	ldi	r19, 0x46	; 70
    28ee:	12 96       	adiw	r26, 0x02	; 2
    28f0:	3c 93       	st	X, r19
    28f2:	07 c0       	rjmp	.+14     	; 0x2902 <dtoa_prf+0x164>
    28f4:	39 e6       	ldi	r19, 0x69	; 105
    28f6:	f6 01       	movw	r30, r12
    28f8:	30 83       	st	Z, r19
    28fa:	3e e6       	ldi	r19, 0x6E	; 110
    28fc:	31 83       	std	Z+1, r19	; 0x01
    28fe:	36 e6       	ldi	r19, 0x66	; 102
    2900:	32 83       	std	Z+2, r19	; 0x02
    2902:	fc 01       	movw	r30, r24
    2904:	32 2f       	mov	r19, r18
    2906:	40 e2       	ldi	r20, 0x20	; 32
    2908:	33 23       	and	r19, r19
    290a:	19 f0       	breq	.+6      	; 0x2912 <dtoa_prf+0x174>
    290c:	41 93       	st	Z+, r20
    290e:	31 50       	subi	r19, 0x01	; 1
    2910:	fb cf       	rjmp	.-10     	; 0x2908 <dtoa_prf+0x16a>
    2912:	fc 01       	movw	r30, r24
    2914:	e2 0f       	add	r30, r18
    2916:	f1 1d       	adc	r31, r1
    2918:	10 82       	st	Z, r1
    291a:	8e ef       	ldi	r24, 0xFE	; 254
    291c:	9f ef       	ldi	r25, 0xFF	; 255
    291e:	b7 c0       	rjmp	.+366    	; 0x2a8e <dtoa_prf+0x2f0>
    2920:	f1 e0       	ldi	r31, 0x01	; 1
    2922:	91 11       	cpse	r25, r1
    2924:	01 c0       	rjmp	.+2      	; 0x2928 <dtoa_prf+0x18a>
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	6f 2f       	mov	r22, r31
    292a:	70 e0       	ldi	r23, 0x00	; 0
    292c:	14 16       	cp	r1, r20
    292e:	15 06       	cpc	r1, r21
    2930:	24 f4       	brge	.+8      	; 0x293a <dtoa_prf+0x19c>
    2932:	9a 01       	movw	r18, r20
    2934:	2f 5f       	subi	r18, 0xFF	; 255
    2936:	3f 4f       	sbci	r19, 0xFF	; 255
    2938:	02 c0       	rjmp	.+4      	; 0x293e <dtoa_prf+0x1a0>
    293a:	21 e0       	ldi	r18, 0x01	; 1
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	26 0f       	add	r18, r22
    2940:	37 1f       	adc	r19, r23
    2942:	bb 20       	and	r11, r11
    2944:	29 f0       	breq	.+10     	; 0x2950 <dtoa_prf+0x1b2>
    2946:	6b 2d       	mov	r22, r11
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	6f 5f       	subi	r22, 0xFF	; 255
    294c:	7f 4f       	sbci	r23, 0xFF	; 255
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <dtoa_prf+0x1b6>
    2950:	60 e0       	ldi	r22, 0x00	; 0
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	26 0f       	add	r18, r22
    2956:	37 1f       	adc	r19, r23
    2958:	61 2f       	mov	r22, r17
    295a:	70 e0       	ldi	r23, 0x00	; 0
    295c:	26 17       	cp	r18, r22
    295e:	37 07       	cpc	r19, r23
    2960:	1c f4       	brge	.+6      	; 0x2968 <dtoa_prf+0x1ca>
    2962:	12 1b       	sub	r17, r18
    2964:	21 2f       	mov	r18, r17
    2966:	01 c0       	rjmp	.+2      	; 0x296a <dtoa_prf+0x1cc>
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3e 2d       	mov	r19, r14
    296c:	38 71       	andi	r19, 0x18	; 24
    296e:	59 f4       	brne	.+22     	; 0x2986 <dtoa_prf+0x1e8>
    2970:	d6 01       	movw	r26, r12
    2972:	32 2f       	mov	r19, r18
    2974:	60 e2       	ldi	r22, 0x20	; 32
    2976:	33 23       	and	r19, r19
    2978:	19 f0       	breq	.+6      	; 0x2980 <dtoa_prf+0x1e2>
    297a:	6d 93       	st	X+, r22
    297c:	31 50       	subi	r19, 0x01	; 1
    297e:	fb cf       	rjmp	.-10     	; 0x2976 <dtoa_prf+0x1d8>
    2980:	c2 0e       	add	r12, r18
    2982:	d1 1c       	adc	r13, r1
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	ff 23       	and	r31, r31
    2988:	31 f0       	breq	.+12     	; 0x2996 <dtoa_prf+0x1f8>
    298a:	d6 01       	movw	r26, r12
    298c:	9c 93       	st	X, r25
    298e:	b6 01       	movw	r22, r12
    2990:	6f 5f       	subi	r22, 0xFF	; 255
    2992:	7f 4f       	sbci	r23, 0xFF	; 255
    2994:	6b 01       	movw	r12, r22
    2996:	e1 11       	cpse	r30, r1
    2998:	0b c0       	rjmp	.+22     	; 0x29b0 <dtoa_prf+0x212>
    299a:	f6 01       	movw	r30, r12
    299c:	92 2f       	mov	r25, r18
    299e:	30 e3       	ldi	r19, 0x30	; 48
    29a0:	99 23       	and	r25, r25
    29a2:	19 f0       	breq	.+6      	; 0x29aa <dtoa_prf+0x20c>
    29a4:	31 93       	st	Z+, r19
    29a6:	91 50       	subi	r25, 0x01	; 1
    29a8:	fb cf       	rjmp	.-10     	; 0x29a0 <dtoa_prf+0x202>
    29aa:	c2 0e       	add	r12, r18
    29ac:	d1 1c       	adc	r13, r1
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	9f 2d       	mov	r25, r15
    29b2:	94 0f       	add	r25, r20
    29b4:	3a 81       	ldd	r19, Y+2	; 0x02
    29b6:	78 2f       	mov	r23, r24
    29b8:	70 71       	andi	r23, 0x10	; 16
    29ba:	a7 2e       	mov	r10, r23
    29bc:	84 ff       	sbrs	r24, 4
    29be:	03 c0       	rjmp	.+6      	; 0x29c6 <dtoa_prf+0x228>
    29c0:	31 33       	cpi	r19, 0x31	; 49
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <dtoa_prf+0x228>
    29c4:	91 50       	subi	r25, 0x01	; 1
    29c6:	19 16       	cp	r1, r25
    29c8:	24 f4       	brge	.+8      	; 0x29d2 <dtoa_prf+0x234>
    29ca:	99 30       	cpi	r25, 0x09	; 9
    29cc:	18 f0       	brcs	.+6      	; 0x29d4 <dtoa_prf+0x236>
    29ce:	98 e0       	ldi	r25, 0x08	; 8
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <dtoa_prf+0x236>
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	e4 2f       	mov	r30, r20
    29d6:	85 2f       	mov	r24, r21
    29d8:	57 ff       	sbrs	r21, 7
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <dtoa_prf+0x242>
    29dc:	e0 e0       	ldi	r30, 0x00	; 0
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	6e 2f       	mov	r22, r30
    29e2:	78 2f       	mov	r23, r24
    29e4:	e0 e0       	ldi	r30, 0x00	; 0
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	ae e2       	ldi	r26, 0x2E	; 46
    29ea:	9a 2e       	mov	r9, r26
    29ec:	3a 01       	movw	r6, r20
    29ee:	69 1a       	sub	r6, r25
    29f0:	71 08       	sbc	r7, r1
    29f2:	2a 01       	movw	r4, r20
    29f4:	46 1a       	sub	r4, r22
    29f6:	57 0a       	sbc	r5, r23
    29f8:	0b 2d       	mov	r16, r11
    29fa:	10 e0       	ldi	r17, 0x00	; 0
    29fc:	11 95       	neg	r17
    29fe:	01 95       	neg	r16
    2a00:	11 09       	sbc	r17, r1
    2a02:	6f 3f       	cpi	r22, 0xFF	; 255
    2a04:	8f ef       	ldi	r24, 0xFF	; 255
    2a06:	78 07       	cpc	r23, r24
    2a08:	29 f4       	brne	.+10     	; 0x2a14 <dtoa_prf+0x276>
    2a0a:	d6 01       	movw	r26, r12
    2a0c:	9c 92       	st	X, r9
    2a0e:	c6 01       	movw	r24, r12
    2a10:	01 96       	adiw	r24, 0x01	; 1
    2a12:	6c 01       	movw	r12, r24
    2a14:	46 17       	cp	r20, r22
    2a16:	57 07       	cpc	r21, r23
    2a18:	84 f0       	brlt	.+32     	; 0x2a3a <dtoa_prf+0x29c>
    2a1a:	66 16       	cp	r6, r22
    2a1c:	77 06       	cpc	r7, r23
    2a1e:	6c f4       	brge	.+26     	; 0x2a3a <dtoa_prf+0x29c>
    2a20:	7f 01       	movw	r14, r30
    2a22:	e4 0c       	add	r14, r4
    2a24:	f5 1c       	adc	r15, r5
    2a26:	a1 e0       	ldi	r26, 0x01	; 1
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	ac 0f       	add	r26, r28
    2a2c:	bd 1f       	adc	r27, r29
    2a2e:	ea 0e       	add	r14, r26
    2a30:	fb 1e       	adc	r15, r27
    2a32:	d7 01       	movw	r26, r14
    2a34:	11 96       	adiw	r26, 0x01	; 1
    2a36:	bc 90       	ld	r11, X
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <dtoa_prf+0x2a0>
    2a3a:	90 e3       	ldi	r25, 0x30	; 48
    2a3c:	b9 2e       	mov	r11, r25
    2a3e:	61 50       	subi	r22, 0x01	; 1
    2a40:	71 09       	sbc	r23, r1
    2a42:	31 96       	adiw	r30, 0x01	; 1
    2a44:	c6 01       	movw	r24, r12
    2a46:	01 96       	adiw	r24, 0x01	; 1
    2a48:	7c 01       	movw	r14, r24
    2a4a:	60 17       	cp	r22, r16
    2a4c:	71 07       	cpc	r23, r17
    2a4e:	24 f0       	brlt	.+8      	; 0x2a58 <dtoa_prf+0x2ba>
    2a50:	d6 01       	movw	r26, r12
    2a52:	bc 92       	st	X, r11
    2a54:	6c 01       	movw	r12, r24
    2a56:	d5 cf       	rjmp	.-86     	; 0x2a02 <dtoa_prf+0x264>
    2a58:	64 17       	cp	r22, r20
    2a5a:	75 07       	cpc	r23, r21
    2a5c:	41 f4       	brne	.+16     	; 0x2a6e <dtoa_prf+0x2d0>
    2a5e:	36 33       	cpi	r19, 0x36	; 54
    2a60:	20 f4       	brcc	.+8      	; 0x2a6a <dtoa_prf+0x2cc>
    2a62:	35 33       	cpi	r19, 0x35	; 53
    2a64:	21 f4       	brne	.+8      	; 0x2a6e <dtoa_prf+0x2d0>
    2a66:	a1 10       	cpse	r10, r1
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <dtoa_prf+0x2d0>
    2a6a:	81 e3       	ldi	r24, 0x31	; 49
    2a6c:	b8 2e       	mov	r11, r24
    2a6e:	f6 01       	movw	r30, r12
    2a70:	b0 82       	st	Z, r11
    2a72:	f7 01       	movw	r30, r14
    2a74:	82 2f       	mov	r24, r18
    2a76:	90 e2       	ldi	r25, 0x20	; 32
    2a78:	88 23       	and	r24, r24
    2a7a:	19 f0       	breq	.+6      	; 0x2a82 <dtoa_prf+0x2e4>
    2a7c:	91 93       	st	Z+, r25
    2a7e:	81 50       	subi	r24, 0x01	; 1
    2a80:	fb cf       	rjmp	.-10     	; 0x2a78 <dtoa_prf+0x2da>
    2a82:	f7 01       	movw	r30, r14
    2a84:	e2 0f       	add	r30, r18
    2a86:	f1 1d       	adc	r31, r1
    2a88:	10 82       	st	Z, r1
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	29 96       	adiw	r28, 0x09	; 9
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	bf 90       	pop	r11
    2aac:	af 90       	pop	r10
    2aae:	9f 90       	pop	r9
    2ab0:	7f 90       	pop	r7
    2ab2:	6f 90       	pop	r6
    2ab4:	5f 90       	pop	r5
    2ab6:	4f 90       	pop	r4
    2ab8:	08 95       	ret

00002aba <strtod>:
    2aba:	a0 e0       	ldi	r26, 0x00	; 0
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e3 e6       	ldi	r30, 0x63	; 99
    2ac0:	f5 e1       	ldi	r31, 0x15	; 21
    2ac2:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__prologue_saves__+0x8>
    2ac6:	ec 01       	movw	r28, r24
    2ac8:	7b 01       	movw	r14, r22
    2aca:	61 15       	cp	r22, r1
    2acc:	71 05       	cpc	r23, r1
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <strtod+0x1c>
    2ad0:	db 01       	movw	r26, r22
    2ad2:	8d 93       	st	X+, r24
    2ad4:	9c 93       	st	X, r25
    2ad6:	8e 01       	movw	r16, r28
    2ad8:	0f 5f       	subi	r16, 0xFF	; 255
    2ada:	1f 4f       	sbci	r17, 0xFF	; 255
    2adc:	78 80       	ld	r7, Y
    2ade:	87 2d       	mov	r24, r7
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0e 94 92 17 	call	0x2f24	; 0x2f24 <isspace>
    2ae6:	89 2b       	or	r24, r25
    2ae8:	11 f0       	breq	.+4      	; 0x2aee <strtod+0x34>
    2aea:	e8 01       	movw	r28, r16
    2aec:	f4 cf       	rjmp	.-24     	; 0x2ad6 <strtod+0x1c>
    2aee:	bd e2       	ldi	r27, 0x2D	; 45
    2af0:	7b 12       	cpse	r7, r27
    2af2:	05 c0       	rjmp	.+10     	; 0x2afe <strtod+0x44>
    2af4:	0f 5f       	subi	r16, 0xFF	; 255
    2af6:	1f 4f       	sbci	r17, 0xFF	; 255
    2af8:	79 80       	ldd	r7, Y+1	; 0x01
    2afa:	c1 e0       	ldi	r28, 0x01	; 1
    2afc:	08 c0       	rjmp	.+16     	; 0x2b0e <strtod+0x54>
    2afe:	eb e2       	ldi	r30, 0x2B	; 43
    2b00:	7e 12       	cpse	r7, r30
    2b02:	04 c0       	rjmp	.+8      	; 0x2b0c <strtod+0x52>
    2b04:	8e 01       	movw	r16, r28
    2b06:	0e 5f       	subi	r16, 0xFE	; 254
    2b08:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0a:	79 80       	ldd	r7, Y+1	; 0x01
    2b0c:	c0 e0       	ldi	r28, 0x00	; 0
    2b0e:	68 01       	movw	r12, r16
    2b10:	f1 e0       	ldi	r31, 0x01	; 1
    2b12:	cf 1a       	sub	r12, r31
    2b14:	d1 08       	sbc	r13, r1
    2b16:	43 e0       	ldi	r20, 0x03	; 3
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	6e e4       	ldi	r22, 0x4E	; 78
    2b1c:	71 e0       	ldi	r23, 0x01	; 1
    2b1e:	c6 01       	movw	r24, r12
    2b20:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <strncasecmp_P>
    2b24:	89 2b       	or	r24, r25
    2b26:	f1 f4       	brne	.+60     	; 0x2b64 <strtod+0xaa>
    2b28:	68 01       	movw	r12, r16
    2b2a:	22 e0       	ldi	r18, 0x02	; 2
    2b2c:	c2 0e       	add	r12, r18
    2b2e:	d1 1c       	adc	r13, r1
    2b30:	45 e0       	ldi	r20, 0x05	; 5
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	69 e4       	ldi	r22, 0x49	; 73
    2b36:	71 e0       	ldi	r23, 0x01	; 1
    2b38:	c6 01       	movw	r24, r12
    2b3a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <strncasecmp_P>
    2b3e:	89 2b       	or	r24, r25
    2b40:	21 f4       	brne	.+8      	; 0x2b4a <strtod+0x90>
    2b42:	68 01       	movw	r12, r16
    2b44:	87 e0       	ldi	r24, 0x07	; 7
    2b46:	c8 0e       	add	r12, r24
    2b48:	d1 1c       	adc	r13, r1
    2b4a:	e1 14       	cp	r14, r1
    2b4c:	f1 04       	cpc	r15, r1
    2b4e:	19 f0       	breq	.+6      	; 0x2b56 <strtod+0x9c>
    2b50:	d7 01       	movw	r26, r14
    2b52:	cd 92       	st	X+, r12
    2b54:	dc 92       	st	X, r13
    2b56:	c1 11       	cpse	r28, r1
    2b58:	ff c0       	rjmp	.+510    	; 0x2d58 <strtod+0x29e>
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	80 e8       	ldi	r24, 0x80	; 128
    2b60:	9f e7       	ldi	r25, 0x7F	; 127
    2b62:	03 c1       	rjmp	.+518    	; 0x2d6a <strtod+0x2b0>
    2b64:	43 e0       	ldi	r20, 0x03	; 3
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	66 e4       	ldi	r22, 0x46	; 70
    2b6a:	71 e0       	ldi	r23, 0x01	; 1
    2b6c:	c6 01       	movw	r24, r12
    2b6e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <strncasecmp_P>
    2b72:	89 2b       	or	r24, r25
    2b74:	51 f4       	brne	.+20     	; 0x2b8a <strtod+0xd0>
    2b76:	e1 14       	cp	r14, r1
    2b78:	f1 04       	cpc	r15, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <strtod+0xc4>
    2b7c:	f2 c0       	rjmp	.+484    	; 0x2d62 <strtod+0x2a8>
    2b7e:	0e 5f       	subi	r16, 0xFE	; 254
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	f7 01       	movw	r30, r14
    2b84:	11 83       	std	Z+1, r17	; 0x01
    2b86:	00 83       	st	Z, r16
    2b88:	ec c0       	rjmp	.+472    	; 0x2d62 <strtod+0x2a8>
    2b8a:	68 01       	movw	r12, r16
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	cb 01       	movw	r24, r22
    2b92:	00 e0       	ldi	r16, 0x00	; 0
    2b94:	10 e0       	ldi	r17, 0x00	; 0
    2b96:	f6 01       	movw	r30, r12
    2b98:	d0 ed       	ldi	r29, 0xD0	; 208
    2b9a:	d7 0d       	add	r29, r7
    2b9c:	da 30       	cpi	r29, 0x0A	; 10
    2b9e:	58 f5       	brcc	.+86     	; 0x2bf6 <strtod+0x13c>
    2ba0:	2c 2f       	mov	r18, r28
    2ba2:	22 60       	ori	r18, 0x02	; 2
    2ba4:	62 2e       	mov	r6, r18
    2ba6:	2c 2f       	mov	r18, r28
    2ba8:	28 70       	andi	r18, 0x08	; 8
    2baa:	c2 ff       	sbrs	r28, 2
    2bac:	05 c0       	rjmp	.+10     	; 0x2bb8 <strtod+0xfe>
    2bae:	21 11       	cpse	r18, r1
    2bb0:	28 c0       	rjmp	.+80     	; 0x2c02 <strtod+0x148>
    2bb2:	0f 5f       	subi	r16, 0xFF	; 255
    2bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb6:	25 c0       	rjmp	.+74     	; 0x2c02 <strtod+0x148>
    2bb8:	22 23       	and	r18, r18
    2bba:	11 f0       	breq	.+4      	; 0x2bc0 <strtod+0x106>
    2bbc:	01 50       	subi	r16, 0x01	; 1
    2bbe:	11 09       	sbc	r17, r1
    2bc0:	a5 e0       	ldi	r26, 0x05	; 5
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	9b 01       	movw	r18, r22
    2bc6:	ac 01       	movw	r20, r24
    2bc8:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <__muluhisi3>
    2bcc:	4b 01       	movw	r8, r22
    2bce:	5c 01       	movw	r10, r24
    2bd0:	88 0c       	add	r8, r8
    2bd2:	99 1c       	adc	r9, r9
    2bd4:	aa 1c       	adc	r10, r10
    2bd6:	bb 1c       	adc	r11, r11
    2bd8:	c5 01       	movw	r24, r10
    2bda:	b4 01       	movw	r22, r8
    2bdc:	6d 0f       	add	r22, r29
    2bde:	71 1d       	adc	r23, r1
    2be0:	81 1d       	adc	r24, r1
    2be2:	91 1d       	adc	r25, r1
    2be4:	68 39       	cpi	r22, 0x98	; 152
    2be6:	a9 e9       	ldi	r26, 0x99	; 153
    2be8:	7a 07       	cpc	r23, r26
    2bea:	8a 07       	cpc	r24, r26
    2bec:	a9 e1       	ldi	r26, 0x19	; 25
    2bee:	9a 07       	cpc	r25, r26
    2bf0:	40 f0       	brcs	.+16     	; 0x2c02 <strtod+0x148>
    2bf2:	c6 60       	ori	r28, 0x06	; 6
    2bf4:	05 c0       	rjmp	.+10     	; 0x2c00 <strtod+0x146>
    2bf6:	de 3f       	cpi	r29, 0xFE	; 254
    2bf8:	51 f4       	brne	.+20     	; 0x2c0e <strtod+0x154>
    2bfa:	c3 fd       	sbrc	r28, 3
    2bfc:	44 c0       	rjmp	.+136    	; 0x2c86 <strtod+0x1cc>
    2bfe:	c8 60       	ori	r28, 0x08	; 8
    2c00:	6c 2e       	mov	r6, r28
    2c02:	bf ef       	ldi	r27, 0xFF	; 255
    2c04:	cb 1a       	sub	r12, r27
    2c06:	db 0a       	sbc	r13, r27
    2c08:	70 80       	ld	r7, Z
    2c0a:	c6 2d       	mov	r28, r6
    2c0c:	c4 cf       	rjmp	.-120    	; 0x2b96 <strtod+0xdc>
    2c0e:	2d 2f       	mov	r18, r29
    2c10:	2f 7d       	andi	r18, 0xDF	; 223
    2c12:	25 31       	cpi	r18, 0x15	; 21
    2c14:	c1 f5       	brne	.+112    	; 0x2c86 <strtod+0x1cc>
    2c16:	40 81       	ld	r20, Z
    2c18:	4d 32       	cpi	r20, 0x2D	; 45
    2c1a:	11 f4       	brne	.+4      	; 0x2c20 <strtod+0x166>
    2c1c:	c0 61       	ori	r28, 0x10	; 16
    2c1e:	06 c0       	rjmp	.+12     	; 0x2c2c <strtod+0x172>
    2c20:	4b 32       	cpi	r20, 0x2B	; 43
    2c22:	21 f0       	breq	.+8      	; 0x2c2c <strtod+0x172>
    2c24:	31 96       	adiw	r30, 0x01	; 1
    2c26:	21 e0       	ldi	r18, 0x01	; 1
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	06 c0       	rjmp	.+12     	; 0x2c38 <strtod+0x17e>
    2c2c:	32 96       	adiw	r30, 0x02	; 2
    2c2e:	d6 01       	movw	r26, r12
    2c30:	11 96       	adiw	r26, 0x01	; 1
    2c32:	4c 91       	ld	r20, X
    2c34:	22 e0       	ldi	r18, 0x02	; 2
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	a0 ed       	ldi	r26, 0xD0	; 208
    2c3a:	a4 0f       	add	r26, r20
    2c3c:	aa 30       	cpi	r26, 0x0A	; 10
    2c3e:	18 f0       	brcs	.+6      	; 0x2c46 <strtod+0x18c>
    2c40:	e2 1b       	sub	r30, r18
    2c42:	f3 0b       	sbc	r31, r19
    2c44:	20 c0       	rjmp	.+64     	; 0x2c86 <strtod+0x1cc>
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	50 e0       	ldi	r21, 0x00	; 0
    2c4a:	40 38       	cpi	r20, 0x80	; 128
    2c4c:	bc e0       	ldi	r27, 0x0C	; 12
    2c4e:	5b 07       	cpc	r21, r27
    2c50:	5c f4       	brge	.+22     	; 0x2c68 <strtod+0x1ae>
    2c52:	9a 01       	movw	r18, r20
    2c54:	22 0f       	add	r18, r18
    2c56:	33 1f       	adc	r19, r19
    2c58:	22 0f       	add	r18, r18
    2c5a:	33 1f       	adc	r19, r19
    2c5c:	42 0f       	add	r20, r18
    2c5e:	53 1f       	adc	r21, r19
    2c60:	44 0f       	add	r20, r20
    2c62:	55 1f       	adc	r21, r21
    2c64:	4a 0f       	add	r20, r26
    2c66:	51 1d       	adc	r21, r1
    2c68:	31 96       	adiw	r30, 0x01	; 1
    2c6a:	df 01       	movw	r26, r30
    2c6c:	11 97       	sbiw	r26, 0x01	; 1
    2c6e:	2c 91       	ld	r18, X
    2c70:	a0 ed       	ldi	r26, 0xD0	; 208
    2c72:	a2 0f       	add	r26, r18
    2c74:	aa 30       	cpi	r26, 0x0A	; 10
    2c76:	48 f3       	brcs	.-46     	; 0x2c4a <strtod+0x190>
    2c78:	c4 ff       	sbrs	r28, 4
    2c7a:	03 c0       	rjmp	.+6      	; 0x2c82 <strtod+0x1c8>
    2c7c:	51 95       	neg	r21
    2c7e:	41 95       	neg	r20
    2c80:	51 09       	sbc	r21, r1
    2c82:	04 0f       	add	r16, r20
    2c84:	15 1f       	adc	r17, r21
    2c86:	c1 ff       	sbrs	r28, 1
    2c88:	07 c0       	rjmp	.+14     	; 0x2c98 <strtod+0x1de>
    2c8a:	e1 14       	cp	r14, r1
    2c8c:	f1 04       	cpc	r15, r1
    2c8e:	21 f0       	breq	.+8      	; 0x2c98 <strtod+0x1de>
    2c90:	31 97       	sbiw	r30, 0x01	; 1
    2c92:	d7 01       	movw	r26, r14
    2c94:	ed 93       	st	X+, r30
    2c96:	fc 93       	st	X, r31
    2c98:	0e 94 ee 10 	call	0x21dc	; 0x21dc <__floatunsisf>
    2c9c:	c3 70       	andi	r28, 0x03	; 3
    2c9e:	c3 30       	cpi	r28, 0x03	; 3
    2ca0:	19 f0       	breq	.+6      	; 0x2ca8 <strtod+0x1ee>
    2ca2:	6b 01       	movw	r12, r22
    2ca4:	7c 01       	movw	r14, r24
    2ca6:	06 c0       	rjmp	.+12     	; 0x2cb4 <strtod+0x1fa>
    2ca8:	6b 01       	movw	r12, r22
    2caa:	7c 01       	movw	r14, r24
    2cac:	f7 fa       	bst	r15, 7
    2cae:	f0 94       	com	r15
    2cb0:	f7 f8       	bld	r15, 7
    2cb2:	f0 94       	com	r15
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	a9 01       	movw	r20, r18
    2cba:	c7 01       	movw	r24, r14
    2cbc:	b6 01       	movw	r22, r12
    2cbe:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    2cc2:	88 23       	and	r24, r24
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <strtod+0x20e>
    2cc6:	45 c0       	rjmp	.+138    	; 0x2d52 <strtod+0x298>
    2cc8:	17 ff       	sbrs	r17, 7
    2cca:	06 c0       	rjmp	.+12     	; 0x2cd8 <strtod+0x21e>
    2ccc:	11 95       	neg	r17
    2cce:	01 95       	neg	r16
    2cd0:	11 09       	sbc	r17, r1
    2cd2:	c5 e6       	ldi	r28, 0x65	; 101
    2cd4:	d1 e0       	ldi	r29, 0x01	; 1
    2cd6:	02 c0       	rjmp	.+4      	; 0x2cdc <strtod+0x222>
    2cd8:	cd e7       	ldi	r28, 0x7D	; 125
    2cda:	d1 e0       	ldi	r29, 0x01	; 1
    2cdc:	5e 01       	movw	r10, r28
    2cde:	b8 e1       	ldi	r27, 0x18	; 24
    2ce0:	ab 1a       	sub	r10, r27
    2ce2:	b1 08       	sbc	r11, r1
    2ce4:	46 01       	movw	r8, r12
    2ce6:	be 2d       	mov	r27, r14
    2ce8:	af 2d       	mov	r26, r15
    2cea:	90 e2       	ldi	r25, 0x20	; 32
    2cec:	e9 2e       	mov	r14, r25
    2cee:	f1 2c       	mov	r15, r1
    2cf0:	0e 15       	cp	r16, r14
    2cf2:	1f 05       	cpc	r17, r15
    2cf4:	84 f0       	brlt	.+32     	; 0x2d16 <strtod+0x25c>
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	25 91       	lpm	r18, Z+
    2cfa:	35 91       	lpm	r19, Z+
    2cfc:	45 91       	lpm	r20, Z+
    2cfe:	54 91       	lpm	r21, Z
    2d00:	b4 01       	movw	r22, r8
    2d02:	8b 2f       	mov	r24, r27
    2d04:	9a 2f       	mov	r25, r26
    2d06:	0e 94 a5 11 	call	0x234a	; 0x234a <__mulsf3>
    2d0a:	4b 01       	movw	r8, r22
    2d0c:	b8 2f       	mov	r27, r24
    2d0e:	a9 2f       	mov	r26, r25
    2d10:	0e 19       	sub	r16, r14
    2d12:	1f 09       	sbc	r17, r15
    2d14:	ed cf       	rjmp	.-38     	; 0x2cf0 <strtod+0x236>
    2d16:	24 97       	sbiw	r28, 0x04	; 4
    2d18:	f5 94       	asr	r15
    2d1a:	e7 94       	ror	r14
    2d1c:	ca 15       	cp	r28, r10
    2d1e:	db 05       	cpc	r29, r11
    2d20:	39 f7       	brne	.-50     	; 0x2cf0 <strtod+0x236>
    2d22:	64 01       	movw	r12, r8
    2d24:	eb 2e       	mov	r14, r27
    2d26:	fa 2e       	mov	r15, r26
    2d28:	8e 2d       	mov	r24, r14
    2d2a:	88 0f       	add	r24, r24
    2d2c:	8f 2d       	mov	r24, r15
    2d2e:	88 1f       	adc	r24, r24
    2d30:	8f 3f       	cpi	r24, 0xFF	; 255
    2d32:	49 f0       	breq	.+18     	; 0x2d46 <strtod+0x28c>
    2d34:	20 e0       	ldi	r18, 0x00	; 0
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	a9 01       	movw	r20, r18
    2d3a:	c7 01       	movw	r24, r14
    2d3c:	b6 01       	movw	r22, r12
    2d3e:	0e 94 77 10 	call	0x20ee	; 0x20ee <__cmpsf2>
    2d42:	81 11       	cpse	r24, r1
    2d44:	06 c0       	rjmp	.+12     	; 0x2d52 <strtod+0x298>
    2d46:	82 e2       	ldi	r24, 0x22	; 34
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <errno+0x1>
    2d4e:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <errno>
    2d52:	c7 01       	movw	r24, r14
    2d54:	b6 01       	movw	r22, r12
    2d56:	09 c0       	rjmp	.+18     	; 0x2d6a <strtod+0x2b0>
    2d58:	60 e0       	ldi	r22, 0x00	; 0
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	80 e8       	ldi	r24, 0x80	; 128
    2d5e:	9f ef       	ldi	r25, 0xFF	; 255
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <strtod+0x2b0>
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	80 ec       	ldi	r24, 0xC0	; 192
    2d68:	9f e7       	ldi	r25, 0x7F	; 127
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	ee e0       	ldi	r30, 0x0E	; 14
    2d70:	0c 94 f1 17 	jmp	0x2fe2	; 0x2fe2 <__epilogue_restores__+0x8>

00002d74 <__ftoa_engine>:
    2d74:	28 30       	cpi	r18, 0x08	; 8
    2d76:	08 f0       	brcs	.+2      	; 0x2d7a <__ftoa_engine+0x6>
    2d78:	27 e0       	ldi	r18, 0x07	; 7
    2d7a:	33 27       	eor	r19, r19
    2d7c:	da 01       	movw	r26, r20
    2d7e:	99 0f       	add	r25, r25
    2d80:	31 1d       	adc	r19, r1
    2d82:	87 fd       	sbrc	r24, 7
    2d84:	91 60       	ori	r25, 0x01	; 1
    2d86:	00 96       	adiw	r24, 0x00	; 0
    2d88:	61 05       	cpc	r22, r1
    2d8a:	71 05       	cpc	r23, r1
    2d8c:	39 f4       	brne	.+14     	; 0x2d9c <__ftoa_engine+0x28>
    2d8e:	32 60       	ori	r19, 0x02	; 2
    2d90:	2e 5f       	subi	r18, 0xFE	; 254
    2d92:	3d 93       	st	X+, r19
    2d94:	30 e3       	ldi	r19, 0x30	; 48
    2d96:	2a 95       	dec	r18
    2d98:	e1 f7       	brne	.-8      	; 0x2d92 <__ftoa_engine+0x1e>
    2d9a:	08 95       	ret
    2d9c:	9f 3f       	cpi	r25, 0xFF	; 255
    2d9e:	30 f0       	brcs	.+12     	; 0x2dac <__ftoa_engine+0x38>
    2da0:	80 38       	cpi	r24, 0x80	; 128
    2da2:	71 05       	cpc	r23, r1
    2da4:	61 05       	cpc	r22, r1
    2da6:	09 f0       	breq	.+2      	; 0x2daa <__ftoa_engine+0x36>
    2da8:	3c 5f       	subi	r19, 0xFC	; 252
    2daa:	3c 5f       	subi	r19, 0xFC	; 252
    2dac:	3d 93       	st	X+, r19
    2dae:	91 30       	cpi	r25, 0x01	; 1
    2db0:	08 f0       	brcs	.+2      	; 0x2db4 <__ftoa_engine+0x40>
    2db2:	80 68       	ori	r24, 0x80	; 128
    2db4:	91 1d       	adc	r25, r1
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	1f 93       	push	r17
    2dbc:	0f 93       	push	r16
    2dbe:	ff 92       	push	r15
    2dc0:	ef 92       	push	r14
    2dc2:	19 2f       	mov	r17, r25
    2dc4:	98 7f       	andi	r25, 0xF8	; 248
    2dc6:	96 95       	lsr	r25
    2dc8:	e9 2f       	mov	r30, r25
    2dca:	96 95       	lsr	r25
    2dcc:	96 95       	lsr	r25
    2dce:	e9 0f       	add	r30, r25
    2dd0:	ff 27       	eor	r31, r31
    2dd2:	e5 52       	subi	r30, 0x25	; 37
    2dd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd6:	99 27       	eor	r25, r25
    2dd8:	33 27       	eor	r19, r19
    2dda:	ee 24       	eor	r14, r14
    2ddc:	ff 24       	eor	r15, r15
    2dde:	a7 01       	movw	r20, r14
    2de0:	e7 01       	movw	r28, r14
    2de2:	05 90       	lpm	r0, Z+
    2de4:	08 94       	sec
    2de6:	07 94       	ror	r0
    2de8:	28 f4       	brcc	.+10     	; 0x2df4 <__ftoa_engine+0x80>
    2dea:	36 0f       	add	r19, r22
    2dec:	e7 1e       	adc	r14, r23
    2dee:	f8 1e       	adc	r15, r24
    2df0:	49 1f       	adc	r20, r25
    2df2:	51 1d       	adc	r21, r1
    2df4:	66 0f       	add	r22, r22
    2df6:	77 1f       	adc	r23, r23
    2df8:	88 1f       	adc	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	06 94       	lsr	r0
    2dfe:	a1 f7       	brne	.-24     	; 0x2de8 <__ftoa_engine+0x74>
    2e00:	05 90       	lpm	r0, Z+
    2e02:	07 94       	ror	r0
    2e04:	28 f4       	brcc	.+10     	; 0x2e10 <__ftoa_engine+0x9c>
    2e06:	e7 0e       	add	r14, r23
    2e08:	f8 1e       	adc	r15, r24
    2e0a:	49 1f       	adc	r20, r25
    2e0c:	56 1f       	adc	r21, r22
    2e0e:	c1 1d       	adc	r28, r1
    2e10:	77 0f       	add	r23, r23
    2e12:	88 1f       	adc	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	66 1f       	adc	r22, r22
    2e18:	06 94       	lsr	r0
    2e1a:	a1 f7       	brne	.-24     	; 0x2e04 <__ftoa_engine+0x90>
    2e1c:	05 90       	lpm	r0, Z+
    2e1e:	07 94       	ror	r0
    2e20:	28 f4       	brcc	.+10     	; 0x2e2c <__ftoa_engine+0xb8>
    2e22:	f8 0e       	add	r15, r24
    2e24:	49 1f       	adc	r20, r25
    2e26:	56 1f       	adc	r21, r22
    2e28:	c7 1f       	adc	r28, r23
    2e2a:	d1 1d       	adc	r29, r1
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	66 1f       	adc	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	06 94       	lsr	r0
    2e36:	a1 f7       	brne	.-24     	; 0x2e20 <__ftoa_engine+0xac>
    2e38:	05 90       	lpm	r0, Z+
    2e3a:	07 94       	ror	r0
    2e3c:	20 f4       	brcc	.+8      	; 0x2e46 <__ftoa_engine+0xd2>
    2e3e:	49 0f       	add	r20, r25
    2e40:	56 1f       	adc	r21, r22
    2e42:	c7 1f       	adc	r28, r23
    2e44:	d8 1f       	adc	r29, r24
    2e46:	99 0f       	add	r25, r25
    2e48:	66 1f       	adc	r22, r22
    2e4a:	77 1f       	adc	r23, r23
    2e4c:	88 1f       	adc	r24, r24
    2e4e:	06 94       	lsr	r0
    2e50:	a9 f7       	brne	.-22     	; 0x2e3c <__ftoa_engine+0xc8>
    2e52:	84 91       	lpm	r24, Z
    2e54:	10 95       	com	r17
    2e56:	17 70       	andi	r17, 0x07	; 7
    2e58:	41 f0       	breq	.+16     	; 0x2e6a <__ftoa_engine+0xf6>
    2e5a:	d6 95       	lsr	r29
    2e5c:	c7 95       	ror	r28
    2e5e:	57 95       	ror	r21
    2e60:	47 95       	ror	r20
    2e62:	f7 94       	ror	r15
    2e64:	e7 94       	ror	r14
    2e66:	1a 95       	dec	r17
    2e68:	c1 f7       	brne	.-16     	; 0x2e5a <__ftoa_engine+0xe6>
    2e6a:	e1 e8       	ldi	r30, 0x81	; 129
    2e6c:	f1 e0       	ldi	r31, 0x01	; 1
    2e6e:	68 94       	set
    2e70:	15 90       	lpm	r1, Z+
    2e72:	15 91       	lpm	r17, Z+
    2e74:	35 91       	lpm	r19, Z+
    2e76:	65 91       	lpm	r22, Z+
    2e78:	95 91       	lpm	r25, Z+
    2e7a:	05 90       	lpm	r0, Z+
    2e7c:	7f e2       	ldi	r23, 0x2F	; 47
    2e7e:	73 95       	inc	r23
    2e80:	e1 18       	sub	r14, r1
    2e82:	f1 0a       	sbc	r15, r17
    2e84:	43 0b       	sbc	r20, r19
    2e86:	56 0b       	sbc	r21, r22
    2e88:	c9 0b       	sbc	r28, r25
    2e8a:	d0 09       	sbc	r29, r0
    2e8c:	c0 f7       	brcc	.-16     	; 0x2e7e <__ftoa_engine+0x10a>
    2e8e:	e1 0c       	add	r14, r1
    2e90:	f1 1e       	adc	r15, r17
    2e92:	43 1f       	adc	r20, r19
    2e94:	56 1f       	adc	r21, r22
    2e96:	c9 1f       	adc	r28, r25
    2e98:	d0 1d       	adc	r29, r0
    2e9a:	7e f4       	brtc	.+30     	; 0x2eba <__ftoa_engine+0x146>
    2e9c:	70 33       	cpi	r23, 0x30	; 48
    2e9e:	11 f4       	brne	.+4      	; 0x2ea4 <__ftoa_engine+0x130>
    2ea0:	8a 95       	dec	r24
    2ea2:	e6 cf       	rjmp	.-52     	; 0x2e70 <__ftoa_engine+0xfc>
    2ea4:	e8 94       	clt
    2ea6:	01 50       	subi	r16, 0x01	; 1
    2ea8:	30 f0       	brcs	.+12     	; 0x2eb6 <__ftoa_engine+0x142>
    2eaa:	08 0f       	add	r16, r24
    2eac:	0a f4       	brpl	.+2      	; 0x2eb0 <__ftoa_engine+0x13c>
    2eae:	00 27       	eor	r16, r16
    2eb0:	02 17       	cp	r16, r18
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <__ftoa_engine+0x142>
    2eb4:	20 2f       	mov	r18, r16
    2eb6:	23 95       	inc	r18
    2eb8:	02 2f       	mov	r16, r18
    2eba:	7a 33       	cpi	r23, 0x3A	; 58
    2ebc:	28 f0       	brcs	.+10     	; 0x2ec8 <__ftoa_engine+0x154>
    2ebe:	79 e3       	ldi	r23, 0x39	; 57
    2ec0:	7d 93       	st	X+, r23
    2ec2:	2a 95       	dec	r18
    2ec4:	e9 f7       	brne	.-6      	; 0x2ec0 <__ftoa_engine+0x14c>
    2ec6:	10 c0       	rjmp	.+32     	; 0x2ee8 <__ftoa_engine+0x174>
    2ec8:	7d 93       	st	X+, r23
    2eca:	2a 95       	dec	r18
    2ecc:	89 f6       	brne	.-94     	; 0x2e70 <__ftoa_engine+0xfc>
    2ece:	06 94       	lsr	r0
    2ed0:	97 95       	ror	r25
    2ed2:	67 95       	ror	r22
    2ed4:	37 95       	ror	r19
    2ed6:	17 95       	ror	r17
    2ed8:	17 94       	ror	r1
    2eda:	e1 18       	sub	r14, r1
    2edc:	f1 0a       	sbc	r15, r17
    2ede:	43 0b       	sbc	r20, r19
    2ee0:	56 0b       	sbc	r21, r22
    2ee2:	c9 0b       	sbc	r28, r25
    2ee4:	d0 09       	sbc	r29, r0
    2ee6:	98 f0       	brcs	.+38     	; 0x2f0e <__ftoa_engine+0x19a>
    2ee8:	23 95       	inc	r18
    2eea:	7e 91       	ld	r23, -X
    2eec:	73 95       	inc	r23
    2eee:	7a 33       	cpi	r23, 0x3A	; 58
    2ef0:	08 f0       	brcs	.+2      	; 0x2ef4 <__ftoa_engine+0x180>
    2ef2:	70 e3       	ldi	r23, 0x30	; 48
    2ef4:	7c 93       	st	X, r23
    2ef6:	20 13       	cpse	r18, r16
    2ef8:	b8 f7       	brcc	.-18     	; 0x2ee8 <__ftoa_engine+0x174>
    2efa:	7e 91       	ld	r23, -X
    2efc:	70 61       	ori	r23, 0x10	; 16
    2efe:	7d 93       	st	X+, r23
    2f00:	30 f0       	brcs	.+12     	; 0x2f0e <__ftoa_engine+0x19a>
    2f02:	83 95       	inc	r24
    2f04:	71 e3       	ldi	r23, 0x31	; 49
    2f06:	7d 93       	st	X+, r23
    2f08:	70 e3       	ldi	r23, 0x30	; 48
    2f0a:	2a 95       	dec	r18
    2f0c:	e1 f7       	brne	.-8      	; 0x2f06 <__ftoa_engine+0x192>
    2f0e:	11 24       	eor	r1, r1
    2f10:	ef 90       	pop	r14
    2f12:	ff 90       	pop	r15
    2f14:	0f 91       	pop	r16
    2f16:	1f 91       	pop	r17
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	99 27       	eor	r25, r25
    2f1e:	87 fd       	sbrc	r24, 7
    2f20:	90 95       	com	r25
    2f22:	08 95       	ret

00002f24 <isspace>:
    2f24:	91 11       	cpse	r25, r1
    2f26:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__ctype_isfalse>
    2f2a:	80 32       	cpi	r24, 0x20	; 32
    2f2c:	19 f0       	breq	.+6      	; 0x2f34 <isspace+0x10>
    2f2e:	89 50       	subi	r24, 0x09	; 9
    2f30:	85 50       	subi	r24, 0x05	; 5
    2f32:	c8 f7       	brcc	.-14     	; 0x2f26 <isspace+0x2>
    2f34:	08 95       	ret

00002f36 <strncasecmp_P>:
    2f36:	fb 01       	movw	r30, r22
    2f38:	dc 01       	movw	r26, r24
    2f3a:	41 50       	subi	r20, 0x01	; 1
    2f3c:	50 40       	sbci	r21, 0x00	; 0
    2f3e:	88 f0       	brcs	.+34     	; 0x2f62 <strncasecmp_P+0x2c>
    2f40:	8d 91       	ld	r24, X+
    2f42:	81 34       	cpi	r24, 0x41	; 65
    2f44:	1c f0       	brlt	.+6      	; 0x2f4c <strncasecmp_P+0x16>
    2f46:	8b 35       	cpi	r24, 0x5B	; 91
    2f48:	0c f4       	brge	.+2      	; 0x2f4c <strncasecmp_P+0x16>
    2f4a:	80 5e       	subi	r24, 0xE0	; 224
    2f4c:	65 91       	lpm	r22, Z+
    2f4e:	61 34       	cpi	r22, 0x41	; 65
    2f50:	1c f0       	brlt	.+6      	; 0x2f58 <strncasecmp_P+0x22>
    2f52:	6b 35       	cpi	r22, 0x5B	; 91
    2f54:	0c f4       	brge	.+2      	; 0x2f58 <strncasecmp_P+0x22>
    2f56:	60 5e       	subi	r22, 0xE0	; 224
    2f58:	86 1b       	sub	r24, r22
    2f5a:	61 11       	cpse	r22, r1
    2f5c:	71 f3       	breq	.-36     	; 0x2f3a <strncasecmp_P+0x4>
    2f5e:	99 0b       	sbc	r25, r25
    2f60:	08 95       	ret
    2f62:	88 1b       	sub	r24, r24
    2f64:	fc cf       	rjmp	.-8      	; 0x2f5e <strncasecmp_P+0x28>

00002f66 <strrev>:
    2f66:	dc 01       	movw	r26, r24
    2f68:	fc 01       	movw	r30, r24
    2f6a:	67 2f       	mov	r22, r23
    2f6c:	71 91       	ld	r23, Z+
    2f6e:	77 23       	and	r23, r23
    2f70:	e1 f7       	brne	.-8      	; 0x2f6a <strrev+0x4>
    2f72:	32 97       	sbiw	r30, 0x02	; 2
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <strrev+0x18>
    2f76:	7c 91       	ld	r23, X
    2f78:	6d 93       	st	X+, r22
    2f7a:	70 83       	st	Z, r23
    2f7c:	62 91       	ld	r22, -Z
    2f7e:	ae 17       	cp	r26, r30
    2f80:	bf 07       	cpc	r27, r31
    2f82:	c8 f3       	brcs	.-14     	; 0x2f76 <strrev+0x10>
    2f84:	08 95       	ret

00002f86 <__ctype_isfalse>:
    2f86:	99 27       	eor	r25, r25
    2f88:	88 27       	eor	r24, r24

00002f8a <__ctype_istrue>:
    2f8a:	08 95       	ret

00002f8c <__muluhisi3>:
    2f8c:	0e 94 08 18 	call	0x3010	; 0x3010 <__umulhisi3>
    2f90:	a5 9f       	mul	r26, r21
    2f92:	90 0d       	add	r25, r0
    2f94:	b4 9f       	mul	r27, r20
    2f96:	90 0d       	add	r25, r0
    2f98:	a4 9f       	mul	r26, r20
    2f9a:	80 0d       	add	r24, r0
    2f9c:	91 1d       	adc	r25, r1
    2f9e:	11 24       	eor	r1, r1
    2fa0:	08 95       	ret

00002fa2 <__prologue_saves__>:
    2fa2:	2f 92       	push	r2
    2fa4:	3f 92       	push	r3
    2fa6:	4f 92       	push	r4
    2fa8:	5f 92       	push	r5
    2faa:	6f 92       	push	r6
    2fac:	7f 92       	push	r7
    2fae:	8f 92       	push	r8
    2fb0:	9f 92       	push	r9
    2fb2:	af 92       	push	r10
    2fb4:	bf 92       	push	r11
    2fb6:	cf 92       	push	r12
    2fb8:	df 92       	push	r13
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	ca 1b       	sub	r28, r26
    2fcc:	db 0b       	sbc	r29, r27
    2fce:	0f b6       	in	r0, 0x3f	; 63
    2fd0:	f8 94       	cli
    2fd2:	de bf       	out	0x3e, r29	; 62
    2fd4:	0f be       	out	0x3f, r0	; 63
    2fd6:	cd bf       	out	0x3d, r28	; 61
    2fd8:	09 94       	ijmp

00002fda <__epilogue_restores__>:
    2fda:	2a 88       	ldd	r2, Y+18	; 0x12
    2fdc:	39 88       	ldd	r3, Y+17	; 0x11
    2fde:	48 88       	ldd	r4, Y+16	; 0x10
    2fe0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fe2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fe4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fe6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fe8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fea:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fec:	b9 84       	ldd	r11, Y+9	; 0x09
    2fee:	c8 84       	ldd	r12, Y+8	; 0x08
    2ff0:	df 80       	ldd	r13, Y+7	; 0x07
    2ff2:	ee 80       	ldd	r14, Y+6	; 0x06
    2ff4:	fd 80       	ldd	r15, Y+5	; 0x05
    2ff6:	0c 81       	ldd	r16, Y+4	; 0x04
    2ff8:	1b 81       	ldd	r17, Y+3	; 0x03
    2ffa:	aa 81       	ldd	r26, Y+2	; 0x02
    2ffc:	b9 81       	ldd	r27, Y+1	; 0x01
    2ffe:	ce 0f       	add	r28, r30
    3000:	d1 1d       	adc	r29, r1
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	f8 94       	cli
    3006:	de bf       	out	0x3e, r29	; 62
    3008:	0f be       	out	0x3f, r0	; 63
    300a:	cd bf       	out	0x3d, r28	; 61
    300c:	ed 01       	movw	r28, r26
    300e:	08 95       	ret

00003010 <__umulhisi3>:
    3010:	a2 9f       	mul	r26, r18
    3012:	b0 01       	movw	r22, r0
    3014:	b3 9f       	mul	r27, r19
    3016:	c0 01       	movw	r24, r0
    3018:	a3 9f       	mul	r26, r19
    301a:	70 0d       	add	r23, r0
    301c:	81 1d       	adc	r24, r1
    301e:	11 24       	eor	r1, r1
    3020:	91 1d       	adc	r25, r1
    3022:	b2 9f       	mul	r27, r18
    3024:	70 0d       	add	r23, r0
    3026:	81 1d       	adc	r24, r1
    3028:	11 24       	eor	r1, r1
    302a:	91 1d       	adc	r25, r1
    302c:	08 95       	ret

0000302e <_exit>:
    302e:	f8 94       	cli

00003030 <__stop_program>:
    3030:	ff cf       	rjmp	.-2      	; 0x3030 <__stop_program>
